# ############################################################################
# K42: (C) Copyright IBM Corp. 2000.
# All Rights Reserved
#
# This file is distributed under the GNU LGPL. You should have
# received a copy of the License along with K42; see the file LICENSE.html
# in the top-level directory for more details.
#
#  $Id: Status,v 1.237 2005/08/25 18:37:07 rosnbrg Exp $
# ############################################################################

This is for SDET results. If you want postmark or dbench results, look
at file StatusOtherBenchs.

************************ not all the 270s work well.  Numbers
************************ should come from k4 or an equivalent
	fast machines k4
	(as of 8/28/2003 MAA cannot reproduce k4 numbers on k8)
	known slow machines k3, k9

This file is for tracking the performance status of k42.

******************* RUNNING EXPERIMENT USING script ***********

Example of running with script on k4:

k42console -R -B killsteal -m k4 -- K42_INITSCR=/home/regress-hw/sysinit

(this assumes you're invoking k42console from the powerpc/noDeb/os containing
the image you want to run, and that you know the machine is free :-)

output (1-way and 4-way numbers) to be pasted in is in kitchroot/tmp/status


******************* RUNNING EXPERIMENT MANUALLY  ***********
The experiment is:

Boot noDeb 1 and 4 way
at test prompt:

0
C0xfff

rlogin -l root to system (SDET depends on doing a setuid for each script)
on 1 way: /knfs/home/spec/bin/runSDET -c 0xf7f -s "1 1 1 1 1 1 1 1"
on 4 way: /knfs/home/spec/bin/runSDET -c 0xf7f -s "4 4 4 4 4 4 4 4"
on 24 way: /knfs/home/spec/bin/runSDET -c 0xf7f -s "24 24 24 24 24 24 24 24"

output to be pasted in is in kitchroot/output

***************************************************************



Note: If you hard reboot a machine, it will probably come up with a single
processor.  You need to use the console to configure 4 processors and
fast reboot.  Put your new results at the bottom of the file.

If you change the "best" flags story, update the above instructions when
you post the performance change that goes with the flag change.

If your changes slow the system down, please consider consulting with the
group before dropping them.

Please head your changes status with a one liner about what the change is.
***************************************************************************

Current floor system:

SDET_THROUGHPUT: For 2 script(s) throughput is 1682.2 scripts/hour


Use ref bits to improve page table eviction choice.

SDET_THROUGHPUT: For 2 script(s) throughput is 1718.4 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1722.5 scripts/hou

-------------

Added FCMPrimitiveKernelMultiRep and ensure cachesync and dirty is set on zero 
fill faults.

SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
Was stable at 1800.0 for 4 runs then degraded to 1786.6 on run 5
(recompiled rebooted and reran again with no functional change and found
 more variance but peek still aht 1800.0)
Played a bit more and got a peek of:
SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour

-------------

Fixed FCMPrimitiveKernelMultiRep, FCMCommonMultiRep* and DHashTable to allow
a specification of an initial number of pages for the HashTable to avoid
resizes during kernel startup. This eliminated the problems on using 
the FCMPrimitiveKernelMultiRep on k0. Have NOT seen previous peek of 1813.6
but change is too important not to commit.

Average seems to be about 1800.0

First Boot
SDET_THROUGHPUT: For 2 script(s) throughput is 1791.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
Second Boot
SDET_THROUGHPUT: For 2 script(s) throughput is 1791.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1791.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour

-------------
Changes in shared versus non-shared code. The code is still off
by default. The numbers look like hte ones Jonathan has reported
above, with avarage of 1802  (Dilma, May 12 7:51pm)

-------------
Improvements in FileLinuxFile.C (moving towards getting the code
for small file opitmization in)
 SDET_THROUGHPUT: For 2 script(s) throughput is 1545.1 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
(Dilma, May 13, 10:15am)
--------------
Improve non blocking hash growth logic, release lock more quickly, and add
interface to request a larger process set in servers.  add call to
ramfs to request a larger process set.

SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour

Changes in the linux.k42 (decreased lock contention on a linux
lock on 12way, 24-way).

 SDET_THROUGHPUT: For 2 script(s) throughput is 1782.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1795.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour

(On k1 the average os 1714)

=============================================
No relevant change in terms of functionality, but here are the
numbers anyway:
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour

=============================================
Changed ramfs token-polling interval to 100 ms.
Changed 5ms. delay to a thread-yield when waiting for an MP msg buf.
(Bryan, 5/14 08:45)

 SDET_THROUGHPUT: For 2 script(s) throughput is 1791.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1718.4 scripts/hour

============================================
Mark established pages as cached synced and dirty

SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour

============================================
Slightly improved loop that clears referenced bits.
(Bryan, 5/14, 13:45)

 SDET_THROUGHPUT: For 2 script(s) throughput is 1791.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1804.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour

============================================
Dilma (5/14 2:15pm) changed linux.k42 so that allocation of temporary
struct file data structures in the linux emulation layer bypass the slab
allocator (they use __ramfs_alloc and __ramfs_free)

 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1827.4 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1822.8 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1818.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1822.8 scripts/hour

============================================
Dilma (5/14 9:16pm) change in ramfs code. Throughput from
k2 is 1818

============================================
Bryan (5/15 8:00am) No changes.  I just want it on the record that I'm
unable to get better than 1813 scripts/hour on a clean floor system
on k4.

 SDET_THROUGHPUT: For 2 script(s) throughput is 1800.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1813.6 scripts/hour

============================================
Bob (5/15 3:30pm) mainly changes for hot-swapping should all be 
ifdefed out.  The one that might affect SDET performance is placing
a printf in TransEntry under the Kernel Info Run Silent flag.

 SDET_THROUGHPUT: For 2 script(s) throughput is 1809.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1818.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1832.1 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1822.8 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1827.4 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1822.8 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1827.4 scripts/hour

============================================
Marc (5/15 5:45) eliminate unneeded tlbie calls

 SDET_THROUGHPUT: For 2 script(s) throughput is 1832.1 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1836.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1855.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1846.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1841.4 scripts/hour

============================================
Jonathan (5/15 18:10) ugly hackery to remove xhandles from resMgr
                      External interface is completely static.
           
 SDET_THROUGHPUT: For 2 script(s) throughput is 1846.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1855.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1860.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1850.9 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1855.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1860.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1860.5 scripts/hour

============================================
Orran (5/16 00:16) Paging infrastructure committed, only has impact if
                   down to 2000 pages free, tested on k8
 SDET_THROUGHPUT: For 2 script(s) throughput is 1850.9 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1855.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1865.3 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1850.9 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1860.5 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1855.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1870.1 scripts/hour

============================================
Marc (5/16) Better stats in Interted Page Table
Numbers not as good - ran on k4.  I'll verify and back out if its
really worse - dropping now so it gets into Bryan's morning run.
(It can't be worse - but ...)

 SDET_THROUGHPUT: For 2 script(s) throughput is 1827.4 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1846.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1846.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1836.7 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1846.2 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 1836.7 scripts/hour

============================================
Bryan (5/16) Current baseline numbers on k4.  Clean floor system.  Booted
3 times.  Ran SDET 8 times on each boot:

boot 1:  1850.9 1841.4 1846.2 1841.4 1850.9 1836.7 1841.4 1836.7
boot 2:  1841.4 1850.9 1850.9 1846.2 1846.2 1846.2 1855.7 1841.4
boot 3:  1800.0 1832.1 1841.4 1832.1 1832.1 1836.7 1846.2 1836.7

============================================
Bryan (5/16) Moved ramfsServer into the server resource domain.

boot 1:  1832.1 1841.4 1836.7 1836.7 1832.1 1832.1 1836.7 1832.1
boot 2:  1836.7 1832.1 1832.1 1827.4 1832.1 1832.1 1832.1 1832.1
boot 3:  1822.8 1822.8 1832.1 1822.8 1827.4 1827.4 1832.1 1827.4

============================================
Bryan (5/16) Added lock-contention tracing for spin-locks.

boot 1:  1827.4 1846.2 1841.4 1841.4 1846.2 1841.4 1846.2 1841.4
boot 2:  1822.8 1827.4 1832.1 1822.8 1827.4 1822.8 1827.4 1827.4
boot 3:  1822.8 1818.2 1827.4 1818.2 1818.2 1809.0 1818.2 1818.2

============================================
Marc (5/16) Improve eviction logic - at least on paper

boot 1: 1827.4 1836.7 1841.4 1832.1 1841.4
boot 2: 1850.9 1850.9 1850.9 1846.2 1850.9

============================================
Bryan (5/16) Picked up Jimi's noDeb nroff, but not Marc's latest change.

boot 1:  1956.5 1961.9 1972.6 1961.9 1961.9 1961.9 1972.6 1961.9
boot 2:  1961.9 1967.2 1978.0 1972.6 1978.0 1967.2 1961.9 1961.9
boot 3:  1961.9 1967.2 1967.2 1956.5 1961.9 1956.5 1956.5 1951.2

==============================================
Dilma (5/16, 3pm)  
Reduced locking in linux code
boot just once, I saw this 5 times in a row (k4)
SDET_THROUGHPUT: For 2 script(s) throughput is 1994.5 scripts/hour

============================================
Bryan (5/16) Set FairBLockSpinCount in ramfsServer to 10000.
		Measurements are on k8.

boot 1:  1956.5 1967.2 1967.2 1956.5 1961.9 1961.9 1961.9 1961.9
boot 2:  1967.2 1961.9 1972.6 1967.2 1972.6 1967.2 1967.2 1967.2
boot 3:  1956.5 1978.0 1972.6 1972.6 1983.5 1972.6 1978.0 1961.9

============================================
Marc (5/16) Avoid many cache sync operations by adding first swag at
            map for execute logic.

boot 1:  2016.8 2022.5 2028.2 2028.2 2033.9
boot 2:  2016.8 2016.8 2028.2 2022.5 2022.5 2033.9 2039.7 2039.7
boot 3:  2022.5 2033.9 2028.2 2022.5 2033.9 2028.2 2039.7 2028.2

============================================
Bryan (5/17) Made kernel cleanup daemon run on a 100ms. interval by default.
	     Necessary for sustained operation on k0, and for honest
	     reporting of results (even 2-way).
	     May have slowed 2-way performance slightly.  It's hard to say.
	     Measurements are on k4.

boot 1:  2028.2 2028.2 2033.9 2005.6 2033.9 2028.2 2028.2 2022.5
boot 2:  2022.5 2022.5 2028.2 2011.2 2011.2 2022.5 2022.5 2016.8
boot 3:  2028.2 2022.5 2028.2 2022.5 2022.5 2022.5 2022.5 2022.5

============================================
Marc (5/17) Redo numbers, change runSDET to do a single make for the list
            (Numbers above had file name in FR debug code turned on!)

boot 1: 2022.5 2028.2 2045.5 2028.2 2039.7 2028.2 2028.2 2022.5

============================================
Bryan (5/17) Changed runSDET to disable thinwire polling during experiment.
	     Measurements are on k4.

boot 1:  2039.7 2039.7 2039.7 2039.7 2045.5 2039.7 2051.3
boot 2:  2039.7 2039.7 2039.7 2033.9 2039.7 2045.5 2045.5
boot 3:  2051.3 2039.7 2051.3 2051.3 2057.1 2045.5 2051.3

============================================
Bob (5/17) most of the infrsatructure needed to gather additional lock
           contention results - more options to trace menu
	     Measurements are on k4.
boot1	   
 SDET_THROUGHPUT: For 2 script(s) throughput is 2057.1 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2063.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2063.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2057.1 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2051.3 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour

boot2
 SDET_THROUGHPUT: For 2 script(s) throughput is 2063.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2063.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2063.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2051.3 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 2069.0 scripts/hour

============================================
Bob (5/18) put in rest of lock infrastructure for detecting handoff time
           and if we ever delay for 1msec in lock timing window

 2080.9 2080.9 2080.9 2080.9 2080.9 2080.9 2069.0 2074.9
 2057.1 2063.0 2063.0 2063.0 2063.0 2057.1 2069.0 2057.1
 2063.0 2074.9 2057.1 2063.0 2069.0 2074.9 2074.9 2080.9

============================================
Marc (5/18) convert XObject free list accesses in XHandleTrans to non-blocking

 2063.0 2063.0 2074.9 2051.3 2074.9 2063.0 2069.0
 2057.1 2063.0 2069.0 2057.1 2069.0 2063.0 2063.0
 2057.1 2057.1 2057.1 2051.3 2057.1 2057.1 2057.1

============================================
Marc (5/20) convert XObject free list accesses in XHandleTrans to non-blocking
            with fewer bugs/stupidities

 2039.7 2039.7 2051.3 2051.3 2051.3 2045.5 2045.5 
 2045.5 2051.3 2063.0 2051.3 2057.1 2057.1 2063.0
 2045.5 2057.1 2063.0 2063.0 2074.9 2063.0 2063.0

============================================
Bryan (5/20) Allocate per-vp structures in SegmentHATPrivate only as needed.

 2074.9 2069.0 2074.9 2069.0 2080.9 2074.9 2087.0 2074.9
 2080.9 2057.1 2074.9 2057.1 2074.9 2057.1 2080.9 2074.9
 2074.9 2069.0 2080.9 2080.9 2099.1 2087.0 2099.1 2087.0

============================================
Bryan (5/20) Disabled MICHALKLUDGE in PageAllocatorKernPinned.H.

 2074.9 2099.1 2111.4 2093.0 2111.4 2105.3 2111.4 2105.3
 2080.9 2057.1 2074.9 2057.1 2074.9 2057.1 2080.9 2074.9
 2093.0 2105.3 2117.6 2099.1 2111.4 2111.4 2111.4 2105.3

============================================
Bryan (5/20) Set lock spin counts to 10000 in the kernel, baseServers, & ramfs.

 2099.1 2093.0 2105.3 2087.0 2111.4 2105.3 2105.3 2105.3
 2099.1 2099.1 2105.3 2093.0 2105.3 2099.1 2099.1 2093.0
 2105.3 2099.1 2111.4 2105.3 2130.2 2123.9 2123.9 2117.6

============================================
Bob (5/20) Added capability to compile out tracing should have no perf effect

 2105.3 2105.3 2111.4 2105.3 2111.4 2111.4 2099.1 2105.3
 2123.9 2117.6 2123.9 2111.4 2123.9 2123.9 2123.9 2130.2
 2123.9 2111.4 2123.9 2117.6 2123.9 2117.6 2123.9 2111.4

============================================
Bob (5/28) Cleanup - added tracing dbg, kernelInfo dbg - no perf effect

 2136.5 2123.9 2130.2 2117.6 2130.2 2111.4 2117.6 2111.4
 2130.2 2111.4 2117.6 2117.6 2136.5 2123.9 2123.9 1223.9

============================================
Marc/Jonathan (5/28) New clustered object translation table management.
                     We accept the performance degradation, at least
                     for now.

 2057.1  2063.0  2074.9  2057.1  2063.0  2057.1  2057.1
 2074.9  2063.0  2074.9  2069.0  2080.9  2069.0  2074.9  2069.0

============================================
Orran (5/30) Clean up of paging infrastructure
 2063.0  2063.0  2063.0  2069.0  2069.0  2051.3  2063.0  
 2069.0  2057.1  2063.0  2069.0  2057.1  1972.6  2051.3 2000.0 

============================================
Bob (6/3) added traceXxxEnable function and other cleanup - no perf effect
 2074.9 2069.0 2093.0 2069.0 2080.9 2074.9 2087.0 2069.0
 2069.0 2039.7 2057.1 2063.0 2063.0 2057.1 2057.1 2045.5

============================================
Dilma (6/3) use of reader-writer locks for DirLinuxFS objects
2051.3 2045.5 2063.0 2045.5 2063.0 2051.3 2045.5 2057.1 2057.1
2051.4 2057.1 2051.3 2057.1 2063.0 2051.3 2063.0 2051.3

============================================
Dilma (6/4) (1) changes allowing derived classes from ServerFile
to have their own lock definition; for now we're using normal
(BLock) locks for everybody; 
(2) moved stuff in ServerFileBlockRamFS::handleXObj() to base class
ServerFileBlock, so that we don't have code repetition.
 2045.5 2057.1 2069.0 2039.7 2051.3 2045.5 2051.3 2051.3
 2057.1 2045.5 2063.0 2045.5 2045.5 2045.5 1951.2 2000.0 1935.5

k0 numbers:
SDET_THROUGHPUT: For 1 script(s) throughput is 1730.8 scripts/hour
 SDET_THROUGHPUT: For 2 script(s) throughput is 3412.3 scripts/hour
 SDET_THROUGHPUT: For 3 script(s) throughput is 5046.7 scripts/hour
 SDET_THROUGHPUT: For 4 script(s) throughput is 6605.5 scripts/hour
 SDET_THROUGHPUT: For 5 script(s) throughput is 8144.8 scripts/hour
 SDET_THROUGHPUT: For 6 script(s) throughput is 9686.1 scripts/hour
 SDET_THROUGHPUT: For 7 script(s) throughput is 11454.5 scripts/hour
 SDET_THROUGHPUT: For 8 script(s) throughput is 13150.7 scripts/hour
 SDET_THROUGHPUT: For 9 script(s) throughput is 14594.6 scripts/hour
 SDET_THROUGHPUT: For 10 script(s) throughput is 16216.2 scripts/hour
 SDET_THROUGHPUT: For 11 script(s) throughput is 17522.1 scripts/hour
 SDET_THROUGHPUT: For 12 script(s) throughput is 19547.5 scripts/hour
 SDET_THROUGHPUT: For 13 script(s) throughput is 20259.7 scripts/hour
 SDET_THROUGHPUT: For 14 script(s) throughput is 22600.9 scripts/hour
 SDET_THROUGHPUT: For 15 script(s) throughput is 23478.3 scripts/hour
 SDET_THROUGHPUT: For 16 script(s) throughput is 24615.4 scripts/hour
 SDET_THROUGHPUT: For 17 script(s) throughput is 26266.1 scripts/hour
 SDET_THROUGHPUT: For 18 script(s) throughput is 28296.9 scripts/hour
 SDET_THROUGHPUT: For 19 script(s) throughput is 29106.4 scripts/hour
 SDET_THROUGHPUT: For 20 script(s) throughput is 30252.1 scripts/hour
 SDET_THROUGHPUT: For 21 script(s) throughput is 31500.0 scripts/hour
 SDET_THROUGHPUT: For 22 script(s) throughput is 33000.0 scripts/hour
 SDET_THROUGHPUT: For 23 script(s) throughput is 34644.4 scripts/hour
 SDET_THROUGHPUT: For 24 script(s) throughput is 35850.6 scripts/hour
 SDET_THROUGHPUT: For 24 script(s) throughput is 35850.6 scripts/hour

============================================
Bryan (6/4) - Miscellaneous changes:
		Synchronize MPMsgMgr initialization explicitly.
		Eliminate KernelInfo::TRACE_LOCK_CONTENTION and instead guard
		    trace-related work with a test of the relevant trace bit.
		Yield once in fork() before delaying when waiting for active
		    threads to go away.

 2045.5 2051.3 2063.0 2045.5 2063.0 2051.3 2057.1 2051.3
 2045.5 2039.7 2057.1 2039.7 2063.0 2051.3 2057.1 2045.5
 2039.7 2051.3 2063.0 2045.5 2069.0 2045.5 2063.0 2057.1

============================================

Bryan (6/5) - Create CPU-intensive resource domains lazily.

 2087.0 2130.2 2136.5 2123.9 2136.5 2130.2 2130.2 2136.5
 2123.9 2123.9 2123.9 2123.9 2130.2 2123.9 2123.9 2123.9
 2130.2 2123.9 2136.5 2123.9 2142.9 2136.5 2130.2 2123.9

============================================

Dilma (6/5, 2:30pm) - ServerFile use BLock and DirLinuxFS (and its
derived classes) use RWBLock.
 2099.1 2105.3 2111.4 2111.4 2099.1 2093.0 2099.1 2093.0 2111.4
 2093.0 2123.9 2111.4 2117.6 2111.4 2111.4 2111.4 2117.6 2111.4

===========================================
Dilma (6/6) - cosmetic change: parameter in FileLinuxServer::_dup
declared as _inout should be _in only

 2111.4 2111.4 2117.6 2111.4 2111.4 2111.4 2111.4 2111.4 2087.0
 2111.4 2111.4 2111.4 2117.6 2105.3 2105.3 2105.3 2117.6 2117.6

============================================

Bryan (6/6) - Fix timing problems that have crept in.  Initialize trace mask
	      earlier and synchronize resource-manager initialization.
	      Results obtained on k8.

 2117.6 2142.9 2142.9 2130.2 2142.9 2130.2 2136.5 2136.5
 2123.9 2130.2 2136.5 2130.2 2130.2 2130.2 2130.2 2130.2
 2117.6 2123.9 2136.5 2123.9 2136.5 2130.2 2130.2 2123.9

============================================
Dilma (6/6)  Changed control flags so that if you specify C 0xfff, you
have both small file and non-shared files optimization on. (The
flags NON_SHARING_FILE_OPT and SMALL_FILE_OPT are off by default.)

 2149.3 2181.8 2181.8 2175.2 2181.8 2181.8 2175.2 2181.8 2188.4
 2181.8 2175.2 2181.8 2175.2 2168.7 2181.8 2155.7 2195.1 2188.4

============================================

Bryan (6/6) - Initialize the trace mask even earlier.  Should have no
	      impact on performance.
	      Results obtained on k8.

 2136.5 2175.2 2175.2 2175.2 2188.4 2175.2 2181.8 2136.5
 2142.9 2162.2 2175.2 2168.7 2188.4 2162.2 2168.7 2162.2
 2142.9 2155.7 2168.7 2168.7 2168.7 2162.2 2136.5 2162.2

============================================

Bryan (6/6) - Added trace events in Delay's.  No impact on performance.
	      Results obtained on k8.

 2142.9 2181.8 2149.3 2188.4 2188.4 2175.2 2188.4 2188.4
 2142.9 2175.2 2181.8 2181.8 2188.4 2175.2 2181.8 2181.8
 2142.9 2142.9 2188.4 2181.8 2188.4 2181.8 2195.1 2188.4

============================================

Michal (6/7) - New virtfs and some FR debugging stuff.
	       Changes should not have any performance impact, but they do.
	       A closer look shows that we are sensitive to innocuous 
	       changes that may affect code/data layout.  (k8)

 2087.0 2123.9 2136.5 2136.5 2123.9 2130.2

===================================================

Bob (6/9) - locking and tracing structure infrastructure no perf impact

 2149.3 2175.2 2175.2 2181.8 2188.4 2175.2 2181.8 2181.8
 2181.8 2201.8 2201.8 2201.8 2162.2 2195.1 2188.4 2188.4

============================================

Bob (6/9) - removal of mips - no perf impoact

 2181.8 2188.4 2175.2 2175.2 2188.4 2181.8 2181.8 2181.8
 2175.2 2175.2 2188.4 2181.8 2181.8 2175.2 2181.8 2181.8


============================================

Michal (6/10) - Disk support re-enabled.
		Overhauled devfs.
		fdisk (from util-linux) inclded.
		StreamServer locking overhaul (to handle socket deadlock).

 2136.5 2155.7 2149.3 2168.7 2162.2 2162.2 2155.7 2149.3

 (My numbers always tend to be a bit low, don't know why.)

============================================

Bryan (6/10) - Changed eviction algorithm in mapping-fault handler to match
	       InvertedPageTable's algorithm.
	       Results obtained on k2.

 2123.9 2149.3 2162.2 2162.2 2162.2 2155.7 2149.3 2142.9
 2136.5 2142.9 2142.9 2149.3 2155.7 2155.7 2155.7 2155.7
 2142.9 2155.7 2162.2 2162.2 2175.2 2168.7 2168.7 2162.2

============================================

Bryan (6/10) - Changed sense of the IO/CPU migration control bit.  Now
	       migration is on by default but off with our normal SDET args.
	       Results obtained on k2.

 2162.2 2168.7 2175.2 2162.2 2175.2 2168.7 2175.2 2162.2
 2155.7 2168.7 2181.8 2175.2 2181.8 2168.7 2181.8 2168.7
 2155.7 2168.7 2175.2 2175.2 2181.8 2175.2 2188.4 2175.2

============================================

Orran (6/11) - just a single tty object, no separate K42 stdin and stdout obj

 2149.3 2181.8 2181.8 2181.8 2181.8 2175.2 2181.8 2168.7 
 2168.7 2168.7 2175.2 2175.2 2175.2 2162.2 2188.4 2175.2 
 2168.7 2162.2 2175.2 2181.8 2175.2 2168.7 2175.2 2175.2

============================================

Bryan (6/12) - Changed lock spin counts to 1000000 in kernel, ramfs, and
	       baseServers.
	       Results obtained on k8.

 2149.3 2195.1 2195.1 2201.8 2195.1 2208.6 2201.8 2208.6
 2155.7 2181.8 2188.4 2168.7 2188.4 2195.1 2201.8 2188.4
 2162.2 2195.1 2201.8 2188.4 2201.8 2195.1 2195.1 2201.8

============================================

Dilma (6/13) Added support for intercepting NFS activity
during SDET.
 2168.7  2201.8 2208.6 2195.1 2208.6 2195.1 2195.1 2195.1 2201.8

============================================

Marc (6/13) Added shared segment support to both shared and multirep
FCM's, and changed runProcessCommon to map text into a segment sized
region.

 2250.0 2257.1 2264.2 2264.2 2271.3 2257.1 2278.5 2264.2
 2250.0 2236.0 2257.1 2250.0 2264.2 2250.0 2250.0 2257.1
 2257.1 2271.3 2278.5 2271.3 2285.7 2278.5 2271.3 2264.2

============================================

Marc (6/14) Fix bug - was unmapping text in fork because fork child
had wrong length for text region - not rounded up to segment size.

 2352.9  2384.1  2384.1  2384.1  2392.0  2384.1  2392.0  2392.0 
 2360.7  2360.7  2376.2  2368.4  2376.2  2368.4  2368.4  2368.4 
 2360.7  2376.2  2384.1  2368.4  2392.0  2376.2  2376.2  2368.4 

============================================

Marc (6/17) Fix bugs - get tlbie right (how did it ever work?)
Fix shared seg code for MP runs.  Turn MICHALKLUDGE back on bug fix it.
Performance was same as above until turned MICAHKLUDGE on - I don't believe
degradation is cause by that but who knows? (numbers from k4)  Note one
"good" run!

 2345.3 2360.7 2360.7 2360.7 2368.4 2360.7 2360.7 2345.3
 2345.3 2360.7 2360.7 2360.7 2384.1 2360.7 2360.7 2376.2

============================================

Bryan (6/18) - Restructured activate/deactivate.  Should be no performance
	       impact.
	       Results obtained on k4.

 2307.7 2368.4 2360.7 2352.9 2368.4 2345.3 2360.7 2360.7
 2307.7 2345.3 2368.4 2337.7 2352.9 2352.9 2352.9 2345.3
 2315.1 2360.7 2360.7 2360.7 2352.9 2352.9 2360.7 2360.7

============================================

Marc (6/18) - Remove Frame Array

 2322.6 2352.9 2360.7 2352.9 2376.2 2368.4 2360.7 2360.7
 2337.7 2360.7 2376.2 2360.7 2384.1 2376.2 2384.1 2368.4

============================================

Bryan (6/19) - Mechanism for pro-active generation-rolling.  Not used yet.
	       Results obtained on k8.

 2337.7 2345.3 2368.4 2360.7 2352.9 2352.9 2352.9 2368.4
 2322.6 2360.7 2376.2 2352.9 2352.9 2345.3 2337.7 2352.9
 2330.1 2368.4 2368.4 2352.9 2360.7 2360.7 2368.4 2360.7

============================================
Dilma (6/19) - Added k42 ramfs server. Not used yet, so it
has no impact on performance. Numbers from k4.

 2345.3 2384.1 2384.1 2376.2 2376.2 2376.2 2376.2
 2368.4 2392.0 2368.4 2360.7 2376.2 2384.1

============================================
Orran (6/21) - Couple of bug fixes, and ifdefed out lazy stuff still
not working, some additional work for lazy path is being done...
 2345.3 2352.9 2352.9 2330.1 2345.3 2352.9 2360.7
 2345.3 2337.7 2330.1 2352.9 2360.7 2345.3 2337.7 2337.7

============================================
Dilma (6/24) - Numbers from Friday 6/21 with k42 ramfs
as the default file system server in runSDET. Numbers were
collected on k4.

 2408.0 2449.0 2432.4 2440.7 2449.0 2449.0 2449.0
 2457.3 2449.0 2449.0 2457.3 2449.0 2449.0

==============================================
Marc (7/4) - Perfect except for evictions unmap info - and don't unmap
whole segs by abandoning vsid - really unmap them.  On k4

2440.7 2457.3 2465.8 2465.8 2465.8 2474.2 2474.2 2465.8
2449.0 2457.3 2474.2 2465.8 2465.8 2465.8 2482.8 2474.2 

============================================

Bryan (7/8) - Use PPC instead of MPMsgs for communication between dispatchers
	      on the same VP.  Should have no impact on SDET performance.
	      Results obtained on k8.

 2432.4 2465.8 2474.2 2474.2 2482.8 2474.2 2491.3 2482.8
 2440.7 2465.8 2465.8 2465.8 2465.8 2474.2 2465.8 2474.2
 2440.7 2474.2 2474.2 2482.8 2491.3 2482.8 2500.0 2491.3

===========================================

Dilma (7/9) - Finished lazy i/o reinitialization on fork, but
              it is not turned on by default yet (I want to test
	      it on k0 before turning it on), so this commit should
	      have no impact on SDET performance.
	      Results from k4.
 2457.3 2474.2 2457.3 2474.2 2474.2 2465.8 2465.8 2465.8
 2474.2 2474.2 2474.2 2474.2 2465.8 2424.2 2449.0 2465.8
 2457.3 2465.8 2465.8 2465.8 2474.2 2482.8 2465.8 2465.8
 2482.8 2474.2

===========================================

Michal (7/9) - Restructured sysctl (more modular, easier to expand).
	       Swap-to-disk support.
	       Page-fault path timing measurement facility (disabled).
	       

 2449.0 2449.0 2449.0 2449.0 2457.3 2449.0 2449.0 2449.0

===========================================

Michal (7/17) - Async disk support for pager.
	       	(Yes, I really did get identical results as last time.)

 2449.0 2449.0 2449.0 2449.0 2457.3 2449.0 2449.0 2449.0

===========================================

Michal (7/26) - Fixup of I/O blocking/EOF/error code semantics

 2432.4 2424.2 2432.4 2432.4 2424.2 2432.4 2424.2 2432.4



============================================

Dilma (7/31) - lazy i/o reinitialization is on by default (it's
on since yesterday). Numbers from k4

 2500.0 2508.7 2508.7 2517.5 2500.0 2517.5 2517.5 2508.7 2508.7
 2500.0 2508.7 2508.7 2508.7 2508.7 2517.5 2508.7 2517.5 2517.5
(these are two consecutive executions of runSDET)
============================================

Dilma (8/1) - cosmetic changes.

 2500.0 2508.7 2508.7 2491.3 2491.3 2508.7 2517.5 2508.7 2517.5
 2526.3 2526.3 2526.3 2535.2 2535.2 2526.3 2535.2 2526.3 2526.3
 2526.3 2535.2 2535.2 2526.3
(numbers from a single runSDET command)

============================================

Dilma (8/2) - returning error on setFilePositon when operation
results in offset < 0

 2500.0 2535.2 2535.2 2526.3 2526.3 2526.3 2535.2 2535.2 2544.2
 2544.2 2544.2 2535.2 2535.2 2535.2 2544.2 2535.2 2544.2 2553.2
 2544.2 2544.2 2553.2 2544.2

============================================

Dilma (8/5) - dealing with protected/public issues in FileLinux.C
              Certainly not to have any impact on performance
	      (these numbers include also changes on StreamServerPty
              done this morning (by Michal, I guess)).

 2482.8 2508.7 2508.7 2526.3 2517.5 2517.5 2526.3 2517.5
 2535.2 2535.2 2526.3 2535.2 2517.5 2526.3 2535.2 2535.2
 2535.2 2535.2 2535.2 2535.2 2526.3 2544.2

============================================

Jonathan (8/8) - Added code to delete the old object after a swap.  
              A disposition parameter is used to control the behaviour.
              The actual destruction is if defed out until Dilma can test.
K8 Numbers
2482.8 2517.5 2508.7 2526.3 2526.3 2517.5 2526.3 2526.3
2526.3 2526.3 2526.3 2526.3 2535.2 2526.3

============================================

Bryan (8/19) - New baseline numbers.  Here are the results of six consecutive
	       boot sessions on k8 and six on k4:

k8:
 2482.8 2517.5 2517.5 2517.5 2508.7 2517.5 2526.3 2526.3
 2491.3 2500.0 2508.7 2500.0 2500.0 2517.5 2526.3 2517.5
 2482.8 2500.0 2500.0 2508.7 2500.0 2508.7 2508.7 2508.7
 2491.3 2491.3 2500.0 2500.0 2500.0 2508.7 2508.7 2508.7
 2482.8 2526.3 2535.2 2526.3 2508.7 2535.2 2535.2 2535.2
 2491.3 2508.7 2508.7 2526.3 2517.5 2517.5 2526.3 2517.5
k4:
 2474.2 2508.7 2508.7 2508.7 2508.7 2508.7 2500.0 2508.7
 2491.3 2517.5 2508.7 2517.5 2517.5 2526.3 2526.3 2508.7
 2482.8 2500.0 2500.0 2491.3 2508.7 2517.5 2508.7 2508.7
 2491.3 2508.7 2508.7 2508.7 2517.5 2508.7 2517.5 2508.7
 2482.8 2517.5 2517.5 2508.7 2517.5 2526.3 2535.2 2517.5
 2491.3 2508.7 2517.5 2500.0 2517.5 2508.7 2517.5 2508.7

============================================

Marc (8/23) - remove small sillyness in fork logic which CANNOT make
              things slower - number from k8

 2474.2  2500.0  2526.3  2517.5  2526.3  2535.2  2517.5  2517.5 
 2474.2  2500.0  2508.7  2500.0  2491.3  2500.0  2500.0  2500.0 
 2482.8  2474.2  2508.7  2508.7  2517.5  2517.5  2500.0  2508.7 

Orran (9/10) - got console out of picture
 2508.7  2508.7  2508.7  2517.5  2517.5  2517.5  2508.7  2508.7
 2508.7  2517.5  2508.7  2508.7  2526.3  2517.5  2508.7  2517.5


===========================================

End of XCOFF toolchain.

===========================================

Dilma (9/30) - after being able to run SDET again: (from k3)
 3185.8 3257.9 3257.9 3272.7 3287.7 3272.7 3185.8 3257.9
 3287.7 3228.7 3228.7 3302.8 3302.8 3302.8 3243.2 3302.8
 3287.7 3272.7

============================================

Bryan (10/8) - Clone and signal restructuring.
	       Results obtained on k8.

 3348.8 3428.6 3428.6 3412.3 3428.6 3318.0 3364.5 3428.6
 3302.8 3364.5 3380.3 3364.5 3380.3 3287.7 3364.5 3380.3
 3364.5 3412.3 3380.3 3380.3 3428.6 3412.3 3396.2 3412.3

============================================

Bryan (10/9) - Switch to using glibc <signal.h> from <linux/signal.h>.
	       Should be little or no performance impact.
	       Results obtained on k8.

 3287.7 3396.2 3412.3 3396.2 3461.5 3412.3 3428.6 3428.6
 3318.0 3380.3 3380.3 3396.2 3396.2 3380.3 3396.2 3396.2
 3333.3 3396.2 3396.2 3333.3 3428.6 3428.6 3412.3 3380.3

============================================

Bryan (10/30) - Sanity check.  No one has made measurements for awhile.
	        Results obtained on k4.

 3333.3 3272.7 3380.3 3396.2 3412.3 3364.5 3364.5 3272.7
 3333.3 3380.3 3396.2 3364.5 3380.3 3348.8 3412.3 3364.5
 3333.3 3380.3 3396.2 3348.8 3287.7 3380.3 3364.5 3396.2
 3287.7 3333.3 3333.3 3396.2 3396.2 3396.2 3380.3 3380.3
 3333.3 3380.3 3318.0 3396.2 3302.8 3380.3 3348.8 3396.2

============================================

Bryan (10/30) - Restructured thread migration.
	        Results obtained on k4.

 3287.7 3348.8 3412.3 3428.6 3380.3 3412.3 3412.3 3396.2
 3364.5 3364.5 3428.6 3396.2 3412.3 3478.3 3302.8 3380.3
 3318.0 3318.0 3364.5 3364.5 3257.9 3461.5 3412.3 3428.6
 3302.8 3380.3 3445.0 3428.6 3333.3 3380.3 3364.5 3428.6
 3272.7 3333.3 3412.3 3396.2 3412.3 3428.6 3396.2 3428.6
 3257.9 3412.3 3302.8 3333.3 3478.3 3380.3 3364.5 3333.3

============================================

Marc (11/1) - changed treatment of shared sements and cache sync
		Results on k8

 3287.7  3012.6  3318.0  3364.5  3302.8  3348.8  3348.8
 3171.8  3348.8  3348.8  3302.8  3333.3  3333.3  3318.0
 3333.3  3318.0  3333.3  3318.0  3348.8  3302.8  3318.0
 3185.8  3287.7  3318.0  3200.0  3228.7  3396.2  3380.3
 3287.7  3333.3  3333.3  3364.5  3348.8  3348.8  3333.3
 3272.7  3348.8  3333.3  3348.8  3257.9  3318.0  3214.3

============================================

Marc (11/4) - replace copy on write kludge with copy on write support
                 Results on k8

 3257.9  3272.7  3272.7  3287.7  3257.9  3302.8  3318.0  3257.9 
 3287.7  3302.8  3302.8  3333.3  3157.9  3318.0  3287.7  3396.2 
 3272.7  3243.2  3116.9  3272.7  3318.0  3318.0  3318.0  3214.3 
 3228.7  3318.0  3000.0  3302.8  3302.8  3272.7  3272.7  3287.7 
 3157.9  3200.0  3396.2  3396.2  3287.7  3171.8  3287.7  3257.9 
 3243.2  3287.7  3318.0  3302.8  3130.4  3243.2  3272.7  3287.7 
With no multi-rep fcms
 2868.5  3144.1  3116.9  3025.2  3050.8  3103.4  3130.4  3103.4 


============================================

Michal (11/24) - dynamic linking increases overall workload, results go down
		Results on k8

 2236.0 2285.7 2293.0 2278.5 2236.0 2264.2 2236.0 2243.0 2222.2 2222.2
 2264.2 2257.1 2257.1 2293.0 2243.0 2300.3 2271.3 2271.3 2271.3 2293.0
 2285.7 2285.7 1967.2 2057.1 2149.3 2208.6 2074.9 2149.3 2278.5 2278.5
 2271.3 2271.3 2222.2 2264.2 2271.3 2271.3 2264.2 2250.0 2264.2 2257.1

============================================

Michal (11/24) - new exec procedure (fast exec doesn't creat new process)
		Results on k8

 2457.3 2424.2 2376.2 2440.7 2457.3 2416.1 2278.5 2432.4 2376.2 2352.9 
 2337.7 2105.3 2074.9 2271.3 2264.2 2337.7 2352.9 2307.7 2337.7 2360.7 
 2368.4 2368.4 2360.7 2408.0 2376.2 2352.9 2440.7 2330.1 2352.9 2408.0
 2345.3 2322.6 2352.9 2440.7 2236.0 2074.9 2117.6 2175.2 2400.0 2408.0

Note:  1-way numbers are approximately 1400, so we're losing 350 scripts/hour
by going 2-way.

============================================
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Change the way we count - numbers look better.  Elapsed time is now
from when the driver signals the workers to start until the driver 
detects that the last worker is finished.  Also, machines have been
upgraded - so all comparison bets are off.

K8 4 way

5223.5 5859.6 5859.2 5819.4 5869.4 5822.6 5837.4 5830.2  
5796.2 5822.7 5810.5 5765.2 5799.4 5818.3 5824.2 5821.7

K8 1 way
1408.3 1587.8 1588.0 1591.3 1584.9 1581.9 1593.9 

============================================

Bryan (2/7/03) - New baseline numbers, obtained with the knightly/noDeb
		 build of 2/6/03.  It seems that k4 is faster than k8.

K4 - 4-way
6217.8 6307.2 6302.2 6315.0 6314.2 6320.0 6296.8 6325.7
6253.6 6374.3 6346.5 6365.7 6356.5 6367.2 6360.3 6322.4
6192.2 6359.6 6347.7 6355.9 6360.5 6353.1 6308.6 6344.2

K4 - 1-way
1705.8 1705.6 1698.6 1703.2 1705.9 1691.5 1696.2 1706.0

K8 - 4-way
5829.2 5929.3 5925.0 5941.6 5902.4 5905.4 5860.7 5887.6
5870.0 5950.7 5945.5 5914.0 5933.9 5917.9 5908.8 5923.7
5882.4 5976.5 5955.5 5908.5 5948.9 5945.7 5899.9 5915.0

K8 - 1-way
1619.9 1609.1 1602.5 1611.6 1605.7 1604.2 1604.1 1590.3

============================================

Bryan (2/7/03) - Moved ProcessLinuxServer from kernel to baseServers.

K4 - 4-way
6230.9 6356.4 6347.6 6335.5 6304.6 6339.7 6316.4 6322.2
6218.8 6405.9 6365.5 6326.3 6343.5 6363.8 6344.9 6361.4
6239.7 6342.9 6357.0 6370.9 6326.7 6326.3 6310.2 6305.2

K4 - 1-way
1726.7 1717.5 1710.0 1705.5 1693.5 1704.1 1711.4 1712.5

K8 - 4-way
5791.9 5939.6 5946.8 5938.1 5903.2 5901.8 5944.4 5913.5
5813.4 5874.7 5866.4 5917.5 5904.2 5924.9 5884.9 5867.2
5859.1 5915.3 5912.1 5926.0 5907.8 5926.9 5858.6 5895.0

K8 - 1-way
1611.5 1625.7 1628.3 1617.1 1606.9 1609.5 1610.7 1610.3

=============================================

Dilma (2/13/03) - Changes on the file system independent layer related
to how the StringTable for the children list is manipulated. The
restriction of a maximum number of space to be used by the list of
cached entries of a directory has been eliminated.

k10 - 1 way
1630.6 1630.6 1636.1 1610.3 1616.5 1610.7 1629.9 1623.0 1623.7 1620.8
1623.8 1621.6 1622.3 1616.2 1622.8 1614.4 1609.0 1595.4 1598.4 1607.7
1601.5 1607.8 1602.8 1606.2 1601.4 1607.4 1616.4 1600.2

k10 - 4 way

5859.2 5942.7 5950.0 5945.7 5968.2 5941.7 5920.0 5921.6 5879.9
5919.6 5936.4 5921.2 5925.5 5922.2 5909.9 5899.4 5884.5 5920.7
5893.6 5913.0 5893.4 5917.4 5894.5 5903.7 5925.5 5947.2 5941.8
5901.2 5913.9 5900.1 5917.4 5913.2

k4 - 1-way
1724.4 1711.4 1723.2 1718.2 1722.0 1727.7 1723.9 1725.2 1710.5 1707.8
1720.4 1706.5 1718.8 1703.8 1716.3 1709.6 1707.9 1708.9 1709.1 1708.4
1702.2 1698.9 1712.2 1711.3 1709.3 1708.6 1714.8 1685.5 1706.0 1698.1
1706.3 1710.4

k4 - 4-way
6243.7 6383.1 6375.8 6372.0 6401.1 6369.4 6351.6 6334.1 6366.4 6339.1
6369.9 6368.1 6362.0 6340.8 6345.5 6360.5 6372.2 6367.5 6358.4 6372.8
6390.1 6372.6 6388.7 6391.9 6380.3 6377.5 6406.0 6364.7 6348.9 6370.0
6352.7 6344.2

============================================

Bryan (2/14/03) - Initial cut at collecting DispatchQueue stats.  Performance
                  should have degraded slightly because of the overhead of
		  keeping statistics, but it seems to have improved slightly
		  instead.  Can't explain it.

K4 - 4-way
6234.0 6397.5 6397.7 6400.1 6349.5 6420.4 6405.9 6416.8
6273.2 6388.1 6429.4 6406.5 6422.3 6444.9 6389.6 6413.5
6287.5 6423.2 6413.6 6459.2 6407.1 6433.8 6443.9 6417.4

K4 - 1-way
1727.9 1742.0 1718.5 1725.9 1727.5 1722.9 1720.8 1725.9

=============================================

Michal (03/06)  Added gcc to SDET

K4 - 4-way

3845.7 3827.9 3835.0 3806.6 3817.9 3822.4

K0

CPUS Scripts/hour
01  1530.18
02  2988.03
03  4430.56
04  5827.46
05  7246.17
06  8637.53
07 10025.15
08 11339.50
09 12695.28
10 14060.35
11 15347.41
12 16730.81
13 18026.21
14 19220.47
15 20603.59
16 21808.37
17 23166.35
18 24411.51
19 25696.31
20 26762.27
21 27976.54
22 29019.81
23 30416.11
24 31538.68

=============================================

Dilma (03/06)  Re-structuring of file system independent layer to be able
               to use different implementatios for the cached list of
	       directory entries. No performance impact expected.

K4 - 4-way
3804.4 3843.1 3865.6 3841.9 3847.1 3830.6 3840.8 3836.2
3861.7 3841.2 3856.0 3833.9 3854.0 3838.8 3838.6 3841.6 3834.8

=============================================

Dilma (03/07)  Using DentryListHash instead of DentryListLinear to
               keep list of cached directory entries in DirLinuxFS.

k4 - 1-way
1005.3 1002.6 1002.5 1000.8 998.9 1001.4 1001.8 997.2 1001.8 1001.8
996.8  1002.5 1004.8 1003.0 1001.1 1001.1 996.8 

K4 - 4-way
3822.6 3848.0 3846.5 3840.6 3832.0 3815.3 3829.3 3801.0 3839.0
3822.9 3813.8 3808.6 3843.1 3805.6 3812.8 3817.4 3807.0 

===============================================

Marc (03/011) more aggressive unmapping, and don't force small regions
              onto segment boundaries

3575.5 3882.1 3875.9 3895.6 3888.8 3891.7 3896.1
3881.2 3860.0 3861.5 3860.4 3858.9 3859.5 3858.8

===============================================

Jonathan (03/11) Changed PMRoot to use hash tables to record fcms that
                 are attached to it.  Hash tables live in the reps and
                 fcms are distributed to reps based on what vp 
                 allocated the fcm (coids are allocated on a per vp basis)  

3846.3 3883.1 3874.8 3886.9 3886.3 3885.9 3890.7 
3849.9 3882.0 3886.5 3884.5 3890.0 3882.3 3888.9

===============================================

Bryan (03/12) Increased the size of the xhandle table by a factor of 32.
	      Increased the initial workspace size and the kernel per-numa-node
	      address space size accordingly, and moved the load address of
	      exec.so.

3810.0 3875.6 3866.0 3868.9 3857.4 3850.9 3864.1 3845.7
3831.4 3884.2 3858.7 3860.3 3859.7 3871.9 3878.7 3857.1
3823.8 3864.5 3884.1 3896.3 3879.8 3881.8 3878.6 3882.9

===============================================

Dilma (03/16) After cleaning up many memory leaks.

1-way on k4: IMPORTANT: THE small file optimization is OFF.
1017.2 1015.4 1012.1 1014.0 1010.6 1010.5 1011.9 1012.5 1011.6
1011.2 1007.4 1008.4 1009.6 1010.1 1006.6 1009.2 1007.2 1014.6
1013.3

4-way on k4: IMPORTANT: THE small file optimization is OFF.
3804.8 3862.2 3872.1 3863.3 3861.4 3835.6 3843.5 3858.4 3869.5 3866.5
3856.9 3860.0 3876.8 3865.3 3871.2 3867.0 3840.5 3864.1 3864.1 3874.3
3843.9 3875.3 3860.0 3872.3 3869.2 3845.3 3865.9 3864.7 3870.0

===============================================

Dilma (03/16) After fixing bug in small file support.
	      We're back to the usual way of running SDET.

1-way on k4:
1047.3 1049.0 1042.8 1044.4 1042.6 1040.8 1042.4 1041.4
1044.8 1043.9 1045.9 1040.1 1046.0 1042.8 1037.4 1038.3
1042.9 1043.7 1040.2

4-way on k4:
3911.9 3947.2 3951.5 3968.7 3970.3 3973.6 3978.9 3979.1
3969.8 3983.0 3994.5 3976.4 3985.4 3968.4 3976.6 3974.9
3971.9 3970.2

===============================================

Dilma (03/16) Numbers after Bryan's changes to increase pagetable
	      size

1-way on k4:
1034.9 1029.8 1027.5 1027.2 1028.6 1030.8 1025.5 1023.4
1022.3 1026.4 1024.8 1024.7 1023.3 1018.9 1021.0 1019.2
1026.4 1024.5 1024.7 1021.2 1024.4

4-way on k4:
3830.2 3878.7 3890.1 3871.9 3899.2 3896.4 3908.6 3905.3
3900.8 3892.3 3889.0 3918.8 3909.8 3894.0 3895.0 3922.3
3886.6 3881.0 3898.7 3880.2 3885.2 3886.0 3886.8 3862.4
3897.3 3876.8 3889.0 3892.0 3886.7 3890.4 3874.3 3887.2

===============================================

Dilma (03/16) After cleaning up FileLinuxFile.C (eliminated
              unnecessary PPC call on the lazyGiveAccess path)

1-way on k4:
1044.8 1052.7 1049.8 1049.0 1047.9 1045.9 1045.5 1043.5
1043.9 1044.2 1047.1 1045.9 1044.8 1048.1 1044.9 1044.3
1042.6 1041.3 1039.4

4-way on k4:

3878.8 3941.2 3924.3 3936.3 3943.8 3942.4 3933.8 3919.0
3949.8 3927.9 3952.5 3936.3 3927.0 3947.7 3941.7 3930.6
3932.0 3939.3 3923.9 3910.6 3903.6 3914.1 3910.2 3928.2
3926.4 3902.2 3922.2 3935.6 3929.5 3930.5 3912.4 3894.4

===============================================

Dilma (03/18) Few optimizations (1) NameTreeLinuxFS methods set namelen
              (out length for a buffer in a PPC call) to 0 to avoid copying
	      out an argument that has not been changed).
	      (2) call for MetaPAPageServer::init done lazily (the rest of
              FR creation was already done on demand)

1-way on k4
1039.1 1039.9 1038.1 1039.9 1031.3 1034.5 1037.5 1034.4
1035.2 1036.0 1030.4 1032.9 1038.0 1036.9 1031.1 1032.0
1028.7 1031.7 1031.9 1031.3 1031.4 1024.5

4-way on k4
3868.5 3912.9 3920.6 3922.6 3913.5 3930.5 3917.9 3921.5
3935.9 3920.6 3928.6 3925.9 3912.6 3921.1 3918.6 3915.1
3917.8 3919.2 3918.4 3895.2 3893.8 3918.7 3910.7 3910.3
3919.8 3901.6 3918.2 3922.0 3914.7 3906.7 3883.1 3923.3
3905.1

===============================================

Dilma (03/19) Extended small file optimization to deal with
              files up to ~16K.

1-way on k4
1044.8 1052.7 1049.8 1049.0 1047.9 1045.9 1045.5 1043.5
1043.9 1044.2 1047.1 1045.9 1044.8 1048.1 1044.9 1044.3
1042.6 1041.3 1039.4 

4-way on k4

3908.0 3966.4 3925.9 3961.7 3955.6 3965.4 3948.1 3972.3
3965.9 3971.8 3970.6 3944.0 3976.2 3963.3 3945.8 3960.1
3954.5 3957.2 3957.8 3956.4 3933.3 3972.8 3970.3 3963.7
3970.2 3942.2 3942.8 3940.3 3969.4 3964.1 3961.7 3960.4
3971.0

===============================================

Dilma (03/19) - Added missing _releaseAccess from FRs and
                FileLinuxDir objects, thereby fixing the leak
	        of client data associated with these type of
		objects.

1-way on k4
1047.4 1046.9 1045.0 1038.6 1039.0 1038.0 1035.3 1041.6
1037.5 1037.5 1036.8 1040.8 1040.6 1042.8 1040.8 1033.8
1038.2 1033.9 1038.3 1036.1 1036.2 1041.9 1039.9 1041.8
1037.1 1040.4 1037.0 1042.3 1040.3 1042.8 1035.5 1038.5

4-way on k4

3913.4 3961.6 3957.0 3957.4 3938.1 3952.0 3920.9 3940.5
3955.2 3970.7 3953.8 3953.6 3962.1 3945.9 3925.7 3968.0
3968.1 3958.0 3970.3 3954.2 3943.2 3936.0 3944.2 3936.9
3947.3 3927.7 3942.4 3943.4 3931.0 3949.3 3946.5 3931.5
3928.8 3944.7

===============================================

Dilma (03/19) - When storing small files directly on the
                ServerFile, instead of allocating space
	        for the maximum small file size, we use
	        a collection of chunks. (STILL USING CHUNK
	        SIZE ~ 16K, because allocating 2k chunks
	        didn't improve things).
                Also, listSpace in AllocPool.C::ListSize has
                been changed from 1 to 16.

1way - k4
1047.3 1052.8 1046.6 1040.5 1045.2 1044.9 1044.7 1038.4
1042.0 1041.1 1042.7 1044.1 1039.6 1039.2 1039.5 1038.5
1029.9 1040.5 1036.1 1042.9 1044.3 1038.8 1044.4 1038.2
1042.1 1043.7 1040.3 1036.9 1040.6 1043.2 1044.6 1043.4

4way - k4
4024.2 4038.1 4026.7 4021.7 4041.3 4022.9 4016.9 4043.4
4038.7 4040.0 4029.4 4032.3 4036.5 4020.4 4038.4 4020.3
4025.6 4022.1 4029.1 4020.7 4034.8 4017.9 4005.9 4012.0
4018.3 4005.2 4027.2 4026.5 4019.5 3992.1 4016.5 4014.8
4021.6 4012.6

==================================================

Marc (03/20) New control flags for optimization.  
	ORRANKLUGE (dist comp fcm for baseservers) now on by default.

4-way K4 0C0xffff->-c0xff7f
3731.6 4030.3 4027.4 4018.7 4024.6 4003.1 3995.4
4009.2 3998.0 4014.9 3983.5 3971.7 4005.7 3996.7

4-way k4 no ORRAN )C0x40000ffff -c 0x40000ff7f
3738.7 4016.1 4000.3 4018.0 4009.9 4009.6 3994.3

===================================================

Marc (03/27) New FCMComputation destroy logic.

0xffff->0xff7f K4

3979.6 4009.4 4004.5 3998.2 4014.8 4007.0 3974.1
3984.0 3987.8 3970.7 3980.2 3964.4 3978.0 3967.7 
4000.7 4023.1 3999.6 3986.6 3998.4 3985.3 3982.5

Small path length changes in FCM code
4000.3 4021.3 3978.8 4009.2 4010.6 4011.3 4012.6

===================================================

Michal (03/28) VirtFS cleanup

My numbers always seem a bit low....

0xffff->0xff7f K4

1037.4 1034.8 1037.8 1033.0 1038.0

3964.8 3979.7 3964.9 3956.7 3964.9 3966.6 3952.4 3963.8
3962.7 3961.9 3971.9 3970.5 3964.2 3949.0 3965.9 3970.9
3960.7 3968.9 3957.4 3963.5

===================================================

Marc (03/30) FR Leak

Fixing this adds some path length.  It its important, we can reduce
it.  (Its cheaper to leak the FR than to free it, at least in the
short run).

0xffff->0xff7f K4

3987.5 3966.0 3924.0 3929.3 3945.8 3917.9 3936.9
3976.1 3991.5 3992.6 3972.9 3987.9 3953.4 3977.0

===================================================

Dilma (03/30) clean up in the lazyGiveAccess code
              You can turn this off by undefining CLEANUP_LAZY in
	      defines/experimental.H

0xffff->0xff7f K4

1way
1044.3 1041.9 1041.4 1038.2 1039.4 1037.1 1038.7 1035.1 1033.6 1034.6
1037.3 1035.1 1033.5 1035.7 1036.4 1034.4 1026.3 1032.0 1029.2 1030.2
1030.9 1030.9 1027.6 1030.0 1023.4 1026.5 1022.7 1018.6 1024.8 1024.4

4way
3962.6 4005.4 4002.0 4000.3 3994.7 3968.4 3970.1 3980.7 3958.4 3944.6
3974.8 3963.0 3953.2 3956.8 3957.4 3949.7 3959.0 3971.0 

===================================================

Dilma (04/08) bug fixes in the lazyGiveAccess code. It shoudn't imply in
              any performance change...

k4 numbers

1 way
1040.0 1040.1 1039.9 1038.2 1037.4 1037.1 1032.4 1040.7
1037.5 1032.4 1031.2 1035.4 1032.9 1030.4 1033.5 1028.5
1028.9 1026.6

4 way
3994.4 3981.7 3988.1 3977.2 3970.4 3964.8 3977.1 3997.7 3991.3
3985.2 3972.6 3961.8 3975.6 3973.9 3953.2 3951.4 3950.8
3949.8 3934.9

===================================================

Dilma (04/15) Fixed dup/fork of directory file descriptors.
	      It shouldn't change performance of SDET ...

k42 numbers
1 way
1039.4 1031.3 1030.3 1035.3 1027.9 1029.1 1033.5 1034.9
1032.7 1034.7 1028.0 1034.7 1031.9 1031.9 1029.3 1030.0
1027.5 1026.3

4 way
3968.2 3974.8 3986.6 3970.9 3986.5 3980.0 3972.9 3988.9
3972.5 3969.7 3979.6 3977.0 3956.2 3957.4 3958.0 3953.9
3955.8 3953.0 3970.5

===================================================

Dilma (04/16) Throwing away unused code (preFork, postFork stuff).
              Getting new numbers for sanity check ...

1038.9 1042.2 1027.6 1034.4 1024.2 1033.7 1033.8
1035.1 1028.1 1032.0 1030.0 1026.1 1025.1 1031.2
1030.7 1028.9 1022.7 1020.9

4way
3979.4 3985.9 3984.7 3994.0 3985.2 3968.2 3987.1 3988.1
3964.5 3942.5 3931.7 3962.6 3967.4 3978.0 3971.6 3968.3
3968.1 3964.7 3966.4


===================================================

Michal (05/01) New shared memory transport for small files.
		My numbers are a bit lower than before, but they were so
		before my changes as well --- no impact on SDET due to
		small file support changes.

1028.0 1030.1 1026.5 1029.1 1027.8 1023.7 1024.0 1021.8 1015.6 1022.8 


4way
3935.8 3894.1 3899.1 3910.5 3893.2 3907.2 3902.3 3899.0 
3901.1 3888.0 3890.7 3895.8 3882.6 3893.4 3900.2 3898.1 
3883.0 3881.7 3906.9 3902.2 3912.3 3908.5 3920.1 3914.4 
3906.8 

===================================================

Dilma (05/01) Initial steps in the FileLinuxFile objects to enhance
              encapsulation (which simplifies hot-swapping)
	      Notice that this commit has not been integrated with
	      Michal's shared memory transport for small files, so
              we're back to previous way of transfering state to
              the server through a series of PPCs.
1 way
1025.0 1021.1 1008.9 1017.2 1018.9 1011.3 1016.5 1015.1 1011.0
1009.4 1013.5 1014.2 1014.5 1010.1 1006.0 1011.8 1007.2 1016.4

4way
3915.6 3919.5 3881.0 3899.5 3889.6 3900.4 3877.2 3878.8
3879.5 3855.5 3861.5 3868.0 3874.2 3838.7 3877.8 3879.7
3872.1 3886.9 3866.7 3874.8 3893.2 3866.8

===================================================

Dilma (05/01) Factored out some common code in FileLinuxFile.C

1way
1022.7 1018.7 1017.5 1012.9 1015.5 1010.2 1010.1
1012.6  1014.8 1010.2 1013.0 1014.7 1011.8
1013.8 1009.0 1010.3 1010.0 1010.2 

4way
3897.7 3923.3 3886.2 3881.2 3845.2 3863.4 3869.8
3874.0 3849.3 3861.9 3851.1 3848.7 3851.9 3856.4
3834.0 3869.0 3865.5 3894.1 3862.0 3886.6 3894.0 3862.3

===================================================

Michal (05/05) Re-enabled small file support via shared-memory

No change from 05/01 numbers.

===================================================

Dilma (05/05) Clean-up of known bugs in the mount point server.
              No SDET performance change is expected.

1way
1024.1 1023.8 1014.2 1018.1 1017.4 1011.5
1010.6 1008.7 1014.2 1014.1 1016.6 1018.6
1015.3 1017.3 1017.0  1009.6 998.5
1015.1 

4way
3892.5 3901.7 3906.9 3883.7 3883.1 3873.8 3865.4 3869.5
3872.6 3866.2 3878.7 3877.0 3845.6 3863.1 3834.3 3862.6
3882.3 3863.7 3874.3 3879.0 3854.0 3875.3

==========================================================
Marc (05/07/03) Node per numanode allocator.  Remove kludges.
k4 4 way

with chunkManager kludge removed
3860.3 3917.8 3933.8 3937.3 3934.6 3942.3 3941.2
with dist primitive FCM backing baseservers off
3867.8 3929.1 3949.6 3951.6 3954.2 3935.6 3943.3
with dist primitive kludge removed
3866.4 3949.1 3918.6 3923.1 3942.1 3945.6 3935.0 

==========================================================
Marc (05/08/03) Clean up and fix bugs in numa upgrade

3903.8 3985.4 3986.0 3984.6 3978.3 3979.1 3971.6 
3929.1 3983.8 3998.2 3984.9 3974.2 3993.8 3981.9
3970.8 3965.0 3952.2 3949.1 3926.3 3921.1 3949.0

==========================================================
Dilma (05/23/03) While adding symlinks to K42RamFS I did some minor
                 improvements on DirLinuxFS::rename. No performance
	         impact expected, but I ran the experiments:

1-way
1027.1 1023.5 1024.3 1010.5 1017.8 1020.3 1017.1 1016.9 1013.3 1018.5
1016.8 1018.5 1013.6 1012.8 1014.9 1017.3 1017.7 1018.7

4-way
3894.1 3933.7 3996.1 3980.1 3965.7 3960.8 3976.9 3958.7
3953.8 3965.6 3971.7 3973.5 3943.9 3972.2 3973.6 3966.2
3971.0 3987.5 3981.5 3988.1 3963.4 3920.3 

==========================================================
Orran (06/02/2003) Fixed symbolic links for SDET

1-way 
1031.9 1026.0 1021.8 1012.9 1018.1 1012.1 1015.6 1014.3 1010.1

4-way
3910.2 3965.2 3968.2 3972.3 3960.7 3952.0 3963.0 3947.3 3965.6

==========================================================
Michal (06/02/2003) Poll overhaul.
		    Independent transports for FileLinuxStream.
		    Basic AF_UNIX support.

1-way

 1027.5 1027.0 1022.5 1017.4 1019.5 1010.0 1012.7 1016.9 1018.2
 1015.6 1009.6 1016.5 1014.3 1016.4 1015.1 1013.7 1015.3 1007.9
 1018.7 1014.6

4-way
 3897.9 3977.5 3969.2 3954.3 3946.3 3949.4 3962.5 3960.3
 3969.3 3952.7 3956.4 3955.6 3955.1 3937.6 3963.6 3944.4
 3953.6 3954.9 3945.1 3948.8
==========================================================
Orran (06/03/2003) Changed all NameTreeLinux calls to not have return
                   value for strings, and got rid of some string cpying.
1-way
 1024.6 1015.9 1015.8 1014.2 1013.7 1012.1 1013.5 1008.1 1012.1
 1012.8 1016.1 1016.4 1013.7 1009.7 1012.2 1014.8 1014.8 1011.4

4-way
 3888.4 3964.2 3938.5 3912.2 3905.6 3911.9 3918.2 3933.1 3928.4
 3907.8 3973.8 3930.7 3925.0 3906.0 3916.8 3915.5 3934.7 3936.8

==========================================================
Bryan (06/04/2003) Overhauled resource domain infrastructure.

1-way
1031.5 1028.3 1026.0 1025.8 1020.9 1027.6 1025.5 1024.3
1027.7 1028.7 1026.5 1027.0 1029.7 1026.2 1022.3 1024.5
1030.0 1029.0 1025.1 1029.8 1022.8 1026.9 1025.0 1017.2

4-way
3950.5 4007.4 4009.5 4009.4 3996.8 4005.4 4004.3 3963.0
3942.7 3992.6 4000.4 3993.2 3989.3 4012.8 3997.9 3964.2
3956.7 3979.5 3958.9 3971.8 4000.5 3945.4 3983.1 3974.1

==========================================================
Orran (06/05/2003) Batched requests to free elments to PMRoot 
		   acquiring lock just once.  Also changed
		   free list on PMRoot so not chained through 
		   pages.

1-way - with just batched requests
1014.7 1030.3 1031.3 1031.6 1024.9 1031.4 1032.2 1022.7
1010.7 1039.5 1033.5 1036.4 1035.1 1038.1 1030.9 1027.6
1014.8 1031.5 1030.2 1033.8 1029.8 1036.3 1034.8 1033.2

1-way - with both allocated list elements and batched requests
1019.4 1038.6 1040.6 1028.5 1032.7 1031.1 1028.6 1027.3
1022.5 1035.6 1030.8 1034.7 1030.3 1033.6 1030.8 1029.8
1023.0 1040.2 1035.1 1036.2 1030.7 1033.5 1034.1 1031.9

4-way - with just batched requests
3930.5 4019.2 4029.4 3988.9 3971.2 4000.5 3990.3 3976.1
3943.2 4026.5 4015.4 3982.2 3978.9 4000.7 4012.7 3982.0
3970.6 4028.8 3993.4 3994.4 4004.9 3993.5 3974.9 3987.2

4-way - with both allocated list elements and batched requests
3963.8 4028.9 3990.0 4032.8 4027.0 3947.4 4030.1 4022.8
3956.5 4000.9 4001.5 3980.6 4025.0 4031.0 4005.9 4003.6
3956.8 4027.7 4010.2 4025.2 3991.5 3987.5 4024.8 3964.5

==========================================================
Bryan (06/16/2003) Minor scheduling tweaks that let us use
		   a tiny execution quantum in the kernel.
		   The 4-way numbers seem a bit erratic,
		   so I made 5 runs.

1-way
1033.4 1032.4 1028.8 1031.0 1029.4 1032.9 1029.1 1028.9
1039.9 1040.0 1032.7 1036.1 1027.4 1029.4 1029.5 1026.8
1039.4 1034.8 1032.0 1035.0 1026.5 1030.9 1025.6 1029.9

4-way
3941.2 4029.4 4000.9 3999.1 3968.4 4006.3 3975.4 3968.7
3970.7 4029.6 4035.9 3967.3 4032.1 3986.2 3976.1 3961.4
3961.9 3988.7 3958.5 3986.9 3984.5 3971.0 3980.7 3966.9
3945.9 4019.1 4008.9 4042.0 3987.4 4011.2 3995.9 3999.5
3971.0 4012.3 3999.2 4006.3 3982.2 4012.8 3984.7 3982.0

==========================================================
Dilma (06/25/2003) New base numbers with the floor system
		   to reflect recent changes (bug fixes
	           on select/poll, etc)

1-way
1039.9 1037.4 1029.5 1029.3 1028.6 1029.6 1031.2 1018.7
1019.5 1015.6 1013.3 1020.7 1021.9 1018.8 1017.1 1014.9
1012.7 1014.5 1021.5 1010.0 1015.6 1021.2 1022.3 1020.1

4-way
3947.9 4002.9 3978.9 3982.9 3969.2 3952.5 3989.1 4015.7
3979.3 3962.0 3947.7 3979.4 3932.2 3924.8 3937.0 3971.0
3981.4 3995.9 4014.1 3999.2 4014.3 3980.1 3964.0 3972.4
3974.1 3945.3 4002.2 3964.8 3961.6 3942.7 3958.6 3973.4
3988.0 3964.2 

==========================================================

Dilma (06/26/2003)

THESE NUMBERS ARE EXPERIMENTS REFLECTING A CONFIGURATION THAT
IS NOT ON BY DEFAULT. Do not look at these number to judge
if your changes have had an impact on performance. Look at the
numbers on the next entry. I'm recording them here so I have a
basis to compare with as I keep improving the hot swapping
scheme.

Configuration: without lazy decision regarding sharing non-sharing

1-way
1017.1 1017.0 1016.3 1013.1 1007.7 1008.3 1009.7 1007.5 
1002.7 1003.4 1003.7 1001.9 1000.8 1006.9 995.2 1006.2
998.4 1001.8 1003.5 1002.1 996.5 996.0 998.5 1001.0

4-way
3875.6 3930.5 3923.0 3883.6 3906.1 3908.9 3906.1 3885.4
3923.0 3917.3 3929.1 3925.8 3916.5 3891.4 3875.3 3894.8
3909.2 3893.0

==========================================================

Dilma (06/26/2003) These reflect the repository as of my commit, with
		   my changes #ifdef'd out. It's likely that I forgot
	           to isolate some part of my changes, but SDET and
                   regress run without problems, so I'm dropping the
	           code.

1-way
1036.7 1029.9 1034.3 1031.2 1030.0 1024.7 1032.6 1030.2
1027.4 1027.6 1030.9 1029.8 1021.0 1027.0 1029.8 1020.5
1027.4 1017.9 1021.7

4-way
3967.3 3996.7 4001.6 3994.9 3982.6 3987.2 3982.2 3998.7
3960.2 3973.8 4000.2 3986.8 3957.3 3962.3 3933.7 3917.4
3954.1 3957.6 3959.6

==========================================================

Bryan (07/01/2003) Fiddled with implementation of FD::poll().

1-way
1035.2 1036.4 1032.1 1035.4 1031.6 1034.7 1025.3 1030.3
1040.5 1038.8 1037.0 1036.1 1032.1 1031.6 1028.5 1033.7
1041.5 1036.2 1034.8 1029.9 1025.9 1029.1 1023.5 1024.8

4-way
3950.4 4024.1 3980.8 3971.5 3959.4 3979.9 3964.1 3958.7
3932.5 4009.7 4003.4 3949.8 3968.6 3994.1 3985.5 3950.3
3966.9 3983.5 3959.6 3967.0 4008.4 3998.4 3988.5 3989.7

==========================================================

marc (07/09/2003) Agressive fork copy heuristics

1-way
1068.4 1078.6 1069.1 1077.5 1074.1 1070.9 1073.1
1074.4 1072.1 1071.2 1068.0 1071.8 1072.5 1060.8
1062.5 1065.5 1069.2 1068.6 1063.6 1070.0 1070.6

4-way
4110.0 4177.5 4203.1 4156.3 4194.0 4157.1 4151.3
4196.2 4148.1 4151.0 4181.7 4174.4 4141.7 4149.7
4112.3 4111.8 4157.8 4161.1 4144.5 4155.0 4154.6

==========================================================

Bryan (07/15/2003) Fixed dispatchQueue initialization.

1-way
1077.4 1076.7 1072.4 1077.9 1074.0 1070.5 1076.1 1071.4
1077.7 1079.2 1074.1 1076.7 1075.9 1071.8 1075.2 1070.3
1075.7 1078.6 1076.2 1074.8 1071.9 1072.1 1071.8 1072.9

4-way
4110.7 4174.6 4188.3 4156.3 4160.5 4153.6 4163.9 4140.9
4114.9 4164.3 4155.6 4180.8 4165.6 4148.6 4142.2 4131.5
4121.3 4164.4 4165.5 4170.3 4162.1 4154.5 4182.2 4148.0

==========================================================

Marc (07/17/2003) ForkCopy in kernel with clone login in Regions and
FCMs.  K4

1-way
1136.4 1140.8 1142.0 1136.1 1139.4 1135.3 1134.2
1133.9 1133.6 1129.4 1138.2 1131.5 1135.4 1130.2
1138.6 1140.9 1141.8 1136.5 1139.9 1136.3 1139.3

4-way
4353.2 4417.6 4388.8 4398.1 4408.5 4342.4 4349.7
4340.9 4358.9 4334.1 4354.6 4321.8 4338.5 4333.8
4327.5 4364.8 4377.9 4360.3 4363.1 4364.8 4376.9

==========================================================

Michal (08/05/03) Switch to new FS images.  Heavier reliance on
symlinks; all shared lib references (2-3 per exec) go through a
symlink.  K4

1-way

1092.2 1092.3 1088.0 1088.5 1083.2 1083.0 1081.3 
1085.6 1086.6 1089.3

4-way

4326.2 4404.7 4396.4 4395.6 4385.1 4377.4 4379.7
4362.7 4361.2 4363.8 4370.9 4372.9

Note:  frequent lockups!!!!


==========================================================

Michal (08/06/03) New timer infrastructure (replacement for
SchedulerTimer only).

1080.8 1077.2 1082.7 1085.1 1079.5 1080.3 1078.2 1084.8 1084.2
1086.7 1082.3 1086.8 1080.1 1079.5 1083.8 1088.8 1084.0 1083.8
1086.3


4306.7 4344.2 4365.2 4354.4 4355.2 4306.4 4317.2 4322.9 4347.3
4347.1 4321.8 4340.6 4353.3 4336.8 4344.7 4327.1 4364.4 4360.7
4347.0

==========================================================

Dilma (08/18/03) There numbers reflect execution without LAZY_SHARING_SETUP.
                 DO NOT USE THESE NUMBERS FOR ANY COMPARISON.
		 They are only for future reference. Bellow I have the
                 numbers I got in the floor system.

my tree, IGNORE IT, 1-way

1111.5 1110.7 1107.3 1103.4 1103.9 1102.6 1101.6 1103.9
1104.8 1107.8 1102.2 1102.6 1102.2 1100.7 1106.1 1106.2
1099.4 1105.4 1103.8 1107.9 1103.3 

my tree, IGNORE IT, 4-way
4190.9 4313.4 4299.9 4264.3 4273.2 4278.1 4281.2 4265.1 4230.1 4253.5
4261.1 4260.4 4258.2 4273.6 4253.0 4268.9 4274.7 4277.5 4258.0 4277.0


floor system, 1-way
1129.8 1130.1 1131.1 1130.4 1128.3 1132.7 1131.5 1129.7 1129.9 1131.3
1129.1 1127.7 1129.6 1128.1 1126.7 1127.8 1127.4 1128.3 1131.9 1127.4
1131.1

floor system, 4-way
4295.5 4362.2 4372.0 4378.8 4360.3 4362.9 4359.9 4339.4 4305.9 4316.4
4349.7 4348.8 4343.7 4331.1 4332.7 4346.0 4326.4 4325.3 4344.8 4333.2

==========================================================

Dilma (08/20/03) Few steps towards integrating my tree (with
                 hot swapping of FileLinuxFile) with repository.
                 No performance impacted expected, none observed.

1-way
1129.6 1130.8 1128.0 1132.0 1130.8 1131.3 1131.8 1128.6
1131.4 1131.8 1129.0 1138.9 1133.1 1131.6 1130.3 1131.9
1131.8 1132.7 1131.1 1130.7 1128.4

4-way
4332.5 4405.2 4379.8 4395.1 4392.2 4390.6 4396.4 4358.7
4379.5 4369.2 4373.6 4385.1 4403.3 4382.3 4370.3 4359.7
4374.5 4391.9 4395.4 4399.7   

==========================================================

Bryan (08/27/03) Resurrected code for quiescing a process before forking
		 its address space.  Performance may have slipped slightly,
		 but correctness is definitely improved.

1-way
1131.8 1134.0 1130.2 1131.1 1128.0 1131.6 1131.6 1129.9
1136.4 1136.5 1133.0 1129.7 1131.5 1130.8 1131.8 1135.0
1137.2 1135.2 1137.4 1133.5 1131.8 1132.1 1133.9 1139.1

4-way
4306.8 4379.0 4371.9 4358.7 4383.9 4380.2 4361.8 4350.4
4293.9 4388.5 4367.8 4365.3 4362.2 4350.9 4371.0 4366.3
4330.0 4371.7 4368.0 4355.0 4339.4 4371.2 4373.3 4343.6

==========================================================

Marc (08/28/03) Fix bug exposed by not having quiesce (see above)

4-way
4311.1 4407.6 4385.6 4373.6 4381.4 4386.5 4370.2
4357.2 4348.2 4355.7 4339.8 4345.9 4349.1 4357.3
4297.1 4370.9 4376.5 4369.1 4369.6 4351.4 4370.1 4364.8

==========================================================
Dilma (08/28/03) Fix in fslib/ServerFile.C and fslib/ServerFileBlock.C

1-way
1132.1 1130.2 1124.9 1121.8 1124.1 1126.7 1124.8
1130.2 1127.2 1127.1 1122.4 1123.5 1120.7 1125.9
1119.5 1124.6 1126.5 1130.5

4-way
4312.1 4353.0 4342.4 4348.1 4352.9 4359.6 4366.6
4366.2 4305.3 4331.7 4351.7 4330.3 4366.9 4358.9
4341.6 4350.7 4358.6 4346.3 

==========================================================
Bryan (09/02/03) Added a "makeFirst" option to Scheduler::Unblock().

1-way
1135.0 1131.0 1128.7 1128.6 1123.0 1131.3 1124.8 1126.8
1129.0 1134.5 1132.8 1131.5 1127.6 1129.1 1128.5 1127.3
1129.5 1131.1 1130.0 1130.4 1128.5 1126.6 1127.6 1125.1

4-way
4296.2 4386.2 4332.1 4340.7 4362.5 4354.1 4349.4 4312.5
4276.1 4376.2 4356.3 4371.0 4368.2 4339.8 4338.8 4329.2
4272.7 4362.2 4346.2 4343.9 4358.4 4348.3 4336.4 4345.8

==========================================================
Bryan (09/02/03) Implemented more regular and predictable time-slicing
		 of both threads and dispatchers.

1-way
1130.6 1132.1 1135.0 1126.3 1132.4 1128.8 1132.9 1129.8
1127.8 1134.9 1131.2 1131.4 1128.8 1130.9 1127.8 1130.0
1131.8 1136.0 1133.9 1131.5 1128.2 1134.1 1131.6 1128.0
1132.7 1133.4 1133.9 1132.2 1131.3 1134.4 1131.2 1128.6
1131.4 1127.9 1128.9 1130.8 1128.8 1127.9 1128.7 1128.1
1132.6 1131.5 1130.5 1133.0 1133.6 1135.1 1134.4 1128.7

4-way
4298.5 4388.8 4376.6 4369.3 4376.5 4368.5 4374.6 4353.9
4322.9 4399.0 4381.1 4387.2 4381.1 4367.3 4374.2 4346.0
4311.2 4398.3 4391.9 4378.0 4359.3 4358.3 4379.0 4370.1
4308.6 4392.0 4387.3 4368.5 4386.8 4374.7 4367.1 4361.9
4284.1 4389.5 4408.4 4400.8 4389.5 4377.1 4384.6 4376.5
4309.6 4398.6 4388.2 4384.9 4374.8 4349.4 4374.0 4350.6

==========================================================
Bryan (09/29/03) Eliminated silly propagation of active timers across fork.

1-way
1141.4 1143.7 1144.7 1141.8 1141.1 1139.9 1137.7 1140.6
1138.0 1145.1 1138.9 1135.4 1133.9 1134.4 1136.2 1137.1
1136.0 1134.7 1135.9 1133.4 1132.9 1132.1 1129.2 1130.2

4-way
4337.1 4414.6 4409.7 4406.9 4383.7 4408.2 4368.7 4357.3
4353.0 4421.7 4411.2 4404.6 4416.7 4406.1 4387.3 4396.0
4333.1 4419.6 4406.8 4367.3 4374.3 4361.3 4393.0 4415.2

==========================================================
Bryan (09/29/03) Changed fork logic to quiesce all dispatchers before
		 cloning the address space.

1-way
1146.3 1152.2 1150.4 1150.9 1147.7 1145.5 1148.0 1145.2
1147.7 1155.7 1151.6 1150.1 1149.0 1145.8 1148.1 1147.9
1151.1 1152.8 1151.9 1149.5 1149.6 1149.3 1147.2 1148.3

4-way
4350.0 4430.1 4423.7 4419.3 4421.6 4424.0 4416.6 4416.5
4340.8 4437.2 4424.9 4417.9 4427.8 4406.3 4377.4 4410.2
4324.4 4442.0 4431.0 4430.3 4416.5 4374.6 4410.2 4416.3

==========================================================
Bryan (10/02/03) Reclaim thread space in dispatcher 0,0 after fork().  Seems
		 to have degraded 1-way performance slightly, but it's the
		 right thing to do.  4-way performance is still good.

1-way
1142.3 1145.6 1141.6 1142.1 1139.7 1142.5 1140.9 1140.8
1142.0 1145.7 1142.4 1142.3 1139.8 1140.2 1140.1 1139.3
1143.1 1145.5 1141.7 1143.4 1143.7 1140.8 1141.9 1140.7

4-way
4345.4 4441.9 4440.4 4410.9 4426.3 4417.5 4395.5 4407.2
4349.5 4436.4 4442.4 4434.3 4426.7 4420.3 4426.1 4419.6
4343.8 4378.8 4375.9 4362.3 4410.3 4400.4 4416.6 4420.5


==========================================================
Michal (10/08/03) Kill BATS

1-way
1135.2 1134.5 1143.7 1134.0 1139.8 1133.4 1138.1 1136.9 
1137.5 1134.6 1137.3 1133.3 1134.0 1136.0 1135.9 1133.0 
1136.0 1135.2 1135.7 1137.4

4302.7 4421.6 4416.9 4402.6 4406.3 4405.8 4397.7 4391.4 
4380.7 4375.9 4353.2 4366.7 4375.7 4381.3 4383.4 4369.2 
4372.3 4357.8 4385.3 4367.5

==========================================================
Michal (10/08/03) New init procedure

1119.4 1126.2 1127.3 1124.4 1124.3 1121.5 1123.4 1124.2 
1121.9 1120.8 1121.8 1120.9 1122.6 1124.7 1119.0 1120.5 
1123.8 1119.2 1123.8 1122.6 

4259.0 4348.0 4345.1 4343.3 4358.2 4359.9 4340.9 4332.7
4320.7 4328.0 4328.0 4314.4 4309.9 4308.6 4315.8 4316.5 
4307.5 4306.6 4315.1 4315.1 

==========================================================
Bryan (10/27/03) New baseline numbers.  Floor system, clean build,
		 ugly numbers.

1-way
1127.4 1131.3 1126.1 1123.0 1124.1 1122.2 1124.1 1125.3
1128.7 1128.9 1124.3 1125.8 1124.8 1126.2 1125.6 1125.9
1126.3 1126.8 1123.0 1123.6 1122.6 1122.7 1123.4 1123.4

4-way
4290.5 4394.8 4372.0 4372.4 4354.0 4359.5 4343.2 4356.9
4259.5 4388.4 4378.2 4366.4 4354.2 4364.3 4360.5 4359.0
4275.8 4371.0 4371.5 4375.0 4373.0 4357.6 4349.7 4347.0

==========================================================
Bryan (10/27/03) Moved method number for IPC from r0 to r10.

1-way
1125.2 1123.6 1123.5 1124.0 1125.5 1128.6 1123.9 1123.0
1127.4 1129.0 1125.9 1126.4 1129.1 1123.6 1122.1 1126.8
1125.5 1131.4 1124.4 1121.2 1125.5 1123.8 1122.8 1124.2

4-way
4298.4 4397.4 4387.2 4379.4 4392.3 4381.9 4357.9 4340.4
4308.8 4410.1 4392.6 4394.3 4401.7 4359.8 4385.2 4366.8
4295.1 4404.1 4389.0 4392.0 4384.7 4374.3 4366.3 4368.3

==========================================================
Bryan (10/28/03) Moved system call number from r2 to r0.

1-way
1124.9 1123.8 1124.6 1121.6 1124.5 1120.2 1121.1 1122.4
1122.1 1124.1 1128.0 1127.8 1127.8 1128.5 1128.4 1127.4
1127.3 1129.4 1126.2 1123.8 1122.1 1123.5 1125.7 1123.8

4-way
4312.8 4397.9 4379.0 4397.8 4388.5 4366.1 4368.3 4368.4
4308.0 4407.0 4372.0 4379.5 4365.5 4378.7 4372.5 4359.4
4285.0 4389.8 4379.5 4368.7 4384.3 4379.7 4374.6 4376.8

==========================================================
Orran (10/30/03) Added new structures for lists of free page frames

1-way
1122.1 1127.2 1128.9 1127.1 1126.2 1126.9 1124.8 1124.3
1118.1 1122.7 1119.7 1121.9 1117.9 1121.3 1119.8 1118.9
1122.2 1128.3 1125.6 1123.3 1121.9 1123.9 1123.3 1122.5

4-way
4260.1 4343.7 4333.1 4320.2 4329.9 4313.0 4314.9 4323.7
4217.8 4331.4 4309.2 4339.0 4324.5 4330.8 4343.8 4306.3
4252.0 4349.4 4333.0 4342.1 4330.2 4335.8 4336.0 4319.3

==========================================================
Bryan (10/30/03) Redid the baseline numbers.  Something seems to have been
		 wrong with the way Orran made his runs.  Performance has
		 not degraded, and in fact 1-way performance seems to have
		 improved a little bit.

1-way
1131.9 1137.4 1133.4 1136.7 1136.5 1136.3 1134.1 1132.0
1130.1 1129.3 1130.9 1129.4 1129.5 1126.6 1126.1 1126.5
1133.7 1134.6 1132.0 1127.2 1129.4 1127.3 1128.9 1129.2

4-way
4306.7 4401.3 4390.6 4372.2 4400.5 4392.2 4390.7 4382.4
4305.4 4403.9 4394.5 4391.2 4399.8 4393.0 4387.9 4376.9
4316.9 4414.8 4406.6 4399.1 4396.8 4394.7 4384.3 4373.8
==========================================================
Orran (10/31/03) Got rid of statistics not being properly maintained in 
		 FCM and PM

1-way
1155.4 1160.3 1155.5 1154.5 1152.6 1155.0 1152.0 1151.8
1151.0 1154.5 1150.4 1152.3 1151.3 1150.0 1149.9 1149.3
1151.0 1154.5 1150.4 1152.3 1151.3 1150.0 1149.9 1149.3

4-way
4389.6 4467.2 4418.7 4440.0 4447.6 4449.9 4417.1 4435.6
4383.4 4474.6 4454.2 4448.5 4432.8 4435.7 4435.9 4417.8
4394.3 4477.4 4465.5 4467.2 4455.9 4467.5 4448.4 4448.7
4380.9 4483.5 4461.5 4470.7 4454.7 4447.1 4444.9 4434.0

==========================================================
Orran (11/11/03) Only maintain 4Meg of pages per processor PMRoot freelist, 
		 Maintain list of lists  of free page frame in root.

1-way
1146.2 1144.0 1144.8 1142.6 1141.1 1143.2 1140.4 1138.4
1141.2 1143.7 1141.5 1139.8 1140.5 1141.0 1138.4 1138.1


4-way
4322.4 4435.5 4416.1 4395.8 4393.8 4417.2 4423.5 4405.1
4330.2 4408.5 4410.5 4409.2 4418.7 4409.5 4423.1 4414.6
4320.0 4419.2 4407.0 4413.0 4419.4 4404.1 4411.7 4422.0

==========================================================
Bryan (11/13/03) Implemented reflection of Linux syscalls.

1-way
1146.2 1144.5 1143.4 1142.6 1143.2 1140.5 1140.1 1142.1
1148.1 1148.2 1142.8 1143.3 1144.7 1142.2 1143.8 1142.8
1142.8 1145.6 1141.7 1140.5 1143.6 1139.8 1143.2 1140.6

4-way
4344.9 4433.4 4426.3 4427.2 4419.2 4405.8 4425.5 4408.3
4341.4 4436.7 4420.6 4416.7 4418.3 4402.6 4409.1 4406.7
4351.3 4451.4 4447.4 4445.4 4432.0 4416.6 4428.2 4433.2

==========================================================
Bob (11/17/03) Floor System Numbers

24-way
32253.5 34977.4 35611.9 35612.4 35566.5 35137.5 35428.1 35303.8
32035.2 35062.2 35428.0 35445.3 35390.3 35504.1 35225.1 35269.3
31947.2 34908.3 35599.0 35683.1 35516.0 35358.0 35200.2 35152.0

==========================================================
Bryan (11/13/03) Moved well-known addresses out of TLB congruence class 0.

1-way
1150.9 1151.2 1150.7 1148.3 1149.9 1151.0 1151.1 1151.1
1151.4 1155.1 1149.3 1149.5 1151.0 1148.1 1148.4 1148.9
1154.9 1153.7 1153.0 1149.3 1152.3 1148.4 1151.1 1149.4

4-way
4429.9 4493.2 4491.8 4485.9 4493.6 4510.6 4472.1 4486.8
4432.6 4481.3 4476.9 4480.1 4468.3 4482.6 4475.4 4470.5
4429.8 4494.6 4480.8 4485.3 4485.8 4482.8 4455.4 4473.0
4429.3 4491.1 4490.3 4476.1 4483.4 4493.1 4488.1 4481.8
4433.8 4477.2 4474.3 4480.3 4477.6 4488.8 4462.7 4464.8

==========================================================
Orran (11/20/03) New mechanism for keeping track of free page frames, 
		 by maintaining pages that keep array of other pages
		 instead of singly linked list through each frame.

1-way
1158.5 1160.9 1157.8 1158.6 1154.7 1155.6 1155.0 1156.6
1151.8 1153.9 1151.2 1150.6 1149.1 1151.5 1147.7 1149.6
1149.8 1150.3 1152.5 1150.7 1148.2 1147.0 1146.3 1149.2

4-way
4412.8 4485.0 4474.1 4484.5 4473.5 4459.5 4466.7 4469.6
4403.9 4466.2 4461.2 4466.8 4464.8 4472.1 4469.6 4470.5
4414.4 4475.5 4461.4 4459.3 4475.0 4473.7 4470.8 4458.6
4395.0 4489.5 4459.6 4457.6 4466.5 4473.3 4475.0 4467.6


==========================================================
Michal (11/23/03) Exec mechanism supports 32-bit.
		New stack-jumping exec procedure, explicitly manage
		a stack region for the process.

1-way
1135.7 1141.1 1133.8 1132.8 1131.0 1134.5 1134.1 1133.0 
1138.6 1140.4 1139.6 1140.7 1140.2 1138.5 1138.6 1138.6 
1140.6 1142.9 1141.0 1140.7 1137.2 1137.1 1135.7 1136.3 

4-way
4356.3 4432.3 4447.6 4437.0 4428.2 4435.2 4397.7 4409.9 
4370.4 4444.1 4437.0 4425.3 4431.9 4424.0 4384.2 4420.0 
4373.4 4447.9 4437.0 4437.8 4437.2 4426.8 4401.0 4410.8 

==========================================================
Bob (12/03/03) Scheduling infrastructure into Resource Manager

1-way
1145.5 1148.6 1145.9 1147.0 1143.5 1144.3 1152.4 1146.4
1147.8 1146.4 1143.6 1146.2 1145.0 1147.1 1145.9 1150.0
1150.4 1149.1 1147.6 1153.2 1149.4 1144.8 1148.8 1142.4

4-way
4387.0 4420.5 4442.7 4443.7 4430.9 4371.9 4423.2 4450.8
4375.5 4464.8 4395.2 4443.5 4464.8 4361.4 4416.6 4387.5
4395.4 4477.8 4411.0 4414.8 4462.0 4403.4 4395.6 4399.7


==========================================================
Michal (12/03/03) New toolchain.  New packages. No shared segments.

985.7 989.3 984.8 983.6 984.9 983.8 984.1 982.7 
983.1 984.9 983.0 981.8 982.6 982.7 981.5 982.3 
982.1 980.3 982.7 980.3 981.8 979.7 980.5 980.4 

3725.0 3808.2 3803.4 3810.4 3750.3 3772.6 3785.6 
3799.1 3792.1 3777.7 3779.6 3794.8 3769.2 3784.0 
3791.2 3789.1 3771.5 3785.8 3778.6 3724.5 3770.2 
3784.9 3779.0 3770.6 

==========================================================
Michal (12/10/03) Avoid __builtin_return_address in syscall layer.

1001.9 1004.0 997.8 999.9 997.3 999.3 995.0 997.0 
992.2 996.4 994.0 999.9 996.0 993.4 994.5 996.8 
993.5 993.6 994.3 995.9 

3845.7 3859.3 3839.2 3838.8 3844.1 3846.2 3840.1 3841.1 
3821.8 3848.5 3848.8 3804.3 3851.6 3862.5 3855.2 3853.7 
3848.1 3856.2 3842.5 3843.3 

==========================================================
Bryan (12/12/03) Changed "clone()" to implement the Linux kernel interface
		 rather than the glibc interface.

1-way
994.5 993.1 995.2 991.7 990.5 990.2 990.6 990.8
996.9 997.0 996.0 990.9 990.7 989.7 992.4 990.2
996.7 994.9 991.6 992.3 990.2 989.7 990.4 991.0

4-way
3816.4 3843.8 3861.1 3843.0 3773.3 3823.0 3793.4 3791.4
3754.9 3838.8 3802.0 3854.8 3838.6 3808.5 3791.9 3795.9
3834.2 3846.7 3839.3 3845.8 3785.7 3775.4 3812.6 3792.6

==========================================================
Dilma (1/7/04) : current numbers. Notice non-shared file optimization
                 has been off since Dec 22nd (it's currently broken)

1-way
963.4 956.8 955.4 954.2 953.2 954.0 953.1 951.0
957.4 948.3 951.0 947.9 949.5 953.4 949.8 946.3
954.7 951.7 946.1 945.1 945.6 943.3 943.2 943.8

==========================================================
Bob (01/11/04) : new numbers after stabilizing MP performance

1-way
960.2 954.3 952.5 952.8 951.9 951.5 951.5 952.0
961.8 954.5 956.7 953.9 955.1 949.8 950.8 950.5
962.1 956.4 954.6 954.5 952.1 950.3 952.2 953.8

4-way
3689.8 3717.6 3708.0 3710.9 3705.3 3709.6 3699.2 3674.5
3664.1 3696.5 3673.2 3665.9 3717.1 3717.6 3702.8 3694.9
3622.0 3705.6 3662.3 3712.5 3692.6 3673.2 3713.1 3670.8


==========================================================
Michal (01/16/04) : enabled console login

1-way
966.7 960.3 956.4 959.4 955.2 952.1 956.0 954.0 
950.8 952.9 955.1 951.9 956.3 953.0 957.3 953.2 
955.8 951.1 956.0 951.9 

4-way
3649.1 3704.5 3677.4 3728.3 3701.8 3686.8 3720.3 
3712.8 3702.3 3702.4 3680.5 3693.8 3679.7 3721.8 
3699.8 3704.6 3711.5 3705.0 3682.8 3710.2 

==========================================================
Bryan (02/25/04) : First cut at 32-bit support

1-way
956.0 953.7 949.8 949.1 949.3 949.5 948.0 946.3
959.9 954.0 951.4 949.5 950.0 949.4 950.3 948.4
959.5 954.8 952.7 951.5 950.0 951.6 948.1 949.8

4-way
3691.2 3705.7 3705.0 3712.5 3710.5 3697.1 3703.9 3699.7
3690.9 3721.7 3727.1 3719.8 3713.9 3664.5 3711.2 3710.0
3648.5 3701.4 3714.9 3717.8 3709.8 3693.5 3698.1 3708.5


==========================================================
Michal (02/26/04) : Linux 2.6 driver/pty code base

1-way
799.9 798.7 787.1 785.8 791.8 796.5 796.6 794.2 
796.5 792.9 795.7 794.7 796.2 794.8 794.9 797.1 
794.3 794.2 794.9 795.3 

4-way
3080.7 3095.1 3086.3 3049.8 3096.2 3073.0 3070.2 3100.2
3105.8 3100.0 3100.2 3102.6 3107.8 3106.9 3098.9 3107.1 
3100.5 3095.7 3102.7 3095.1

==========================================================
Michal (02/26/04) : Timer bug fixes (should have only had a positive effect
		    but there have been other commits between 
		    this and my last one).

756.3 757.2 756.7 754.1 752.7 755.0 754.6 753.6 
754.3 751.8 752.2 753.5 752.1 753.4 752.6 752.8 
754.2 751.5 754.1 753.3 752.1 754.8 751.4 754.3 

2867.8 2934.6 2942.9 2917.9 2915.2 2912.7 2923.9 
2921.4 2927.2 2920.0 2921.5 2923.7 2932.1 2924.1 
2926.4 2918.0 2916.7 2891.1 2919.9 2908.7 2926.7 
2916.6 2935.4 2921.9 2929.5 2908.8 

==========================================================
Bryan (02/25/04) : Reorganized PPC page; Cleaned up usage of SyscallEnter().

1-way
788.2 793.9 782.4 790.5 789.9 792.0 789.9 789.7
786.5 797.0 795.0 788.9 792.0 789.6 790.1 788.4
793.7 795.4 792.6 790.8 790.6 788.2 790.1 789.2

4-way
3058.9 3094.1 3074.3 3072.8 3067.5 3067.2 3072.4 3073.1
3025.5 3097.8 3067.6 3070.1 3066.4 3079.0 3091.6 3062.6
3031.2 3075.2 3067.2 3063.0 3070.3 3059.8 3076.9 3070.8

==========================================================
Bryan (04/06/04) : New baseline numbers. Things seem to have improved slightly.

1-way
800.0 800.4 797.8 799.8 797.4 796.4 795.4 796.4
797.1 795.2 793.2 791.6 794.5 794.0 790.7 790.7
795.8 795.6 793.5 794.1 791.2 792.3 793.1 795.3

4-way
3085.2 3121.0 3117.2 3112.9 3115.5 3106.0 3101.7 3098.0
3073.1 3113.1 3111.0 3106.2 3110.3 3114.5 3095.5 3111.2
3077.7 3119.4 3113.9 3124.2 3107.8 3113.0 3103.6 3110.8

==========================================================
Bryan (04/06/04) : Moved disabled flag and dispatcher pointer.  Seems to have
		   degraded performance somewhat.  Don't know why.

1-way
781.6 781.8 779.8 781.3 777.2 776.3 777.5 774.3
785.0 780.3 777.8 779.5 778.4 776.2 779.1 775.3
784.5 780.3 777.3 778.8 776.0 779.7 774.3 772.6

4-way
3063.1 3062.2 3045.9 3072.6 3039.9 3051.5 3061.4 3052.6
3044.6 3050.7 3053.0 3069.2 3050.4 3056.9 3058.4 3044.8
3050.5 3078.6 3074.9 3065.0 3077.0 3044.9 3065.2 3069.5

==========================================================
Bryan (04/15/04) : Fixed a bug in PPCPrimitive.  It was causing the recent
		   performance drop.

1-way
802.1 800.9 795.5 795.6 794.2 794.7 795.5 793.9
801.9 801.7 797.3 799.4 799.1 796.9 796.8 796.4
801.7 800.8 797.3 797.7 793.6 796.4 797.2 791.6

4-way
3099.2 3134.2 3121.4 3107.6 3114.9 3089.2 3122.6 3099.8
3102.8 3123.5 3114.4 3119.3 3116.8 3122.8 3107.6 3124.9
3059.0 3115.9 3102.6 3090.3 3117.0 3121.3 3118.7 3119.8

==========================================================
Bryan (04/26/04) : New baseline numbers. Performance is off slightly.

1-way
798.1 798.8 793.2 799.2 794.4 794.1 794.7 793.3
798.0 802.5 799.9 798.3 795.9 794.8 795.2 793.3
799.0 800.5 794.8 795.3 791.7 794.4 791.6 792.4

4-way
3051.8 3106.7 3100.9 3107.0 3073.7 3092.0 3111.7 3090.4
3065.4 3122.2 3105.1 3108.1 3092.9 3099.2 3109.3 3088.7
3089.2 3124.8 3106.8 3100.3 3102.6 3110.4 3107.4 3104.5

==========================================================
Bryan (04/26/04) : Added r13 to VolatileState.  Performance may have slipped
		   a slight bit more.

1-way
798.5 797.6 793.6 794.3 791.8 791.1 790.2 791.2
796.6 799.3 795.2 798.1 791.6 795.2 793.8 795.0
797.1 797.2 794.3 796.6 794.6 795.7 793.5 792.8

4-way
3073.5 3101.5 3107.1 3097.5 3104.6 3114.7 3104.7 3100.2
3063.6 3114.9 3089.4 3098.8 3072.1 3092.5 3062.6 3094.2
3052.9 3091.9 3103.7 3112.8 3106.1 3109.2 3098.7 3092.2

==========================================================
Mark (05/24/04) : Baseline floor system on kmac (NB!) as of today.  These
		  are NOT comparable to any earlier or later k4 numbers.

1-way
941.0 935.8 931.9 932.3 931.3 932.9 934.4 934.0
943.4 936.6 932.3 935.2 930.4 930.8 929.3 931.1
942.9 939.5 937.5 935.6 936.5 933.5 933.2 935.0

1-way, 2 scripts
926.5 920.1 914.8 914.8 915.8 919.4 913.5 917.2
928.2 920.6 917.1 916.3 918.4 916.7 916.2 911.7
927.9 916.3 916.5 913.2 912.8 913.7 913.6 913.4

2-way
1718.1 1718.0 1690.6 1714.1 1710.6 1684.4 1707.0 1685.7
1722.9 1724.7 1724.8 1714.4 1715.8 1711.0 1710.9 1715.3
1722.5 1722.0 1717.0 1715.1 1710.8 1710.4 1707.7 1710.6

==========================================================
Mark (05/24/04) : Added large pages for the VmapsR area.  Performance on
		  kmac (NB!) improves in the range of 1.2% to 1.5%.

1-way
957.2 952.1 948.1 945.7 947.6 945.4 947.3 944.4
957.2 951.5 942.0 943.9 941.1 939.8 942.6 942.9
950.0 942.3 947.5 947.1 943.9 943.5 943.6 940.8

1-way, 2 scripts
938.4 932.2 932.5 931.5 933.0 931.8 928.6 929.3
938.3 934.7 929.9 930.1 930.2 930.6 929.6 927.3
940.0 933.8 929.9 928.0 927.1 929.7 927.7 930.2

2-way
1747.1 1744.7 1729.6 1729.8 1727.7 1735.9 1736.4 1723.0
1747.4 1741.2 1731.3 1722.7 1737.0 1723.4 1734.7 1723.2
1747.7 1743.2 1739.3 1738.7 1714.5 1730.6 1725.9 1736.8

==========================================================
Mark (06/02/04) : Baseline floor system on k4 as of today.  Performance looks
		  a little less than 04/26/04, for causes? unexplained here.

1-way
790.0 795.5 790.0 792.8 788.7 787.1 789.8 789.6
791.5 794.4 790.2 790.2 789.8 789.0 785.5 786.8
789.9 795.2 790.5 793.5 789.4 791.5 788.9 791.2

4-way
3037.3 3099.4 3094.2 3062.9 3095.6 3088.5 3090.7 3091.4
3050.8 3110.6 3087.2 3092.3 3086.6 3092.8 3112.6 3086.7
3028.9 3095.6 3094.6 3099.1 3085.5 3088.3 3099.5 3097.2

==========================================================
Mark (06/02/04) : Added large pages for the VmapsR area.  Should NOT change
		  performance of k4 (no large page hardware) and it doesn't.

1-way
796.1 790.5 791.7 791.4 790.3 790.3 788.9 788.5
796.6 793.6 792.8 791.2 793.0 791.0 789.1 791.6
796.2 792.3 786.7 790.8 789.0 789.3 790.1 788.2

4-way
3057.2 3106.0 3084.0 3088.7 3087.1 3076.2 3086.1 3091.8
3043.3 3057.7 3096.8 3104.3 3092.6 3102.8 3093.3 3095.1
3067.0 3085.0 3088.4 3101.4 3096.3 3092.9 3093.8 3087.3

==========================================================
Michal (06/05/04) : Update to new linux module.
		    Hardware regress generates status numbers.

801.6 797.6 798.3 797.9 797.2 798.1 798.6 795.0 
798.7 798.9 800.1 798.8 796.3 795.1 799.3 794.3 
799.2 798.2 798.8 795.3 794.8 795.2 795.3 793.6 
802.4 800.5 796.9 796.5 794.3 794.9 796.7 796.8 
798.2 797.9 797.3 798.2 798.8 795.5 796.3 794.2 
800.4 799.4 798.4 793.6 796.7 795.4 796.0 795.9 
800.6 798.5 797.6 796.3 796.4 794.3 796.5 795.9 
799.5 797.6 795.4 795.5 795.3 797.3 795.8 793.1 

3080.7 3113.7 3109.7 3113.0 3094.8 3101.5 3098.4 3089.7 
3061.9 3116.1 3116.2 3095.1 3103.5 3104.5 3107.9 3086.3 
3066.6 3111.2 3113.2 3076.3 3094.7 3093.9 3112.0 3098.2 
3054.0 3112.6 3123.5 3111.5 3100.3 3086.8 3073.7 3089.6 
3052.4 3117.6 3105.2 3089.2 3111.5 3111.4 3110.0 3088.2 
3090.5 3099.6 3096.8 3098.9 3100.7 3097.0 3087.6 3101.0 
3075.7 3097.1 3108.8 3111.7 3090.0 3093.3 3082.3 3103.3 
3067.2 3109.6 3111.6 3103.1 3100.7 3107.2 3106.4 3100.4 

==========================================================
Bryan (06/28/04) : Implemented proper Linux sandbox support.

1-way
802.9 800.0 795.3 798.9 794.9 795.7 792.1 793.6
801.2 803.3 795.0 795.9 794.0 795.3 795.3 793.0
804.3 800.2 794.3 795.4 794.0 794.1 795.4 795.6

4-way
3096.0 3149.4 3107.2 3133.0 3129.1 3132.6 3125.5 3135.5
3103.0 3109.7 3127.6 3134.8 3127.8 3133.2 3122.4 3123.2
3103.5 3150.8 3129.1 3135.6 3129.9 3132.9 3140.2 3122.4

==========================================================
Bryan (06/30/04) : Copied /usr/klib to ramfs for SDET.  For some reason,
		   performance is worse than it was when I was getting
		   /usr/klib accidentally via NFS.  Sheesh.

1-way
796.2 793.1 792.7 794.2 790.5 790.3 791.1 788.3 
796.9 790.9 792.1 788.4 790.2 791.1 790.4 788.6 
798.5 792.0 793.2 790.5 795.0 790.9 791.2 788.6 

4-way
3086.8 3118.5 3104.3 3098.7 3121.8 3110.1 3117.2 3096.4 
3081.2 3118.3 3105.2 3109.8 3087.9 3096.5 3097.3 3101.0 
3099.5 3125.4 3091.7 3092.7 3105.7 3091.0 3101.9 3102.5 

==========================================================
Bryan (07/01/04) : Further unified the native vs. sandbox syscall paths.
		   Did a bit more of the work in assembler so that syscall
		   parameters could stay in registers all the way to the
		   handler.

1-way
799.0 794.3 793.6 793.1 794.5 791.2 793.0 790.5 
797.9 797.8 795.2 795.3 794.1 793.2 796.3 793.4 
799.5 798.6 796.3 798.7 797.1 796.5 796.5 796.1 

4-way
3075.3 3128.1 3115.4 3120.3 3122.5 3109.1 3079.9 3105.2 
3054.0 3127.2 3118.9 3122.3 3111.2 3114.2 3109.8 3098.9 
3078.3 3115.2 3089.8 3105.9 3087.2 3111.2 3102.7 3106.1 

==========================================================
Bryan (07/01/04) : Improved sigreturn.  Performance is back up again, but
		   I doubt that there are enough signal deliveries in an
		   SDET run to account for it.

1-way
804.8 796.6 799.4 797.6 799.5 796.8 798.1 794.2 
802.9 800.0 796.8 798.1 796.7 799.3 794.2 793.3 
805.2 799.8 798.7 798.6 797.7 797.9 801.0 794.0 

4-way
3073.2 3116.4 3152.4 3150.2 3149.4 3114.5 3093.5 3139.6 
3087.4 3136.9 3146.4 3149.6 3137.7 3130.1 3136.6 3133.8 
3076.0 3133.9 3110.7 3129.9 3141.8 3102.3 3129.1 3136.6 

==========================================================
Bryan (08/12/04) : Fixed some problems with quiescing a process during fork.

1-way
807.6 803.1 802.1 801.1 800.7 798.8 798.6 800.2 
807.6 800.0 803.2 799.4 801.0 799.0 799.4 800.1 
806.8 802.1 802.9 801.8 800.6 801.5 800.2 800.1 

4-way
3124.3 3131.0 3122.2 3139.5 3095.8 3093.0 3111.2 3130.8 
3094.2 3151.0 3138.5 3115.6 3133.9 3142.4 3141.3 3106.7 
3083.1 3106.2 3099.6 3150.8 3126.0 3120.7 3128.5 3091.4 

==========================================================
Andrew (16/08/04) : HEAD before the following changes (unknown ~1% regression)

4-way
3109.0 3119.6 3125.2 3118.4 3074.0 3071.5 3079.1 3122.0
3095.2 3081.6 3081.1 3081.5 3121.0 3100.5 3110.7 3096.1
3074.4 3088.4 3122.6 3064.7 3127.6 3101.9 3083.6 3127.0

==========================================================
Andrew (16/08/04) : Added (disabled) Factory objects for Processes.
                    Made process objects hot-swappable (~0.5% regression)

4-way
3035.8 3107.6 3076.1 3077.6 3089.4 3087.1 3075.5 3077.6
3076.0 3079.4 3099.8 3093.0 3085.8 3083.6 3082.2 3095.4
3095.2 3085.8 3085.2 3084.0 3082.9 3087.0 3089.4 3094.6

==========================================================
Maria (8/30/04): Added /proc file system and sysctl for KERNEL/VERSION
1-way
794.6 791.2 793.9 792.3 791.2 791.0 790.9 790.7
796.6 792.9 791.0 792.8 790.9 790.4 788.4 787.5
796.4 788.8 791.0 792.8 792.0 790.1 791.5 789.1

4-way
3009.4 3023.3 3035.5 3031.0 3019.0 3039.4 3022.9 3027.2
3015.3 3036.9 3029.2 3028.5 3040.0 3039.3 3023.9 3031.6
3012.1 3033.6 3031.6 3022.3 3034.8 3020.2 3024.7 3008.1

==========================================================
Bryan (09/15/04) : Changed kernel scheduler to try harder to resume dispatchers
		   that were hard-preempted through no fault of their own.

1-way
796.1 792.2 792.5 793.2 792.0 791.6 791.4 790.9 
791.3 791.6 790.1 788.2 788.7 786.4 788.3 786.3 
796.2 790.5 790.7 787.5 791.5 792.3 791.9 787.5 

4-way
2996.2 3030.8 3031.9 3025.6 3021.6 3035.5 3030.2 3035.3 
3018.2 3027.7 3021.1 3041.1 3038.3 3034.3 3031.4 3037.3 
3021.3 3011.5 3012.6 3001.3 2996.5 3007.1 3000.4 3008.0 

==========================================================
Bryan (09/16/04) : Re-enabled time-slicing of kernel threads.  Performance is
		   off slightly because the kernel has a very short
		   time-slicing interval.

1-way
791.8 786.7 781.9 785.4 785.2 787.0 786.7 785.4 
790.5 784.1 787.0 784.7 785.2 784.8 785.7 784.5 
790.3 785.0 783.7 786.7 786.9 785.5 785.3 785.5 

4-way
2984.8 3019.6 3023.2 3027.1 3015.6 3013.7 3009.8 3006.7 
3001.3 3001.3 3004.7 3016.1 3036.7 3013.6 3017.1 3001.7 
2993.0 3023.8 3009.8 3008.1 3013.2 3018.2 3008.2 3019.5 

==========================================================
Bryan (09/22/04) : Spread procfsServer across all the processors.  We were
		   using remote PPCs to talk to it.

1-way
790.1 789.5 786.3 787.2 786.3 786.1 784.5 784.7 
791.5 788.0 789.0 785.0 785.1 781.7 785.7 782.7 
789.8 790.1 785.5 787.7 786.4 784.8 785.1 786.1 

4-way
3059.9 3070.4 3081.9 3086.2 3088.0 3087.0 3088.4 3080.6 
3058.6 3079.5 3083.6 3082.8 3088.6 3077.6 3078.3 3089.6 
3052.4 3089.0 3087.4 3078.4 3087.7 3073.9 3087.6 3074.8 

==========================================================
Dilma (10/01/04) Baby step in achieving flow control of I/O requests
                 being sent from memory manager to file system: one
                 object in the file system receives the requests (instead
                 of the specific object representing a file).

1-way
801.7 794.8 792.6 793.4 791.8 789.3 792.9 787.7
798.2 797.9 793.4 792.1 792.7 795.8 792.0 791.0
799.0 800.2 792.1 793.8 794.8 792.4 789.5 790.2

4-way
3063.5 3112.3 3087.4 3091.7 3092.1 3086.5 3084.2 3082.7
3065.8 3109.2 3093.3 3083.8 3096.0 3087.8 3088.0 3090.7
3064.2 3055.4 3095.1 3088.4 3093.8 3087.8 3093.9 3084.4

==========================================================
Orran (10/01/04) : Major cleanup of paging infrastructure, got rid of
		   regular timer kicking pager (now just run when memory low)
		   put proper blocking in PMRoot when memory critical,
		   push back memory to page allocator on deallocates
		   aggressively when running low on memory... added new
		   flags to allocates to say if pageable...

1-way
788.3 791.7 787.8 789.6 790.0 787.0 779.9 781.1
796.9 791.8 792.7 787.3 791.5 790.6 790.2 791.2
798.8 794.6 794.2 792.5 791.4 792.6 791.2 791.4

4-way
3042.9 3105.5 3084.9 3085.1 3084.2 3082.2 3085.8 3088.2 
3035.5 3085.9 3083.6 3085.0 3087.8 3077.8 3076.7 3081.6
3033.2 3089.3 3078.6 3081.4 3079.3 3074.2 3078.8 3077.3
3036.5 3069.4 3059.3 3061.3 3057.7 3063.8 3055.1 3065.3
3032.6 3073.6 3055.6 3075.5 3070.5 3055.0 3074.1 3066.2
/* this is with paging infrastructure turned on to my defaults, committing */
3028.4 3071.4 3075.4 3071.3 3062.4 3068.0 3049.4 3071.1

==========================================================
Dilma (10/4/04) : added an object (KernelPagingTransport) to the
memory manager to talk to the file system (instead of having each
FR sending asynchronous calls to a specific ServerFile object, we
have one object in the kernel talking to one object on the file
system (for each file system)). Coming soon: flow control, so we
can finally run I/O intensive apps in k42 :-))

1-way
795.8 790.3 788.8 789.3 790.5 792.0 789.4 789.2 
795.9 791.7 785.8 790.9 787.6 787.7 786.9 786.6
797.5 795.2 789.6 789.1 789.4 790.8 788.6 783.9

4-way
3056.6 3078.7 3070.0 3052.6 3062.5 3068.0 3076.8 3062.3
3045.4 3083.6 3064.3 3070.1 3062.6 3060.4 3078.2 3074.5
3051.7 3079.2 3072.5 3083.4 3080.1 3076.3 3072.0 3071.3

==========================================================
Dilma (10/11/04) : More changes in the interaction of
MM and FS. The I/O requests (startFillPage, startWrite)
go through a shared memory area.

1-way
796.1 795.1 791.4 788.8 788.2 787.9 787.0 789.7
796.2 793.0 790.0 789.8 789.3 790.5 789.3 786.2
796.8 791.5 792.0 790.7 790.3 789.4 787.2 788.9
795.7 791.2 793.9 789.7 793.2 791.2 788.5 792.5

4-way
3046.3 3085.5 3064.3 3065.1 3058.2 3067.7 3025.8 3068.5
3041.8 3082.9 3068.1 3056.1 3075.3 3060.3 3063.9 3060.6
3035.0 3082.2 3060.1 3072.0 3068.4 3067.0 3079.6 3076.1

==========================================================
Dilma (10/19/04) : Added simple flow control of interaction between
                   MM and FS. We have a bounded number of
                   ongoing requests.
		   
1-way
796.3 792.2 790.5 790.3 789.9 789.2 789.1 789.8
796.3 791.5 790.8 790.1 788.9 790.1 788.4 790.8
792.9 791.7 788.2 790.8 788.5 789.0 790.4 787.7

4-way
3046.5 3068.2 3059.1 3068.2 3065.1 3059.2 3059.2 3066.5
3037.5 3072.3 3056.9 3062.1 3057.4 3065.2 3065.4 3066.2
3037.2 3067.4 3059.6 3064.3 3063.0 3063.6 3068.9 3069.8


==========================================================
Orran (10/20/04) : Whole pile of miscellaneous cleanup in paging
infrastructure.  

1-way
793.9 790.8 789.4 790.4 788.9 788.7 786.0 785.9

4-way
3058.3 3084.0 3080.8 3068.4 3084.2 3074.4 3081.3
3024.5 3088.9 3087.2 3067.8 3077.1 3086.2 3065.9 3076.0

==========================================================
Dilma (10/22/04) : giving priority to read requests in the
KernelPagingTransport. This code is not even used during
a running SDET (/ram doesn't send read or write requests).

1-way
791.6 793.8 789.9 788.9 788.1 786.9 786.3 789.0
791.5 789.9 788.0 790.1 787.4 788.8 789.2 786.7
796.1 790.0 789.2 785.7 790.2 785.4 786.2 787.6

4-way
3039.9 3067.4 3052.7 3068.5 3062.7 3070.4 3070.8 3068.7
3048.6 3082.4 3077.5 3076.7 3065.6 3082.4 3077.9 3077.1

==========================================================
Orran (10/28/04): new scheme for queueing FCM's for call backs when
out of resources for writting pages.

1-way
790.2 788.7 782.6 786.1 783.9 783.3 784.9 786.2
790.1 785.7 783.1 784.3 782.6 785.9 782.4 781.2

4-way
3007.4 3049.5 3040.6 3051.4 3044.2 3036.3 3037.6 3046.0
3017.1 3057.2 3043.6 3048.9 3042.7 3044.7 3051.5 3049.6
--- above wiht paging enabled -- this is with it disabled, no diff
3020.0 3047.1 3037.3 3043.5 3032.0 3043.0 3044.2 3026.2
3009.5 3049.0 3043.2 3036.0 3027.9 3044.0 3036.7 3031.2

==========================================================
Dilma applying patch from Andrew(11/1/04): Added version number
to Factory and committing Jonathan's code for FCMPartitioned (from
February's DARPA demo). Neither code is actually used during
regress or sdet.

1-way
796.1 791.0 791.5 788.2 789.1 783.8 788.5 783.3 
791.4 792.4 786.5 788.7 783.1 783.3 781.8 781.0
790.7 789.0 789.1 787.2 786.2 784.9 785.9 782.3

4-way
3043.3 3070.4 3062.1 3069.1 3049.7 3051.5 3064.7 3056.1
3036.2 3077.9 3062.8 3069.7 3066.4 3057.2 3056.7 3067.4
3031.9 3071.4 3058.0 3056.1 3063.1 3046.6 3059.9 3052.3


==========================================================
Bob sanity check before modifying reousrce manager also after paging enabled

1-way
791.6 790.0 789.0 790.2 787.4 788.1 789.1 788.2
794.1 786.5 787.0 785.4 785.8 785.4 785.4 784.5
792.0 790.9 787.0 789.2 784.3 787.7 785.5 786.7

4-way
3060.0 3074.1 3062.5 3058.6 3055.0 3068.6 3054.0 3054.3
3044.4 3052.4 3053.8 3059.7 3054.8 3070.0 3065.9 3055.7
3039.2 3068.4 3061.7 3072.7 3051.2 3055.3 3063.3 3056.8

==========================================================
Amos commit of page fault counting patch: December 16, 2004.
Committing patch because it shows no performance hit, but note that
some degradation seems to have occurred betweeen November 1, 2004 and
now.

1-way (Before patch.)
783.7 784.5 779.8 779.9 781.9 781.3 780.1 780.8
776.0 775.9 776.0 775.6 772.4 774.4 775.5 776.0
773.0 778.3 773.5 775.0 773.5 775.0 773.1 775.3
 Min.   :772.4
 Median :776.0
 Mean   :777.1
 Max.   :784.5
1-way (After patch.)
785.9 785.6 780.8 784.8 779.7 784.0 778.9 781.3
776.5 775.6 775.3 774.6 773.8 774.5 774.9 774.0
772.6 778.5 773.0 776.3 770.9 773.4 773.4 771.7
 Min.   :770.9
 Median :775.5
 Mean   :777.1
 Max.   :785.9

4-way (Before patch.)
2999.4 3052.8 3040.3 3039.1 3047.8 3039.1 3045.7 3040.7
3025.4 3032.9 3029.3 3034.9 3033.6 3028.6 3033.7 3027.0
3013.4 3016.8 3016.1 3015.8 3011.4 3015.9 3013.2 3021.6
 Min.   :2999
 Median :3029
 Mean   :3028
 Max.   :3053
4-way (After patch.)
3007.6 3050.5 3049.2 3046.2 3043.7 3045.9 3035.0 3042.2
3030.0 3033.7 3024.7 3026.7 3025.7 3026.4 3040.4 3021.9
3023.9 3020.1 3024.0 3027.5 3023.4 3017.8 3027.8 3025.3
 Min.   :3008
 Median :3027
 Mean   :3031
 Max.   :3050

==========================================================
Dilma: no change of mine, just trying to document what is the
       current state of the world Feb 16th, 2005
       IGNORE THIS. We can't reproduce it, I probably
       typed the wrong control flags on console (I ran this by
       hand, instead of using knightly-like sysinit).
       SEE NUMBERS BELOW.

1-way
786.1 785.9 782.4 782.9 782.4 782.7 783.7 784.5
787.0 787.2 785.6 783.1 782.3 784.4 784.2 782.6
784.9 785.8 785.0 786.8 784.2 783.5 778.8 779.7

4-way
2810.4 2810.6 2804.4 2808.7 2786.0 2794.6 2801.3
(2nd experiment locked up)
2818.6 2809.4 2802.5 2804.6 2796.1 2799.6 2802.8 2791.9
2803.2 2813.6 2800.9 2799.1 2802.0 2786.4 2793.2 2796.7
2812.6 2802.1 2806.8 2803.6 2801.6 2799.2 2799.0 2795.3
(6th experiment locked up)

==========================================================
Dilma, Feb 17th 05, for sanity check

1-way
784.1 779.3 775.7 780.0 778.7 780.5 777.1 776.0
783.5 781.7 778.8 780.7 777.5 778.6 780.8 782.0
780.0 781.0 781.2 781.2 779.8 776.5 778.7 777.4

4-way
3013.7 3047.0 3046.6 3037.6 3012.9 3029.2 3034.2 3028.1
3014.4 3053.3 3028.3 3028.0 3029.2 3031.2 3027.4 3013.5
3029.3 3049.1 3036.7 3038.5 3042.5 3031.6 3036.1 3036.0

==========================================================
Bryan (02/22/05) : Fixed soft-interrupt-setting bug in KernelInterruptContinue.

1-way
776.5 777.0 774.9 776.2 776.1 775.4 773.9 775.6 
776.7 777.3 772.6 774.7 778.1 772.8 771.5 772.6 
774.5 773.4 773.1 772.9 771.6 772.3 769.8 771.3 

4-way
3018.9 3031.8 3024.2 3034.8 3035.5 3019.2 3038.1 3030.3 
3017.4 3029.5 3017.8 3040.5 3020.8 3022.9 3032.3 3036.7 
3021.5 3039.6 3037.5 3036.6 3027.2 3034.8 3035.6 3023.0 

==========================================================
Bryan (04/13/05) : New baseline numbers.  It's been awhile.

1-way
769.7 766.7 770.3 770.7 770.0 769.5 765.8 769.3 
778.8 774.1 776.1 771.7 773.7 774.9 773.8 773.0 
777.1 771.7 775.3 774.0 772.6 773.1 772.1 774.1 

4-way
2986.2 3007.7 3014.2 3011.3 3017.0 3015.5 3020.5 3014.3 
3012.1 3023.4 3009.3 3019.4 3014.2 3003.6 3018.8 3021.3 
3019.3 3030.1 3010.2 3011.7 3028.3 3018.3 3032.0 3025.4 

==========================================================
Bryan (04/13/05) : Fixed problems with running more VPs than PPs.

1-way
769.6 769.9 763.9 768.9 766.3 766.1 764.4 765.8 
769.4 766.9 765.2 767.7 763.6 766.1 768.5 766.1 
769.5 766.6 765.7 766.0 766.8 764.0 765.1 765.5 

4-way
3009.2 3027.4 3004.9 3009.7 3013.8 3001.7 3015.9 3018.5 
3005.9 3026.1 3003.9 2995.0 3000.0 2993.3 3008.9 3001.6 
3008.2 3018.0 3005.1 3000.1 3012.0 3012.8 3014.5 3022.0 

==========================================================
Dilma (04/15/05) : Floor system, no change of mine, just documenting
                   state of the world

1-way
769.7 768.0 767.6 765.0 765.4 768.6 769.5 765.8 
771.7 770.8 770.4 767.6 766.2 769.1 769.4 766.5 
767.7 769.2 764.7 763.7 766.9 763.5 765.9 766.1 

4-way
2994.0 3003.7 3007.0 3003.1 3007.9 3009.5 2996.1 2972.2 
2992.5 3005.5 3008.3 2997.9 3000.8 2987.8 2990.3 2960.0 
2984.4 3010.0 2999.6 3013.8 3006.4 2990.4 2993.8 3000.7 

==========================================================
Dilma (04/15/05) : Just cosmetic changes (reducing the situations
                   where we get shadow variable warnings if building
                   with -Wshadow)

1-way
769.9 770.1 767.9 762.7 766.3 768.0 764.7 766.9 
768.4 770.5 768.1 768.4 766.2 765.3 762.7 763.6 
768.3 765.1 767.2 763.2 766.9 766.3 763.9 766.4 

4-way
2995.7 3003.0 3002.2 2978.5 2985.7 2970.0 2971.6 2956.9 
2991.2 3005.5 3001.9 2987.0 2990.9 2975.2 2981.5 2987.7 
2993.4 3011.1 3008.7 3000.9 2994.4 2983.9 2984.3 2964.2 

==========================================================
Bryan (05/16/05) : Restructured LinuxSock data-availability and EOF protocols.

1-way
774.6 772.3 771.0 771.1 771.5 769.5 771.0 769.2 
772.7 771.9 770.3 767.5 769.7 768.7 768.6 770.8 
773.5 772.8 770.1 772.2 770.7 769.3 767.9 770.7 

4-way
3001.7 3020.5 3011.3 3019.2 2998.2 3008.0 2994.9 2989.4 
2999.1 3023.6 3018.9 3003.2 3000.0 3006.7 3000.1 3000.3 
2971.7 3012.8 3011.0 3011.4 3006.9 2988.9 2999.6 2984.3 

==========================================================
Bryan (05/27/05) : Fixed a bug in the resetting of Linux timeouts, and
		   changed LinuxSock to always hold the lock while calling
		   into Linux code.

1-way
782.4 777.6 780.0 779.6 777.4 777.7 780.6 777.3 
779.2 779.6 774.7 776.2 775.7 776.4 774.2 776.2 
779.8 773.7 773.6 774.2 774.2 772.0 775.4 774.7 

4-way
3029.1 3050.7 3028.6 3039.8 3031.2 3030.4 3021.1 3029.9 
3020.4 3048.8 3023.7 3048.3 3032.4 3027.5 3032.1 3025.3 
3027.8 3037.6 3049.4 3038.5 3037.0 3044.8 3039.3 3032.0 

==========================================================
Bryan (06/06/05) : Fixed updating of the Linux xtime variable, and implemented
		   a rudimentary boot-time timebase syncing for xserves.
		   I can't explain the apparent fall-off in performance.

1-way
773.1 770.0 769.3 769.5 767.2 769.0 769.6 771.8 
773.6 771.8 771.2 770.8 770.3 770.4 771.4 771.6 
773.1 771.4 767.6 770.7 769.1 770.9 769.1 770.2 

4-way
3006.6 3033.3 3012.4 3025.7 3013.9 2995.2 3003.8 2987.9 
2992.0 3019.9 2996.0 3018.2 3011.2 3017.6 3008.3 3004.3 
3005.8 3028.1 3011.8 3011.1 3023.6 3005.4 3000.6 3020.0 

==========================================================
Chris (06/22/05) : Fixes bug in FCMCommon which meant that PMLeafs
		   were not being used in most cases.

1-way
768.2 767.5 767.6 767.7 767.4 768.3 770.0 766.9
768.8 769.6 765.3 769.1 768.6 769.1 767.4 767.9
768.7 768.6 768.1 768.2 768.6 766.3 770.6 764.9

4-way
2979.0 3008.4 3001.8 3000.2 2994.3 2996.9 3002.4 2997.4
2980.7 3006.5 3002.8 2998.8 2987.4 2988.5 2995.4 3002.6
2963.7 2991.4 2991.9 2993.8 2996.2 2987.7 2981.7 2981.5

==========================================================
Bryan (07/15/05) : Cleaned up data-availability machinery.

1-way
771.7 769.8 772.1 768.8 775.1 769.4 767.9 767.9 
772.6 771.4 773.6 768.8 770.9 766.7 769.1 769.2 
769.4 767.1 769.1 770.0 769.1 767.6 766.6 764.3 

4-way
2981.0 2991.9 2989.1 2988.4 3001.9 3010.5 3009.4 2998.7 
2980.6 2997.6 3008.3 2995.6 3003.6 3002.1 3007.2 2994.4 
2981.3 3004.3 3007.9 2987.7 3009.6 3017.6 3004.9 3001.9 

==========================================================
Dilma (08/02/05) : We moved to the new package image 
                   (partDeb.Img.4, a gentoo file system image)
                   weeks ago, and here are the new numbers.
                   Note from 8/19: the script was measuring
                   the whole execution; to see numbers with
                   gentoo and the usual timing procedure,
                   see entry of 8/19.
1-way
724.3 720.0 720.0 720.0 722.9 720.0 721.4 718.6 
727.3 724.3 725.8 722.9 722.9 722.9 722.9 721.4 
725.8 724.3 721.4 721.4 721.4 720.0 720.0 720.0 

4-way
2763.9 2790.7 2779.9 2785.3 2785.3 2779.9 2769.2 2763.9 
2763.9 2785.3 2779.9 2774.6 2779.9 2779.9 2774.6 2763.9 
2763.9 2790.7 2796.1 2779.9 2779.9 2790.7 2779.9 2774.6 

==========================================================
Bryan (08/11/05) : Changed fork to avoid creating a child ProcessWrapper
		   in the parent.

1-way
727.3 721.4 724.3 721.4 721.4 718.6 721.4 718.6 
721.4 715.7 720.0 714.3 715.7 717.1 717.1 718.6 
727.3 718.6 718.6 715.7 717.1 717.1 720.0 717.1 

4-way
2769.2 2807.0 2796.1 2785.3 2785.3 2790.7 2779.9 2785.3 
2769.2 2801.6 2779.9 2790.7 2790.7 2796.1 2785.3 2790.7 
2769.2 2779.9 2774.6 2774.6 2763.9 2774.6 2763.9 2774.6 

==========================================================
Dilma (08/19/05): running sdet again, now that we have gentoo
                  and not timing the whole execution.
               
1-way
766.8 764.3 763.1 760.4 760.0 760.2 759.7 762.2 
764.8 762.5 761.4 760.9 760.3 760.2 758.5 760.2 
768.2 761.6 762.4 761.2 761.3 761.1 760.1 760.5 

4-way
2926.0 2960.8 2969.8 2957.1 2953.9 2943.1 2947.8 2939.6 
2931.6 2948.4 2956.9 2945.7 2944.2 2942.2 2931.8 2942.9 
2928.2 2963.2 2954.9 2961.8 2952.2 2953.9 2941.4 2955.4 

==========================================================
Bryan (08/25/05) : Changed FCMComputation::forkCopy() to use
		   PageCopy::Memcpy() instead of memcpy(), and changed
		   PageCopy::Memcpy() to once again use Marc's algorithm
		   rather than the CopyPage routine borrowed from Linux.
		   The important difference is the use of dcbz instructions.

1-way
896.7 888.3 892.4 887.3 888.2 887.8 887.0 889.1 
893.4 889.4 888.7 887.0 884.4 881.6 883.5 882.3 
896.9 882.7 891.4 888.3 889.7 887.7 887.4 888.6 

4-way
3410.3 3447.9 3441.6 3449.0 3460.1 3467.8 3444.4 3426.6 
3419.3 3451.6 3443.5 3437.4 3431.8 3435.8 3436.9 3426.7 
3420.7 3465.8 3452.7 3456.6 3454.4 3465.5 3448.0 3435.1 

****************************************************************************
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
****************************************************************************
----------- KEEP THIS AT BOTTOM --------------------------------------------
HOW TO RUN EXPERIMENT IS AT BEGINNING OF FILE. IF YOU CHANGE EXPERIMENT
FLAGS... AND DON'T CHANGE BEGINNING OF FILE YOU ARE DEAD MEAT!!!!!
----------- KEEP THIS AT BOTTOM --------------------------------------------

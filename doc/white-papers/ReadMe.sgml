<!--
  K42: (C) Copyright IBM Corp. 2001.
  All Rights Reserved

  This file is distributed under the GNU LGPL. You should have
  received a copy of the license along with K42; see the file LICENSE.html
  in the top-level directory for more details.

  $Id: ReadMe.sgml,v 1.9 2003/09/22 20:28:39 bob Exp $
-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [

<!-- To disable review comments replace INCLUDE with IGNORE -->
<!ENTITY % review "INCLUDE" >

<!-- CVS gives us these -->
<!ENTITY user "$Author: bob $">
<!ENTITY date "$Date: 2003/09/22 20:28:39 $">
<!ENTITY revision "$Revision">

<!-- define and read in entities from this file -->
<!ENTITY % wp.ent SYSTEM "wp.ent">
%wp.ent;

<!-- URLs handy for this document -->
<!ENTITY dbel.url "&dbhtml.url/refelem.html">
<!ENTITY rpm.url "http://rpmfind.net">
<!ENTITY rpmq.url "&rpm.url;/linux/rpm2html/search.php?query">
]>


<!--
    In DocBook terms, a white paper is and article.
-->
<article status="draft" lang="en">

    <title>Read Me</title>
    <subtitle>How to write a DocBook Whitepaper</subtitle>
    &K42ArtHeader;



  <abstract>
    <para>
      This document attempts to describe and explain the process of
      creating a K42 <quote>white paper</quote>.  This document is a
      work in progress and will evolve as the process develops.
    </para>
  </abstract>

  <section id="intro">
    <title>Introduction</title>
    <para>
      The K42 group has chosen DocBook as our documentation
      model. This means that our white papers are written in SGML
      utilizing the DocBook dtd.  The process does take some learning,
      but we are hoping it will be reasonably easy to enable all the
      features that this model provides and at the same time make
      authoring as simple as possible.
    </para>
  </section>
  <section id="start">
    <title>Getting Started</title>
    <para>
      Writing and rendering a document using DocBook requires the use
      of SGML tags to mark regions of text and give them some meaning,
      as well as a set of tools to render or build and display the
      final output.
    </para>
    <section id="refs">
      <title>Resource Reference</title>
      <para>
	There are several resources for DocBook that should be
	useful. In particular you should be armed with at least the
	<ulink url="&dbel.url;">
	  <citetitle pubwork="section">DocBook Element Reference</citetitle>
	</ulink> manual which is part of the
	<ulink url="&db.url;">
	  <citetitle pubwork="book">DocBook: The Definitive Guide</citetitle>
	  <citation><xref linkend="Walsh99"></citation>
	</ulink>.
	You may also want to consider this
	<ulink url="http://nis-www.lanl.gov/~rosalia/mydocs/docbook-intro/docbook-intro.html">tutorial</ulink>
	on getting started by Mark Galassi.
      </para>
    </section>
    <section id="tools">
      <title>Required Tools</title>
      <para>
	The tools necessary to author, build and render documents are
	as follows:
	<itemizedlist spacing="compact">
	  <listitem id="ed">
	    <para>
	      A text editor such as:
	      <simplelist type="inline">
		<member><ulink url="&emacs.url">Emacs</ulink></member>
		<member><ulink url="&xemacs.url">XEmacs</ulink></member>
		<member>
		  <citerefentry>
		    <refentrytitle><command>vi</command></refentrytitle>
		    <manvolnum>1</manvolnum> 
		  </citerefentry>
		</member>
		<member>or even <command>notepad</command>.</member>
	      </simplelist>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      A Diagramming package that can translate to
	      <acronym>EPS</acronym> for <trademark
	      class="registered">PostScript</trademark> printing and
	      <acronym>JPEG</acronym> or <acronym>PNG</acronym> for
	      inline publications.  Currently we support both
	      <simplelist type="inline">
		<member>
		  <ulink url="http://www.xfig.org">XFig/TransFig</ulink>
		</member>
		<member>
		  and
		  <ulink url="http://www.lysator.liu.se/~alla/dia">Dia</ulink>
		  version 0.88.1 or greater
		</member>
	      </simplelist>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      A
	      <citerefentry>
		<refentrytitle><command>make</command></refentrytitle>
		<manvolnum>1</manvolnum>
	      </citerefentry>
	      program that drives the building process. Though almost
	      any <command>make</command> program will do, K42
	      officially supports only <ulink url="&make.url;">GNU
	      Make</ulink>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      An implementation of <acronym>DSSSL</acronym>, a style
	      language to format SGML or XML documents. There are two
	      popular packages that perform this task:
	      <simplelist type="inline">
		<member>
		  <ulink url="http://openjade.sourceforge.net">OpenJade</ulink>
		</member>
		<member>and James Clark's
		  <ulink url="http://www.jclark.com/jade/">Jade</ulink>
		</member>
	      </simplelist>
	      . We currently use OpenJade version 1.3 or greater but
	      they seem to be interchangeable.
	    </para>
	  </listitem>
	  <listitem id="pstools">
	    <para>
	    If PostScript output is required then both a
	      <ulink url="http://www.latex-project.org/">LaTex</ulink>
	      package that is Web2c based such as
	      <ulink url="http://www.tug.org/teTeX/">teTex</ulink>,
	      and the
	      <ulink url="http://jadetex.sourceforge.net/">
		jadeTex
	      </ulink>
	      package are required.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	Other tools, though not required, can make authoring a white
	paper that much easier.  The use of the
	<citerefentry>
	  <refentrytitle><command>nsgmls</command></refentrytitle>
	  <manvolnum>1</manvolnum>
	</citerefentry>
	command can check your document for errors without actually
	rendering it.
      </para>
      <para>
	If your editor of choice is Emacs or XEmacs, then you will
	find that proper installation of the <ulink
	url="http://www.lysator.liu.se/~lenst/about_psgml">PSGML</ulink>
	,version 1.2.2 or later,to be invaluable.
      </para>
      <section id="rh">
	<title>
	  For <trademark class="registered">Red Hat</trademark> Linux
	</title>
	<para>
	  If you have a Red Hat Linux distribution then you can grab
	  the following <acronym>RPM</acronym> packages and install
	  them on your machine:
	  <simplelist>
	    <member>
	      <ulink url="&rpmq.url=stylesheets">
		<application class="software" id="sty">stylesheets-0.13rh-4
		</application>
	      </ulink>
	    </member>
	    <member>
	      <ulink url="&rpmq.url=openjade">
		<application class="software">openjade-1.3-6</application>
	      </ulink>
	    </member>
	    <member>
	      <ulink url="&rpmq.url=jadetex">
		<application class="software">jadetex-2.7-4</application>
	      </ulink>
	    </member>
	    <member>
	      <ulink url="&rpmq.url=tetex">
		<application class="software">tetex-1.0.6-10</application>
	      </ulink>
	      and friends
	    </member>
	  </simplelist>
	  <note>
	    <para>
	      All packages except for
	      <link endterm="sty" linkend="sty"></link>
	      are installed by default.
	    </para>
	  </note>

	  These packages can be easily downloaded from
	  <ulink url="rpm.url">Rpmfind</ulink> website.
	</para>
      </section>
      <section id="win">
	<title>For Win32 distribution</title>
	<warning>
	  <para>
	    None of this has been tested, but some
	    <emphasis>brave</emphasis> sole may want to try it. If you
	    get this working <emphasis>please</emphasis> update this
	    document.
	  </para>
	</warning>
	<para>
	  All the tools necessary to use author, build, and render
	  <acronym>HTML</acronym> white papers are available for Win32
	  system.
	  <itemizedlist spacing="compact">
	    <listitem>
	      <para>
		Your choice of editor is up to you, see
		<link linkend="ed">editors</link> in
		<xref linkend="tools">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		GNU Make is available from the
		<ulink url="http://unxutils.sourceforge.net/">
		  Native Win32 ports of some GNU utilities
		</ulink> site. This package is handy because it does
		not require the
		<ulink url="http://sourceware.cygnus.com/cygwin/">
		  cygwin
		</ulink>
		tools.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		OpenJade executable is available at the download
		section of the
		<ulink url="http://sourceforge.net/projects/openjade/">
		  sourceforge
		</ulink>
		site.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		DocBook style sheets are available at the download
		section of the
		<ulink url="http://sourceforge.net/projects/docbook/">
		  sourceforge
		</ulink>
		site.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  It should also be possible to install the
	  <link linkend="pstools">jadeTex</link>
	  package on top of an installed LaTex distribution.
	</para>
      </section>
    </section>
  </section>
  <section id="dir">
    <title>Directory Structure</title>
    <para>
      This directory contains several files that represent the white papers.
      <variablelist>
	<varlistentry>
	  <term><ulink url="wp.dsl"><filename>wp.dsl</filename></ulink></term>
	  <listitem>
	    <para>
	      Contains the a <acronym>DSSSL</acronym> style sheet
	      information that defines what a white paper look like on
	      paper or online. It is written in a combination of
	      <acronym>SGML</acronym> and scheme.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><ulink url="wp.ent"><filename>wp.ent</filename></ulink></term>
	  <listitem>
	    <para>
	      Contains several <acronym>SGML</acronym> entities that
	      can be used by all documents. In a general sense, these
	      entities are like string variables where you can
	      substitute an entity reference. An example we use the
	      entity <sgmltag class="genentity">libc</sgmltag> to
	      represent the phrase <quote>GNU C Library</quote>,  This
	      is especially handy for <acronym>URL</acronym>'s.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <ulink url="Template.sgml">
	      <filename>Template.sgml</filename>
	    </ulink>
	  </term>
	  <listitem>
	    <para>
	      This is a skeleton file that can be copied and used to
	      start a new white paper. It contains copyright and
	      header information for the paper and some simple DocBook
	      constructs such as sections with titles and others (see
	      <xref linkend="new">).
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <ulink url="KitchenSink.sgml">
	      <filename>KitchenSink.sgml</filename>
	    </ulink>
	  </term>
	  <listitem>
	    <para>
	      This file contains several examples in DocBook on how to
	      do various things such as figures, tables, block quotes,
	      etc.  It is a living document, authors who use a new
	      DocBook tag to perform a special task should place there
	      example in this document.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <filename><replaceable>filename</replaceable>.sgml</filename>
	  </term>
	  <listitem>
	    <para>
	      These files each represent a single white paper or a
	      collections of white papers in a book form.  Simply put,
	      each sgml file represents the beginning of a single
	      renderable document.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <ulink url="figures">
	      <filename class="directory">figures</filename>
	    </ulink>
	  </term>
	  <listitem>
	    <para>
	      This directory contains all the figures for all the
	      white papers. These are in a separate directory to
	      reduce clutter in this directory and to locate them in a
	      single place for all K42 documentation to use.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>
	    <ulink url="Makefile">
	      <filename>Makefile</filename>
	    </ulink>
	  </term>
	  <listitem>
	    <para>
	      This file contains all the make rules and dependencies
	      to build the documents. See <xref linkend="build">.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </para>
  </section>

  <section id="build">
    <title>Building the White Papers</title>
    <para>
      All documents can be built in this directory by using the
      <command>make</command> command. The following targets are supported:
      <itemizedlist spacing="compact">
	<listitem>
	  <para>
	    <option>all</option> or <option>default</option>: build
	    all known documents rendering both <acronym>HTML</acronym>
	    PostScript based on the <acronym>SGML</acronym> files
	    listed in the <filename>Makefile</filename> macro
	    <envar>DOCSRCS</envar>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <option>html</option>: build only the
	    <acronym>HTML</acronym> output of the
	    <envar>DOCSRCS</envar> files.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <option>ps</option>: build only the PostScript output of
	    the <envar>DOCSRCS</envar> files.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <option><replaceable>filename</replaceable>.<optional>html|ps</optional></option>:
	    build only the <acronym>HTML</acronym> or PostScript
	    output of the white paper that
	    <filename><replaceable>filename</replaceable>.sgml</filename>
	    represents.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <option><replaceable>filename</replaceable></option>:
	    build both the <acronym>HTML</acronym> and PostScript
	    output of the white paper that
	    <filename><replaceable>filename</replaceable>.sgml</filename>
	    represents.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="new">
    <title>Adding a New White Paper</title>
    <para>
      Adding a new white paper to this directory is rather simple in
      comparison to authoring the actual paper. Just do the following:
      <orderedlist numeration="arabic" spacing="compact">
	<listitem>
	  <para>
	    Copy <filename>Template.sgml</filename> to the filename
	    you wish to create, for example,
	    <filename><replaceable>whitepaper</replaceable>.sgml</filename>.
	  </para>
	</listitem>
	<listitem id="start.add">
	  <para>
	    Edit file to taste.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Build document periodically by entering
	    <userinput>
	      <command>make <option><replaceable>whitepaper</replaceable></option></command></userinput>.

	    This will build both <acronym>HTML</acronym> and
	    PostScript.
	  </para>
	</listitem>
	<listitem id="end.add">
	  <para>
	    View
	    <filename><replaceable>whitepaper</replaceable>.html</filename>
	    with your favorite web browser or print or view, with
	    <ulink url="ghostview">GhostView</ulink>,
	    <filename><replaceable>whitepaper</replaceable>.ps</filename>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Repeat steps
	    <xref linkend="start.add"> to
	    <xref linkend="end.add"> until finished.
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </section>

  &bib.sgml;
</article>

<!--
Local Variables:
sgml-validate-command: "nsgmls -s %s %s"
gml-indent-data: t
sgml-insert-missing-element-comment: t
End:
-->
<!--
  LocalWords:
 -->


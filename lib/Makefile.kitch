# -*-Makefile-*-##############################################################
# K42: (C) Copyright IBM Corp. 2000, 2002.
# All Rights Reserved
#
# This file is distributed under the GNU LGPL. You should have
# received a copy of the License along with K42; see the file LICENSE.html
# in the top-level directory for more details.
#
#  $Id: Makefile.kitch,v 1.168 2005/09/01 19:43:12 neamtiu Exp $
# ############################################################################

include $(MKSRCTOP)/Make.paths
INSTALL_INC=$(TOOLBIN_PRE)kinstall

##############################################################################
#
# Define path to tools being generated by this build
ifndef K42_TOOLS_PATH
export K42_TOOLS_PATH=$(MKKITCHTOP)/tools/$(PLATFORM)/$(TARGET_MACHINE)
export PATH:=$(PATH):$(K42_TOOLS_PATH)
endif


##############################################################################
#
# Define parallel build options.
#

# This must be done in Makefile.kitch and Makerules.kitch.
# We try to determine if a parent has been invoked with parallel
# build options.  If so, then we don't pass -j, -l to children --
# MAKE is smart enough to figure out what is going on.
ifndef LOAD_LIMIT
export LOAD_LIMIT=16
export PROCS=4
endif

ifneq ($(PAR_OPTIONS),1)
PAR_OPTIONS:=1
SEQUENTIAL=-j 1 SEQ=1

ifneq ($(PAR),1)
  export PAR=1
  export PARALLEL=-j $(PROCS) -l $(LOAD_LIMIT) PAR=1
else
  export PARALLEL=
endif

ifeq ($(SEQ),1)
 export SEQ=1
 export PARALLEL=$(SEQUENTIAL)
 export PAR=0
endif
endif

###############################################################################
#
# File System Configuration
#

# generic file tools
MKFS=$(TOOLBIN_PRE)mkfs.kfs
FSCP=$(TOOLBIN_PRE)fscp

ifdef FILESYS_DISK_IMAGE
# install macros to copy/link files and directories to a disk image.
INSTALL_DSK=$(COPY_DSK) $(IMAGE_DSK) $(SRC_DSK) $(DEST_DSK)
INSTALL_DIR_DSK=$(COPY_DSK) -d $(IMAGE_DSK) $(DEST_DSK)
INSTALL_DSK_HDLNK=$(COPY_DSK) $(IMAGE_DSK) $(LSRC_DSK) $(LDEST_DSK)
else
INSTALL_DSK=
INSTALL_DIR_DSK=
INSTALL_DSK_HDLNK=
endif

# File system specific values for use by generic install macros above.

# KFS-specific
KFS_COPY_DSK=$(FSCP)
KFS_IMAGE_DSK=$(MKFSDISK)
KFS_SRC_DSK=$@
KFS_LSRC_DSK=kfs:$(<:$(MKKITCHROOT)/%=%)
KFS_DEST_DSK=kfs:$(@:$(MKKITCHROOT)/%=%)
KFS_LDEST_DSK=kfs:$(@:$(MKKITCHROOT)/%=%)
KFS_DEST_PREFIX=kfs:

COPY_DSK=	$($(FILESYS)_COPY_DSK)
IMAGE_DSK=	$($(FILESYS)_IMAGE_DSK)
SRC_DSK=	$($(FILESYS)_SRC_DSK)  
LSRC_DSK=	$($(FILESYS)_LSRC_DSK) 
DEST_DSK=	$($(FILESYS)_DEST_DSK) 
LDEST_DSK=	$($(FILESYS)_LDEST_DSK)
PREFIX=		$($(FILESYS)_DEST_PREFIX)

INSTALL_DISK_FILE = $(COPY_DSK) $(IMAGE_DSK) $(1) $(PREFIX)$(1)

#
# File System Configuration
#
###############################################################################

IN_OBJ_DIR=1

MAKEFLAGS += -Wall --no-builtin-rules

# define all the phony rules for performance
.PHONY : clean all genhdrs install_genhdrs libobjs install_libobjs
.PHONY : targets install_targets rm_targets default

# file that included this Makefile should define:
#    SRC_DIR_PATH - absolute path to source directory
#    TARGET_MACHINE - target machine of compilation
#    OPTIMIZATION =<noDeb, fullDeb, partDeb>

# get sources from private dirs (if any)machine specific source dir
# then source directory
VPATH = $(priv_VPATH)$(SRC_DIR_PATH):$(SRC_DIR_PATH)/arch/$(TARGET_MACHINE)


# implicit rules for kitchawan

# FIXME:  The following compilation rules explicitly remove their target .o
#         files before compiling because of a GCC 3.2.1 anomaly:
#         If a compilation fails, this version of GCC leaves an existing
#         .o file alone (which is okay) but removes an existing .d file (which
#         is not okay).  The result is that a subsequent "make" may succeed
#         even if the compilation problem isn't fixed, because the .o file no
#         longer appears to be out of date.
CLEANUP = || ($(RM) $@ && false)
ifeq ($(HIDECOMPILE),yes)
%.o : %.c
	@echo [CC]  $@ 
	@$(TARGET_CC) -c $(TARGET_CFLAGS) $(CPPFLAGS) $< -o $@ $(CLEANUP)

%32.o: %.c
	@echo [CC]  $@
	@$(TARGET32_CC) -c $(TARGET32_CFLAGS) $< -o $@ $(CLEANUP)

%.o : %.C
	@echo [CXX] $@
	@$(TARGET_CXX) -c $(TARGET_CXXFLAGS) $(CPPFLAGS) $< -o $@ $(CLEANUP)

%.o : %.S
	@echo [CC]  $@
	@$(TARGET_CC) -c $(TARGET_CFLAGS) $(ASFLAGS) $(CPPFLAGS) $(ASONLY_FLAGS) $< -o $@ $(CLEANUP)
else
%.o : %.c
	$(TARGET_CC) -c $(TARGET_CFLAGS) $(CPPFLAGS) $< -o $@ $(CLEANUP)

%32.o: %.c
	$(TARGET32_CC) -c $(TARGET32_CFLAGS) $< -o $@ $(CLEANUP)

%.o : %.C
	$(TARGET_CXX) -c $(TARGET_CXXFLAGS) $(CPPFLAGS) $< -o $@ $(CLEANUP)

%.o : %.S
	$(TARGET_CC) -c $(TARGET_CFLAGS) $(ASFLAGS) $(CPPFLAGS) $(ASONLY_FLAGS) $< -o $@ $(CLEANUP)
endif

%.E : %.C
	$(TARGET_CC) -dD -E $(TARGET_CXXFLAGS) $($(@:%.E=%)_FLAGS) \
	$(ASFLAGS) $(CPPFLAGS) $< -o $@

%.E : %.c
	$(TARGET_CC) -dD -E $(TARGET_CFLAGS) $($(@:%.E=%)_FLAGS) \
	$(ASFLAGS) $(CPPFLAGS) $< -o $@

%.S : %.C
	$(TARGET_CC) -S $(TARGET_CFLAGS) $(ASFLAGS) $(CPPFLAGS) $< -o $@

# put the rest of them here

StubBaseObj.H MetaBaseObj.H XBaseObj.H StubBaseObj.C XBaseObj.C : BaseObj.H
	-@$(ECHO) "Caught another of these bloody dependencies"

#
# WARNING:  These stub-generation rules are fragile.  It's necessary to have
#           a non-PRECIOUS intermediate file (%.stubgen), to have a separate
#           rule for each different stub-generated file, and to have an actual
#           command in each rule even though the command doesn't do anything.
#
ifdef K42TOOLS
STUBGEN=$(GNUPRE)stubgen
else
STUBGEN=$(MKTOOLBIN)/stubgen/stubgen
endif


stub/Stub%.H meta/Meta%.H meta/TplMeta%.H xobj/X%.H xobj/TplX%.H Stub%.C X%.C tmpl/TplX%.I: %.H
	$(STUBGEN) $(TARGET_MACHINE) $< $(KITCH_FLAGS) -w $(INCPATH) -D_IN_STUBGEN

stub/Stub%.H : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
meta/Meta%.H : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
meta/TplMeta%.H : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
xobj/X%.H : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
xobj/TplX%.H : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
Stub%.C : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
X%.C : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!
tmpl/TplX%.I : %.stubgen
	@$(ECHO) "$@ already made"	# don't delete this command!


# define different optimization levels
noDeb_OPT = -O2 -DNDEBUG
partDeb_OPT = -O1 -g 
fullDeb_OPT = -O0 -g

OPT=$($(OPTIMIZATION)_OPT)

##################################################################
#
#   Define STRIP.dbg

define STRIP.dbg
$(CP) $@ $@.dbg
$(TARGET_STRIP) $@
endef

define STRIP32.dbg
$(CP) $@ $@.dbg
$(TARGET32_STRIP) $@
endef

#ifeq ($(NODEBUG_TARGETS), 1)
#endef # STRIP.dbg
#define STRIP.dbg
#LDFLAGS += -Wl,-s
#else	# (NODEBUG_TARGETS, 1)
#endef # STRIP.dbg
#endif	# (NODEBUG_TARGETS, 1)

ifdef K42TOOLS
LDFLAGS += -Wl,--dynamic-linker,/usr/klib/ld64.so.1
endif

# dummy first target
default::

STUBSRCS = $(CLASSES:%=Stub%.C) $(SERVE:%=Stub%.C)
XSRCS    = $(CLASSES:%=X%.C)    

STUBHDRS_NODIR = $(CLASSES:%=Stub%.H) $(SERVE:%=Stub%.H) 
METAHDRS_NODIR = $(CLASSES:%=Meta%.H) $(CLASSES:%=TplMeta%.H) \
		 $(SERVE:%=Meta%.H) $(SERVE:%=TplMeta%.H)
XHDRS_NODIR    = $(CLASSES:%=X%.H)  $(CLASSES:%=TplX%.H) \
		 $(SERVE:%=X%.H)  $(SERVE:%=TplX%.H)
TMPLHDRS_NODIR = $(CLASSES:%=TplX%.I) $(SERVE:%=TplX%.I)

STUBHDRS = $(STUBHDRS_NODIR:%=stub/%)
METAHDRS = $(METAHDRS_NODIR:%=meta/%)
XHDRS    = $(XHDRS_NODIR:%=xobj/%)
TMPLHDRS = $(TMPLHDRS_NODIR:%=tmpl/%)
CLASSSRCS = $(STUBSRCS) $(XSRCS)

GENHDRS     += $(STUBHDRS) $(METAHDRS) $(XHDRS) $(TMPLHDRS)
LIBKERNSRCS += $(CLASSSRCS)
LIBKSRCS    += $(CLASSSRCS)
LIBCSRCS    += $(CLASSSRCS)

OBJS        = $(addsuffix .o,$(basename $(SRCS)))
TSTOBJS     = $(addsuffix .o,$(basename $(TSTSRCS)))
LIBCOBJS    = $(addsuffix .o,$(basename $(LIBCSRCS)))
LIBKOBJS    = $(addsuffix .o,$(basename $(LIBKSRCS)))
LIBNATVOBJS = $(addsuffix .o,$(basename $(LIBNATVSRCS)))
LIBKERNOBJS = $(addsuffix .o,$(basename $(LIBKERNSRCS)))
LIBEMUOBJS  = $(addsuffix .o,$(basename $(LIBEMUSRCS)))
LIBFSOBJS   = $(addsuffix .o,$(basename $(LIBFSSRCS)))
LIBVFSOBJS  = $(addsuffix .o,$(basename $(LIBVFSSRCS)))
LIBLKOBJS   = $(addsuffix .o,$(basename $(LIBLKSRCS)))
LIBSRVOBJS  = $(addsuffix .o,$(basename $(LIBSRVSRCS)))

LIBOBJS     =	$(LIBCOBJS)	\
		$(LIBKOBJS)	\
		$(LIBKERNOBJS)	\
		$(LIBEMUOBJS)	\
		$(LIBFSOBJS)    \
		$(LIBVFSOBJS)	\
		$(LIBSRVOBJS)	\
		$(LIBLKOBJS)

# the home directory seen on Kitchawan, it is now target specific
export MKKITCHROOT:=$(MKANCHOR)/install/$(TARGET_MACHINE)/$(OPTIMIZATION)/kitchroot

export MKFSDISK:=$(MKANCHOR)/$(TARGET_MACHINE)/$(OPTIMIZATION)/os/DISK0.0.0
export MKFSPKGDISK:=$(MKANCHOR)/$(TARGET_MACHINE)/$(OPTIMIZATION)/os/DISK0.0.1

ifndef K42_CONFIG
K42_CONFIG = $(K42_PKGROOT)/etc
endif

ifndef K42_PKGNFSROOT
K42_PKGNFSROOT = $(K42_PKGROOT)
endif

ifndef KITCH_GINC
KITCH_GINC = -I$(K42_PKGROOT)/usr/powerpc64-linux/include
endif
ifndef KITCH_GLIB
KITCH_GLIB = $(K42_PKGROOT)/usr/klib
endif

KITCH_GLIBC = $(KITCH_GLIB)/libc.a

K42_LIBDIR = $(MKKITCHROOT)/klib

LIBDIR = $(MKKITCHTOP)/lib/$(TARGET_MACHINE)/$(OPTIMIZATION)
LIB_BASE = $(LIBDIR)/libbase.a
LIB_NATV = $(LIBDIR)/libnative.a
LIB_KERN = $(LIBDIR)/libk.a
LIB_EMU  = $(LIBDIR)/libemu.a
LIB_FS   = $(LIBDIR)/libfs.a
LIB_VFS  = $(LIBDIR)/libvirtfs.a
LIB_LK   = $(LIBDIR)/liblk26.a
LIB_SRV  = $(LIBDIR)/libsrv.a
LIB_GCC  = $(LIBDIR)/libgcc.a

LINK.c = $(TARGET_CC) $(LDFLAGS) $(TARGET_ARCH)
LINK.cc = $(TARGET_CXX) $(LDFLAGS) $(TARGET_ARCH)

INC_TOP = $(MKKITCHTOP)/include
INC_GCC = $(MKKITCHTOP)/gcc-include/arch/$(TARGET_MACHINE)
INC_STBG = $(MKKITCHTOP)/include/stubgen/arch/$(TARGET_MACHINE)
INCPATH += -I. -I$(SRC_DIR_PATH) -I$(INC_TOP)
INCPATH += $(KITCH_GINC) -I$(LINUXSRCROOT)/include -I$(INC_GCC) -I$(INC_STBG) 


KITCH_FLAGS = $(CONF_FLAGS) $(MD_DEFINES)
CPPFLAGS += -DK42 -D_REENTRANT

# FIXME
# Glibc headers will emit warnings if endian'ness is not asserted
# Until the pain is over We'll put it here
ifeq ($(TARGET_MACHINE),amd64)
CPPFLAGS += -D__LITTLE_ENDIAN__
else
CPPFLAGS += -D__BIG_ENDIAN__
endif

K42_INCLUDE= -nostdinc $(INCPATH) $(INCPATH_TAIL)

# define standard flags (added to user defined)
CPPFLAGS += $(K42_INCLUDE) $($(@:%.o=%)_FLAGS)
TARGET_CFLAGS   += $(KITCH_FLAGS) $(WARN_FLAGS) $(OPT) $($(@:%.o=%)_FLAGS) 
TARGET32_CFLAGS += -static $(WARN_FLAGS) $(OPT)
TARGET_CXXFLAGS += $(CONF_CXXFLAGS) $(KITCH_FLAGS) $(WARN_FLAGS) \
		   $(OPT) $($(@:%.o=%)_FLAGS)
# Passing "KFS_ENABLED" all way from the top so KernelInit.C won't try to
# initialize disks on the simulator (the cut through doesn't work on mambo yet)
ifeq ($(FILESYS),KFS)
TARGET_CXXFLAGS += -DKFS_ENABLED
endif

# If ext2 is desired, add a define to the compiler command line.
ifdef EXT2_ENABLED
TARGET_CXXFLAGS += -DEXT2_ENABLED
endif

ASFLAGS  +=

KLDFLAGS += -L$(LIBDIR) $(EXTRA_KLDFLAGS)

# ################################################################
# All Make variables that the source Makefiles may depend on go
# before the following includes.
# ################################################################

# conditionally include machine specific Makefiles
-include $(SRC_DIR_PATH)/arch/$(TARGET_MACHINE)/Make.arch

#include the source directory makefile
include $(SRC_DIR_PATH)/Makefile

# ################################################################
# All Make variables that depend on variable defined in source
# Makefiles happen here.
# ################################################################


#
# KERNEL is assigned from the SOURCE Makefile
#
ifeq ($(KERNEL), 1)
INCPATH  += -I$(MKSRCTOP)/os/kernel
KITCH_FLAGS += -DKERNEL
else # is not kernel
endif


# ################################################################
# basic rules
# ################################################################

.PHONY: subdirs_all
.PHONY: subdirs_genhdrs
.PHONY: subdirs_install_genhdrs
.PHONY: subdirs_libobjs
.PHONY: subdirs_install_libobjs
.PHONY: subdirs_targets
.PHONY: subdirs_tst_targets
.PHONY: subdirs_install_targets
.PHONY: subdirs_rm_targets
.PHONY: subdirs_clean


all:: subdirs_all
clean:: subdirs_clean



genhdrs :: _genhdrs
_genhdrs : $(GENHDRS) subdirs_genhdrs local_genhdrs

install_genhdrs :: _install_genhdrs
_install_genhdrs : $(GENHDRS) local_install_genhdrs subdirs_install_genhdrs

.PHONY: local_libobjs 
libobjs :: _libobjs
_libobjs : local_libobjs subdirs_libobjs
# Build all .o's --- for libraries and targets during libobjs phase
local_libobjs: $(LIBOBJS) $(OBJS)

.PHONY: install_libobjs_stamps _install_libobjs 
.PHONY: __install_libobjs post_install_libobjs 
install_libobjs :: _install_libobjs

# __install_libobjs gives us something to depend on to force ordering
# in post_install_libobjs

_install_libobjs : __install_libobjs post_install_libobjs
__install_libobjs: subdirs_install_libobjs local_libobjs \
		   install_libobjs_stamps kernobjs.INPUT 

# post_install_objs is invoked only from the top-level make in the object dir.
# This allows us to link libraries only at the end (of any install_libobjs 
# build)
ifndef TOPLEVEL
export TOPLEVEL:=1

# List of libraries that need linking 

BUILD_LIBS_LIST=$(LIB_BASE) $(LIB_EMU) $(LIB_KERN) $(LIB_NATV) \
		$(LIB_FS) $(LIB_VFS) $(LIB_LK) $(LIB_SRV)

post_install_libobjs: static_libs dynlinker

.PHONY: static_libs
static_libs: $(BUILD_LIBS_LIST:%=build_%)
	find . -name "*.contents" |xargs rm -f

# Assemble all the .stamp files per library and issue one ar invocation

.INTERMEDIATE: %.contents
.PHONY: build_$(LIBDIR)/%.a

$(LIBDIR)/%.a: build_$(LIBDIR)/%.a



# dynamic linker needs to be built in correct object directory
dynlinker: static_libs 
	$(MAKE) $(PARALLEL) -C $(MKANCHOR)/$(TARGET_MACHINE)/$(OPTIMIZATION)/lib dynlinker


build_$(LIBDIR)/%.a: %.contents
	if [  -s $^ ] ; then 					\
	   sort -u $^  > $*.contents2;					\
	   $(TARGET_AR) cruvs $(@:build_%=%) `$(CAT) $*.contents2`;	\
	   find . -name $*.stamp|xargs rm -f ;				\
	   rm -f $*.contents2;						\
	fi

%.contents: __install_libobjs
	for i in `find . -name $*.stamp` ; do  				\
	        dir=$${i/$*.stamp/};					\
	        sed -e "s/^\(.*\)/$${dir//\//\/}\\1/" $$i;		\
	done >$@							\



else
post_install_libobjs:

endif


.PHONY: targets__server
targets:: _targets
_targets: subdirs_targets $(TARGETS) targets__server

.PHONY: install_targets__server
install_targets :: _install_targets
_install_targets : subdirs_install_targets $(TARGETS) install_targets__server


rm_targets:: _rm_targets
_rm_targets : subdirs_rm_targets
	-$(RM) $(TARGETS)

tst_targets :: _tst_targets
_tst_targets : subdirs_tst_targets $(TST_TARGETS)





ifdef LOCALGENHDRS
local_genhdrs :: $(GENHDRS)
local_install_genhdrs :: $(STUBHDRS)
	$(INSTALL_INC) $(INC_STBG)/stub ./stub $(STUBHDRS_NODIR)

local_install_genhdrs :: $(XHDRS)
	$(INSTALL_INC) $(INC_STBG)/xobj ./xobj $(XHDRS_NODIR)

local_install_genhdrs :: $(METAHDRS)
	$(INSTALL_INC) $(INC_STBG)/meta ./meta $(METAHDRS_NODIR)

local_install_genhdrs :: $(TMPLHDRS)
	$(INSTALL_INC) $(INC_STBG) ./tmpl $(TMPLHDRS_NODIR)

else
local_genhdrs:
local_install_genhdrs:
endif #LOCALGENHDRS

ifdef SUBDIRS
SUBDIRS_ALL = $(SUBDIRS:%=%_all)
.PHONY: $(SUBDIRS_ALL)
$(SUBDIRS_ALL) :
	cd $(@:%_all=%)/ && $(MAKE) all
subdirs_all: $(SUBDIRS_ALL)

SUBDIRS_GENHDRS = $(SUBDIRS:%=%_genhdrs)
.PHONY: $(SUBDIRS_GENHDRS)
$(SUBDIRS_GENHDRS) :
	cd $(@:%_genhdrs=%)/ && $(MAKE) genhdrs
subdirs_genhdrs: $(SUBDIRS_GENHDRS)

SUBDIRS_INSTALL_GENHDRS = $(SUBDIRS:%=%_install_genhdrs)
.PHONY: $(SUBDIRS_INSTALL_GENHDRS)
$(SUBDIRS_INSTALL_GENHDRS) :
	cd $(@:%_install_genhdrs=%)/ && $(MAKE) install_genhdrs
subdirs_install_genhdrs: $(SUBDIRS_INSTALL_GENHDRS)

SUBDIRS_LIBOBJS = $(SUBDIRS:%=%_libobjs)
.PHONY: $(SUBDIRS_LIBOBJS)
$(SUBDIRS_LIBOBJS) :
	cd $(@:%_libobjs=%)/ && $(MAKE) $(PARALLEL) libobjs
subdirs_libobjs: $(SUBDIRS_LIBOBJS)

SUBDIRS_INSTALL_LIBOBJS = $(SUBDIRS:%=%_install_libobjs)
.PHONY: $(SUBDIRS_INSTALL_LIBOBJS)
$(SUBDIRS_INSTALL_LIBOBJS) :
	cd $(@:%_install_libobjs=%)/ &&	 $(MAKE) $(PARALLEL) install_libobjs
subdirs_install_libobjs: $(SUBDIRS_INSTALL_LIBOBJS)

SUBDIRS_TARGETS = $(SUBDIRS:%=%_targets)
.PHONY: $(SUBDIRS_TARGETS)
$(SUBDIRS_TARGETS) :
	cd $(@:%_targets=%)/ && $(MAKE) $(PARALLEL) targets
subdirs_targets: $(SUBDIRS_TARGETS)

SUBDIRS_TST_TARGETS = $(SUBDIRS:%=%_tst_targets)
.PHONY: $(SUBDIRS_TST_TARGETS)
$(SUBDIRS_TST_TARGETS) :
	cd $(@:%_tst_targets=%)/ && $(MAKE) $(PARALLEL) tst_targets
subdirs_tst_targets: $(SUBDIRS_TST_TARGETS)

SUBDIRS_INSTALL_TARGETS = $(SUBDIRS:%=%_install_targets)
.PHONY: $(SUBDIRS_INSTALL_TARGETS)
$(SUBDIRS_INSTALL_TARGETS) :
	cd $(@:%_install_targets=%)/ && $(MAKE) $(PARALLEL) install_targets
subdirs_install_targets: $(SUBDIRS_INSTALL_TARGETS)

SUBDIRS_RM_TARGETS = $(SUBDIRS:%=%_rm_targets)
.PHONY: $(SUBDIRS_RM_TARGETS)
$(SUBDIRS_RM_TARGETS) :
	cd $(@:%_rm_targets=%)/ && $(MAKE) rm_targets
subdirs_rm_targets: $(SUBDIRS_RM_TARGETS)

SUBDIRS_CLEAN = $(SUBDIRS:%=%_clean)
.PHONY: $(SUBDIRS_CLEAN)
$(SUBDIRS_CLEAN) :
	cd $(@:%_clean=%)/ && $(MAKE) clean
subdirs_clean: $(SUBDIRS_CLEAN)
else
subdirs_all:
subdirs_genhdrs:
subdirs_install_genhdrs:
subdirs_libobjs:
subdirs_install_libobjs:
subdirs_targets:
subdirs_tst_targets:
subdirs_install_targets:
subdirs_rm_targets:
subdirs_clean:
endif #SUBDIR

# ################################################################
# rules for automatically making libraries
# ################################################################


ifneq ($(LIBCOBJS),)
# tell make to remove the stamp file.
# this makes sure that make failures do not keep the stamp file around.
BASE_STAMP=$(LIB_BASE:$(LIBDIR)/%.a=%.stamp)
$(LIB_BASE)(%): %
	$(ECHO) "$% " >> $(BASE_STAMP)
$(BASE_STAMP): $(LIB_BASE)($(LIBCOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(BASE_STAMP)
endif

ifneq ($(LIBNATVOBJS),)
# tell make to remove the stamp file.
# this makes sure that make failures do not keep the stamp file around.
NATV_STAMP=$(LIB_NATV:$(LIBDIR)/%.a=%.stamp)
$(LIB_NATV)(%): %
	$(ECHO) "$% " >> $(NATV_STAMP)
$(NATV_STAMP): $(LIB_NATV)($(LIBNATVOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(NATV_STAMP)
endif

ifneq ($(LIBEMUOBJS),)
EMU_STAMP=$(LIB_EMU:$(LIBDIR)/%.a=%.stamp)
$(LIB_EMU)(%): %
	$(ECHO) "$% " >> $(EMU_STAMP)
$(EMU_STAMP): $(LIB_EMU)($(LIBEMUOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(EMU_STAMP)
endif

ifneq ($(LIBFSOBJS),)
FS_STAMP=$(LIB_FS:$(LIBDIR)/%.a=%.stamp)
$(LIB_FS)(%): %
	$(ECHO) "$% " >> $(FS_STAMP)
$(FS_STAMP): $(LIB_FS)($(LIBFSOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(FS_STAMP)
endif

ifneq ($(LIBVFSOBJS),)
VFS_STAMP=$(LIB_VFS:$(LIBDIR)/%.a=%.stamp)
$(LIB_VFS)(%): %
	$(ECHO) "$% " >> $(VFS_STAMP)
$(VFS_STAMP): $(LIB_VFS)($(LIBVFSOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(VFS_STAMP)
endif

ifneq ($(LIBLKOBJS),)
LK_STAMP=$(LIB_LK:$(LIBDIR)/%.a=%.stamp)
$(LIB_LK)(%): %
	$(ECHO) "$% " >> $(LK_STAMP)
$(LK_STAMP): $(LIB_LK)($(LIBLKOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(LK_STAMP)
endif

ifneq ($(LIBSRVOBJS),)
SRV_STAMP=$(LIB_SRV:$(LIBDIR)/%.a=%.stamp)
$(LIB_SRV)(%): %
	$(ECHO) "$% " >> $(SRV_STAMP)
$(SRV_STAMP): $(LIB_SRV)($(LIBSRVOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(SRV_STAMP)
endif

ifneq ($(LIBKOBJS),)
KERN_STAMP=$(LIB_KERN:$(LIBDIR)/%.a=%.stamp)
$(LIB_KERN)(%): %
	$(ECHO) "$% " >> $(KERN_STAMP)
$(KERN_STAMP): $(LIB_KERN)($(LIBKOBJS))
	@$(TOUCH) $@
install_libobjs_stamps:: $(KERN_STAMP)
endif

%/kernobjs.INPUT: %_install_libobjs
	@true

SUBDIRS_INPUTS = $(SUBDIRS:%=%/kernobjs.INPUT)

ifneq ($(LIBKERNOBJS),)
ifeq ($(CURDIR),)
# this version of make does not support CURDIR
CURDIR=$(shell pwd)
endif

kernobjs.INPUT: $(LIBKERNOBJS) $(SUBDIRS_INPUTS)
	@$(ECHO) "adding $(LIBKERNOBJS) to $@"
	@$(RM) -f kernobjs.INPUT
ifneq ($(TARGET_MACHINE),mips64)
	test -z "$(LIBKERNOBJS)" || \
		$(ECHO) "INPUT( $(LIBKERNOBJS:%=$(CURDIR)/%) )" > $@
else
	test -z "$(LIBKERNOBJS)" || \
		$(ECHO) "$(LIBKERNOBJS:%=$(CURDIR)/%)" > $@
endif
	test -z "$(SUBDIRS_INPUTS)"  || cat $(SUBDIRS_INPUTS) >> $@


clean ::
	-$(RM) kernobjs.INPUT
else
kernobjs.INPUT: $(SRC_DIR_PATH)/Makefile $(SUBDIRS_INPUTS)
	$(ECHO) " " > $@
	test -z "$(SUBDIRS_INPUTS)"  || cat $(SUBDIRS_INPUTS) >> $@

clean ::
	-$(RM) kernobjs.INPUT
endif

ifneq ($(CLASSES)$(SERVE),)

install_genhdrs :: $(STUBHDRS)
	$(INSTALL_INC) $(INC_STBG)/stub ./stub $(STUBHDRS_NODIR)

install_genhdrs :: $(XHDRS)
	$(INSTALL_INC) $(INC_STBG)/xobj ./xobj $(XHDRS_NODIR)

install_genhdrs :: $(METAHDRS)
	$(INSTALL_INC) $(INC_STBG)/meta ./meta $(METAHDRS_NODIR)

install_genhdrs :: $(TMPLHDRS)
	$(INSTALL_INC) $(INC_STBG)/tmpl ./tmpl $(TMPLHDRS_NODIR)

clean ::
	-$(RM) -r stub xobj meta tmpl
endif



ifneq ($(SERVERS)$(NOINST_SERVERS),)

ifeq ($(CURDIR),)
# this version of make does not support CURDIR
CURDIR=$(shell pwd)
endif

$(SERVERS): $(OBJS) $(SERV_DEPS) $(KITCH_GLIBC)
	$(LINK.cc) -o $@ $(SERV_LDFLAGS) \
		-Wl,-dynamic-linker,/usr/klib/ld64.so.1 \
		-Wl,-rpath,/klib:/usr/klib \
		$(OBJS) \
		-L$(LIBDIR) \
		-L$(K42_LIBDIR) \
		-L$(KITCH_GLIB) \
		-Wl,-rpath-link,$(KITCH_GLIB) \
		$(SERV_LIBS) -lk42sys -lc
	$(STRIP.dbg)
	-$(RM) servers.list
	$(ECHO) "$(@:%=$(CURDIR)/%)" > servers.list

$(NOINST_SERVERS): $(OBJS) $(SERV_DEPS) $(LIB_BASE) $(KITCH_GLIBC)
	$(LINK.cc) -o $@ -static -Wl,-e,_k42start \
		$(OBJS) \
		-L$(LIBDIR) \
		-L$(KITCH_GLIB) \
		$(SERV_LIBS) -lbase -lc
	$(STRIP.dbg)
	-$(RM) servers.list
	$(ECHO) "$(@:%=$(CURDIR)/%)" > servers.list

$(MKKITCHROOT)/kbin/$(SERVERS): $(SERVERS)
	$(INSTALL) -m 0755 $< $@
	$(INSTALL_DSK)

targets__server:: $(SERVERS) $(NOINST_SERVERS)

install_targets__server:: $(MKKITCHROOT)/kbin/$(SERVERS) $(NOINST_SERVERS)

clean::
	-$(RM) $(SERVERS:%=%.dbg) $(SERVERS) servers.list
	-$(RM) $(NOINST_SERVERS:%=%.dbg) $(NOINST_SERVERS)

else

targets__server:

install_targets__server:

endif

#include dependency files for all object files
ifneq ($(CLASSES)$(SERVE),)
-include $(CLASSES:=.stubgen.d) $(SERVE:=.stubgen.d)
endif
ifneq ($(OBJS),)
-include $(OBJS:.o=.d)
endif
ifneq ($(TSTOBJS),)
-include $(TSTOBJS:.o=.d)
endif
ifneq ($(LIBOBJS),)
-include $(LIBOBJS:.o=.d)
endif

clean::
	$(RM) $(GENHDRS) $(CLASSSRCS) $(SERVE:%=X%.C) $(TARGETS) $(TST_TARGETS) \
		$(OBJS) $(TSTOBJS) $(LIBOBJS) \
		$(OBJS:.o=.d) $(TSTOBJS:.o=.d) $(LIBOBJS:.o=.d) \
		$(CLASSES:=.stubgen.d) $(SERVE:=.stubgen.d)


-include $(MKKITCHTOP)/lib/Make.help

# Iulian: for static analysis rules, include Makefile.san at this point, i.e.  
# -include $(MKSRCTOP)/kitchsrc/contrib/neamtiu/misc/dynamic_update/Makefile.san 

# ##########################-*-makefile-*- ###################################
# 1. Recursive make considered harmful.
# 2. BUILD = system arch on which we are configuring and compiling
#    TARGET = system arch for which new compilers tool will generate code
#    HOST = system on which K42 will run
# 3. Object/executables go into separate tree from sourcea
# 4. Included makefiles use pattern rules 
# 5. Included makefiles included directly from top-level makefile
# ############################################################################

# Basic build configuration.
D = full
OS = $(shell uname -s)
BUILD = $(shell uname -m)
HOST = powerpc
TARGET = $(BUILD)

# Build our source and output paths from above.
O = ..
H = .
S = $(O)/$(HOST)/$(D)Deb
B = $(S)/os/kexec
U = /u/kitchawa/k42-packages
IMG = $(U)/$(D)Deb.Img.4
L = ../linux-030
TOOLS = $(O)/install/tools/$(OS)_$(BUILD)/$(HOST)

# Include makefile that defines host-specific information
include Make-$(HOST).sub

# 64-bit cross-compile tools.
CC = $(CROSS_COMPILE)gcc
CXX = $(CROSS_COMPILE)g++
AR = $(CROSS_COMPILE)ar
LD = $(CROSS_COMPILE)ld
STRIP = $(CROSS_COMPILE)strip
NM = $(CROSS_COMPILE)nm
AR = $(CROSS_COMPILE)ar

# 32-bit cross-compile tools.
CC32 = $(CROSS32_COMPILE)gcc
LD32 = $(CROSS32_COMPILE)ld
OBJCOPY32 = $(CROSS32_COMPILE)objcopy
STRIP32 = $(CROSS32_COMPILE)strip

# Build machine native-compile tools.
BUILDCC = gcc
BUILDCFLAGS = -g -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer
MKDIR = mkdir
GZIP = gzip
CP = cp
STUBGEN = $(TOOLS)/stubgen/stubgen

# Target machine flags
#
# XXX Note that where the code refers to TARGET_MACHINE, it should instead
# refer to HOST_MACHINE. The TARGET_MACHINE macro currently exists
# for compatibility reasons with the old makefile system XXX
CFLAGS = -DTARGET_MACHINE="$(HOST)" -DHOST_MACHINE="$(FULLHOST)" \
         -D__GNU_AS__ -U$(HOST) -DGCC3	    \
         -Wa,-strip-local-absolute -fPIC -mminimal-toc -Wall -Werror -O0 -g \
         -DK42 -D_REENTRANT -nostdinc $($(HOST)_CFLAGS)

CXXFLAGS = -fno-rtti -nostdinc++ -fno-exceptions $(CFLAGS)

IFLAGS = -I$(O)/install/include					\
         -I$(IMG)/usr/$(FULLHOST)-linux/include	\
         -I$(L)/include						\
         -I$(O)/install/gcc-include/arch/$(HOST)		\
         -I$(O)/install/include/stubgen/arch/$(HOST)		\
	 $($(HOST)_IFLAGS)

# Common flags for building specific parts of K42 
#
# Linking servers
srv_lflags = -Wl,-dynamic-linker,/usr/klib/ld64.so.1 \
             -Wl,-rpath,/klib:/usr/klib \
	     -L$(O)/install/lib/$(HOST)/$(D)Deb \
	     -L$(O)/install/$(HOST)/$(D)Deb/kitchroot/klib \
	     -L$(IMG)/usr/klib
srv_libs = -llk26 -lvirtfs -lfs -lsrv -lk42sys -lc

srv_ldeps1 = liblk26.a libvirtfs.a libfs.a libsrv.a
srv_lib_deps = $(addprefix $(O)/install/lib/$(HOST)/$(D)Deb/, $(srv_ldeps1)) \
	       $(O)/install/$(HOST)/$(D)Deb/kitchroot/klib/libk42sys.so

################################################################################
# Functions for supporting later targets in included makefiles

# Call for expanding a stub directory into a full set of stub generator
# targets
stubgen_targets = $(1)/stub/Stub%.H $(1)/meta/Meta%.H $(1)/meta/TplMeta%.H  \
    $(1)/xobj/X%.H $(1)/xobj/TplX%.H $(1)/Stub%.C $(1)/X%.C $(1)/tmpl/TplX%.I

stubgen_objects = $(1)/stub/Stub$(2).H $(1)/meta/Meta$(2).H \
    $(1)/meta/TplMeta$(2).H $(1)/xobj/X$(2).H $(1)/xobj/TplX$(2).H \
    $(1)/Stub$(2).C $(1)/X$(2).C $(1)/tmpl/TplX$(2).I

# Call for printing status of commands in different forms
# If V=1, we echo the commands as normal, if V=2, show out-of-date depends.
V = 0
ifeq "$(V)" "0"
.SILENT:
status = printf " %-7s %s\n" $(1) "$(subst $(O)/,,$(2))"
else
ifeq "$(V)" "2"
.SILENT:
status = printf " %-7s %s [%s]\n" $(1) \
           "$(subst $(O)/,,$(2))" $(notdir $(firstword $?))
endif
endif

################################################################################
# Our non-file targets that don't depend on later variable definitions
.PHONY: k42-vmlinux k42-zImage includes servers dirs config all clean FORCE

# Default target is just the directory skeleton and our bootable kernel.
k42-vmlinux: dirs includes $(S)/os/servers/baseServers/baseServers $(S)/os/k42-vmlinux

# For some machines we need a compressed kernel.
k42-zImage: dirs $(S)/os/servers/baseServers/baseServers $(S)/os/k42-zImage

all: k42-vmlinux servers

# Just print some debug information and exit.
config:
	@echo build $(D)-debug K42 on $(BUILD) $(OS) for $(HOST) from $(OBJS)

# Delete everything we built.
clean:
	$(call status, RM, $(wildcard $(OBJS)))
	$(RM) $(wildcard $(OBJS))

################################################################################
# Real Rules begin here
# 
# A number of special variables are used over the course of the included
# makefiles. In particular:
# - $(OBJS) contains targets we build that directories
#   need to be created for and that we clean
# - $(libkobjs) contains objects that need to be included in the 
#   libk.a kernel library
# - $(baseServers_objs) contains objects that need to be included in
#   baseServers
# - $(lib_includes) include files that need to be installed
# - $(build_servers) servers that need to be built
# - $(boot_servers) servers that need to be packaged for booting

# Rule for how to incrementally link our kernel objects.
$(S)/os/k%objs.o:
	$(call status, LD, $@)
	$(LD) -r $^ -o $@

# Include rules for how to build the kernel itself
# Current subobjects are: kbootobjs.o kinitobjs.o kexceptobjs.o
#         kmemobjs.o kprocobjs.o kstubobjs.o kbilgeobjs.o 
#         ktraceobjs.o ksysobjs.o klinobjs.o
include os/Make.sub

# Makefiles from kernel objects 
include os/boot/arch/$(HOST)/Make.sub
include os/kernel/init/Make.sub
include os/kernel/exception/Make.sub
include os/kernel/mem/Make.sub
include os/kernel/proc/Make.sub
include os/kernel/stubtest/Make.sub
include os/kernel/bilge/Make.sub
include os/kernel/trace/Make.sub
include os/kernel/sys/Make.sub
include os/kernel/linux/Make.sub

# Include library submakefiles (currently just libk.a)

include lib/libc/alloc/Make.sub
include lib/libc/cobj/Make.sub
include lib/libc/cobj/sys/Make.sub
include lib/libc/fslib/Make.sub
include lib/libc/io/Make.sub
include lib/libc/misc/Make.sub
include lib/libc/scheduler/Make.sub
include lib/libc/stdlib/Make.sub
include lib/libc/sync/Make.sub
include lib/libc/sys/Make.sub
include lib/libc/trace/Make.sub
include lib/libc/usr/Make.sub

# Include server submakefiles

include os/servers/dev/Make.sub
include os/servers/k42Ramfs/Make.sub
include os/servers/kfs/Make.sub
include os/servers/mountPoint/Make.sub
include os/servers/loadImage/Make.sub
include os/servers/nfs/Make.sub
include os/servers/ois/Make.sub
include os/servers/pipe/Make.sub
include os/servers/pty/Make.sub
include os/servers/procfs/Make.sub
include os/servers/reboot/Make.sub
include os/servers/sample/Make.sub
include os/servers/shell/Make.sub
include os/servers/traced/Make.sub
include os/servers/unionfs/Make.sub
include os/servers/userProc/Make.sub
include os/servers/baseServers/Make.sub		# has to be last of the servers
include os/servers/Make.sub

libkobjs+= \
           $(S)/usr/StubRemoteIPCTst.o $(S)/usr/StubUsrTst.o		   \
           $(S)/usr/XUsrTst.o

OBJS += $(O)/install/lib/$(HOST)/$(D)Deb/libk.a
$(O)/install/lib/$(HOST)/$(D)Deb/libk.a: $(libkobjs)
	$(call status, AR, $@)
	$(AR) crs $@ $?


lflags = -fno-rtti -nostdinc++ -fno-exceptions -DTARGET_MACHINE="$(HOST)" \
        -D__GNU_AS__ -Upowerpc -DGCC3 -MD -Wa,-strip-local-absolute	  \
        -fPIC -mminimal-toc -Wall -Werror -O0 -g			  \
        -DKFS_ENABLED -DK42 -D_REENTRANT -D__BIG_ENDIAN__ -nostdinc
kflags = $(lflags) -DKERNEL
iflags = -I$(L)/include						\
         -I$(O)/install/include					\
         -I$(O)/install/gcc-include/arch/$(HOST)		\
         -I$(O)/install/include/stubgen/arch/$(HOST)		\
         -I$(IMG)/usr/powerpc64-linux/include
jflags = -I$(L)/arch/k42/include $(iflags)

os_kernel_linux_flags = -I$(H)/os/kernel \
                        -I$(H)/os/kernel/linux
$(S)/os/kernel/linux/%.o: $(H)/os/kernel/linux/arch/powerpc/%.C
	$(call status, CXX, $@)
	$(CXX) -c $(kflags) $(jflags) $(os_kernel_linux_flags) $< -o $@

###############################################################################

# Rules for moving include files into place

OBJS += $(lib_includes)

###############################################################################
# Phony targets expanded from rules defined above

servers: $(build_servers)

includes: $(lib_includes)

# Now that OBJS is totally expanded, generate our directory list from it.
DIRS = $(sort $(foreach obj, $(OBJS), $(dir $(obj))))
dirs: $(DIRS)

# This is always the last rule: it needs OBJS to be totally expanded.
$(DIRS):
	$(call status, MKDIR, $@)
	$(MKDIR) $@

showdirs:
	echo $(DIRS)

showobjs:
	echo $(OBJS)

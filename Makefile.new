# ##########################-*-makefile-*- ###################################
# 1. Recursive make considered harmful.
# 2. BUILD = system arch on which we are configuring and compiling
#    TARGET = system arch for which new compilers tool will generate code
#    HOST = system on which K42 will run
# 3. Object/executables go into separate tree from sourcea
# 4. Included makefiles use pattern rules 
# 5. Included makefiles included directly from top-level makefile
# ############################################################################

# Basic build configuration.
D = full
OS = $(shell uname -s)
BUILD = $(shell uname -m)
HOST = powerpc
TARGET = $(BUILD)

# Build our source and output paths from above.
O = ..
H = .
S = $(O)/$(HOST)/$(D)Deb
B = $(S)/os/kexec
U = /u/kitchawa/k42-packages
IMG = $(U)/$(D)Deb.Img.4
L = ../linux-030
TOOLS = $(O)/install/tools/$(OS)_$(BUILD)/$(HOST)

# Include makefile that defines host-specific information
include Make-$(HOST).sub

# 64-bit cross-compile tools.
CC = $(CROSS_COMPILE)gcc
CXX = $(CROSS_COMPILE)g++
AR = $(CROSS_COMPILE)ar
LD = $(CROSS_COMPILE)ld
STRIP = $(CROSS_COMPILE)strip
NM = $(CROSS_COMPILE)nm
AR = $(CROSS_COMPILE)ar

# 32-bit cross-compile tools.
CC32 = $(CROSS32_COMPILE)gcc
LD32 = $(CROSS32_COMPILE)ld
OBJCOPY32 = $(CROSS32_COMPILE)objcopy
STRIP32 = $(CROSS32_COMPILE)strip

# Build machine native-compile tools.
BUILDCC = gcc
BUILDCFLAGS = -g -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer
MKDIR = mkdir
GZIP = gzip
CP = cp
STUBGEN = $(TOOLS)/stubgen/stubgen

# Target machine flags
#
# XXX Note that where the code refers to TARGET_MACHINE, it should instead
# refer to HOST_MACHINE. The TARGET_MACHINE macro currently exists
# for compatibility reasons with the old makefile system XXX
CFLAGS = -DTARGET_MACHINE="$(HOST)" -DHOST_MACHINE="$(FULLHOST)" \
         -D__GNU_AS__ -U$(HOST) -DGCC3	    \
         -Wa,-strip-local-absolute -fPIC -mminimal-toc -Wall -Werror -O0 -g \
         -DK42 -D_REENTRANT -nostdinc $($(HOST)_CFLAGS)

CXXFLAGS = -fno-rtti -nostdinc++ -fno-exceptions $(CFLAGS)

IFLAGS = -I$(O)/install/include					\
         -I$(IMG)/usr/$(FULLHOST)-linux/include	\
         -I$(L)/include						\
         -I$(O)/install/gcc-include/arch/$(HOST)		\
         -I$(O)/install/include/stubgen/arch/$(HOST)		\
	 $($(HOST)_IFLAGS)

################################################################################
# Functions for supporting later targets in included makefiles

# Call for expanding a stub directory into a full set of stub generator
# targets
stubgen_targets = $(1)/stub/Stub%.H $(1)/meta/Meta%.H $(1)/meta/TplMeta%.H  \
    $(1)/xobj/X%.H $(1)/xobj/TplX%.H $(1)/Stub%.C $(1)/X%.C $(1)/tmpl/TplX%.I

stubgen_objects = $(1)/stub/Stub$(2).H $(1)/meta/Meta$(2).H \
    $(1)/meta/TplMeta$(2).H $(1)/xobj/X$(2).H $(1)/xobj/TplX$(2).H \
    $(1)/Stub$(2).C $(1)/X$(2).C $(1)/tmpl/TplX$(2).I

# Call for printing status of commands in different forms
# If V=1, we echo the commands as normal, if V=2, show out-of-date depends.
V = 0
ifeq "$(V)" "0"
.SILENT:
status = printf " %-7s %s\n" $(1) "$(subst $(O)/,,$(2))"
else
ifeq "$(V)" "2"
.SILENT:
status = printf " %-7s %s [%s]\n" $(1) \
           "$(subst $(O)/,,$(2))" $(notdir $(firstword $?))
endif
endif

################################################################################
# Our non-file targets that don't depend on later variable definitions
.PHONY: k42-vmlinux k42-zImage includes servers dirs config all clean FORCE

# Default target is just the directory skeleton and our bootable kernel.
k42-vmlinux: dirs includes $(S)/os/servers/baseServers/baseServers $(S)/os/k42-vmlinux

# For some machines we need a compressed kernel.
k42-zImage: dirs $(S)/os/servers/baseServers/baseServers $(S)/os/k42-zImage

all: k42-vmlinux servers

# Just print some debug information and exit.
config:
	@echo build $(D)-debug K42 on $(BUILD) $(OS) for $(HOST) from $(OBJS)

# Delete everything we built.
clean:
	$(call status, RM, $(wildcard $(OBJS)))
	$(RM) $(wildcard $(OBJS))

################################################################################
# Real Rules begin here
# 
# A number of special variables are used over the course of the included
# makefiles. In particular:
# - $(OBJS) contains targets we build that directories
#   need to be created for and that we clean

# Rule for how to incrementally link our kernel objects.
$(S)/os/k%objs.o:
	$(call status, LD, $@)
	$(LD) -r $^ -o $@

# Include rules for how to build the kernel itself
include os/Make.sub

# Include rules for how to build the necessary boot objects and scripts
# for a particular architecture and wrap the kernel appropriately
include os/boot/arch/$(HOST)/Make.sub

# Makefiles from os/kernel
include os/kernel/init/Make.sub
include os/kernel/exception/Make.sub
include os/kernel/mem/Make.sub
include os/kernel/proc/Make.sub
include os/kernel/stubtest/Make.sub
include os/kernel/bilge/Make.sub
include os/kernel/trace/Make.sub
include os/kernel/sys/Make.sub
include os/kernel/linux/Make.sub

libkobjs = $(S)/lib/libc/alloc/AllocCell.o $(S)/lib/libc/alloc/AllocPool.o \
           $(S)/lib/libc/alloc/AllocRegionManager.o			   \
           $(S)/lib/libc/alloc/AllocStats.o				   \
           $(S)/lib/libc/alloc/DataChunk.o				   \
           $(S)/lib/libc/alloc/GMalloc.o $(S)/lib/libc/alloc/LMalloc.o	   \
           $(S)/lib/libc/alloc/LMallocOpt.o				   \
           $(S)/lib/libc/alloc/LeakProof.o				   \
           $(S)/lib/libc/alloc/MemDesc.o				   \
           $(S)/lib/libc/alloc/MemoryMgrPrimitive.o			   \
           $(S)/lib/libc/alloc/ObjCache.o				   \
           $(S)/lib/libc/alloc/PMalloc.o				   \
           $(S)/lib/libc/alloc/PageAllocatorDefault.o			   \
           $(S)/lib/libc/alloc/PageAllocatorUser.o			   \
           $(S)/lib/libc/alloc/VAllocServices.o				   \
           $(S)/lib/libc/alloc/alloctst.o $(S)/lib/libc/cobj/BaseObj.o	   \
           $(S)/lib/libc/cobj/COList.o					   \
           $(S)/lib/libc/cobj/COListServer.o				   \
           $(S)/lib/libc/cobj/CObjRep.o					   \
           $(S)/lib/libc/cobj/CObjRepArbiter.o				   \
           $(S)/lib/libc/cobj/CObjRepArbiterCallCounter.o		   \
           $(S)/lib/libc/cobj/CObjRepArbiterTarget.o			   \
           $(S)/lib/libc/cobj/CObjRepMediator.o				   \
           $(S)/lib/libc/cobj/CObjRoot.o				   \
           $(S)/lib/libc/cobj/CObjRootArbiter.o				   \
           $(S)/lib/libc/cobj/CObjRootMediator.o			   \
           $(S)/lib/libc/cobj/CObjRootMultiRep.o			   \
           $(S)/lib/libc/cobj/CObjRootSingleRep.o			   \
           $(S)/lib/libc/cobj/DataTransfer.o				   \
           $(S)/lib/libc/cobj/Factory.o					   \
           $(S)/lib/libc/cobj/MediatedThreadTable.o			   \
           $(S)/lib/libc/cobj/Obj.o $(S)/lib/libc/cobj/ObjectHandle.o	   \
           $(S)/lib/libc/cobj/StubCOListServer.o			   \
           $(S)/lib/libc/cobj/StubObj.o					   \
           $(S)/lib/libc/cobj/StubTypeMgrServer.o			   \
           $(S)/lib/libc/cobj/TypeMgr.o					   \
           $(S)/lib/libc/cobj/TypeMgrServer.o				   \
           $(S)/lib/libc/cobj/XCOListServer.o				   \
           $(S)/lib/libc/cobj/XHandleTrans.o $(S)/lib/libc/cobj/XObj.o	   \
           $(S)/lib/libc/cobj/XObjectList.o				   \
           $(S)/lib/libc/cobj/XTypeMgrServer.o				   \
           $(S)/lib/libc/cobj/arbiterMethods.o				   \
           $(S)/lib/libc/cobj/missHandlingtest.o			   \
           $(S)/lib/libc/cobj/sys/ActiveThrdCnt.o			   \
           $(S)/lib/libc/cobj/sys/COSDefaultObject.o			   \
           $(S)/lib/libc/cobj/sys/COSMgrObject.o			   \
           $(S)/lib/libc/cobj/sys/TransPageDesc.o			   \
           $(S)/lib/libc/cobj/sys/TransPageDescHash.o			   \
           $(S)/lib/libc/cobj/sys/TransPageDescList.o			   \
           $(S)/lib/libc/cobj/sys/defaultFuncs.o			   \
           $(S)/lib/libc/cobj/sys/mediateMethods.o			   \
           $(S)/lib/libc/fslib/FSNode.o					   \
           $(S)/lib/libc/fslib/StubFSNode.o				   \
           $(S)/lib/libc/fslib/XFSNode.o $(S)/lib/libc/io/DirBuf.o	   \
           $(S)/lib/libc/io/IO.o $(S)/lib/libc/io/IOForkManager.o	   \
           $(S)/lib/libc/io/IORingBuffer.o $(S)/lib/libc/io/MemTrans.o	   \
           $(S)/lib/libc/io/PathName.o $(S)/lib/libc/io/StubBlockDev.o	   \
           $(S)/lib/libc/io/StubCallBackObj.o				   \
           $(S)/lib/libc/io/StubFileLinuxClientStream.o			   \
           $(S)/lib/libc/io/StubFileLinuxServer.o			   \
           $(S)/lib/libc/io/StubMemTrans.o				   \
           $(S)/lib/libc/io/StubNameTreeLinux.o				   \
           $(S)/lib/libc/io/StubPAPageServer.o				   \
           $(S)/lib/libc/io/StubPacketServer.o				   \
           $(S)/lib/libc/io/StubSocketServer.o				   \
           $(S)/lib/libc/io/StubStreamServer.o				   \
           $(S)/lib/libc/io/StubStreamServerTTY.o			   \
           $(S)/lib/libc/io/StubSysVMessagesClient.o			   \
           $(S)/lib/libc/io/StubVAPageServer.o				   \
           $(S)/lib/libc/io/StubVirtFile.o				   \
           $(S)/lib/libc/io/XBlockDev.o					   \
           $(S)/lib/libc/io/XCallBackObj.o				   \
           $(S)/lib/libc/io/XFileLinuxClientStream.o			   \
           $(S)/lib/libc/io/XFileLinuxServer.o				   \
           $(S)/lib/libc/io/XMemTrans.o					   \
           $(S)/lib/libc/io/XNameTreeLinux.o				   \
           $(S)/lib/libc/io/XPAPageServer.o				   \
           $(S)/lib/libc/io/XStreamServer.o				   \
           $(S)/lib/libc/io/XStreamServerTTY.o				   \
           $(S)/lib/libc/io/XSysVMessagesClient.o			   \
           $(S)/lib/libc/io/XVAPageServer.o				   \
           $(S)/lib/libc/io/XVirtFile.o $(S)/lib/libc/io/cprintf.o	   \
           $(S)/lib/libc/io/printfBuf.o					   \
           $(S)/lib/libc/misc/BaseRandom.o				   \
           $(S)/lib/libc/misc/BlockSet.o				   \
           $(S)/lib/libc/misc/DiskMountInfoList.o			   \
           $(S)/lib/libc/misc/HashSimple.o				   \
           $(S)/lib/libc/misc/ListSimple.o				   \
           $(S)/lib/libc/misc/ListSimpleKey.o				   \
           $(S)/lib/libc/misc/SharedBufferConsumer.o			   \
           $(S)/lib/libc/misc/SharedBufferProducer.o			   \
           $(S)/lib/libc/misc/SharedBufferProducerUser.o		   \
           $(S)/lib/libc/misc/expedient.o				   \
           $(S)/lib/libc/misc/fpr_save_restore.o			   \
           $(S)/lib/libc/misc/hardware.o $(S)/lib/libc/misc/linkage.o	   \
           $(S)/lib/libc/misc/simSupport.o				   \
           $(S)/lib/libc/misc/testSupport.o				   \
           $(S)/lib/libc/misc/volatileFrame.o				   \
           $(S)/lib/libc/scheduler/DispatcherDefault.o			   \
           $(S)/lib/libc/scheduler/DispatcherDefaultAsm.o		   \
           $(S)/lib/libc/scheduler/DispatcherDefaultExp.o		   \
           $(S)/lib/libc/scheduler/DispatcherMgr.o			   \
           $(S)/lib/libc/scheduler/Scheduler.o				   \
           $(S)/lib/libc/scheduler/SchedulerService.o			   \
           $(S)/lib/libc/scheduler/SchedulerTimer.o			   \
           $(S)/lib/libc/scheduler/StubSchedulerService.o		   \
           $(S)/lib/libc/scheduler/Thread.o				   \
           $(S)/lib/libc/scheduler/TimerEvent.o				   \
           $(S)/lib/libc/scheduler/TimerRequest.o			   \
           $(S)/lib/libc/scheduler/XSchedulerService.o			   \
           $(S)/lib/libc/stdlib/baseAtoi.o				   \
           $(S)/lib/libc/stdlib/baseFgets.o				   \
           $(S)/lib/libc/stdlib/baseSprintf.o				   \
           $(S)/lib/libc/stdlib/baseStrtol.o				   \
           $(S)/lib/libc/stdlib/isctype.o				   \
           $(S)/lib/libc/stdlib/memccpy.o				   \
           $(S)/lib/libc/stdlib/memcmp.o $(S)/lib/libc/stdlib/string.o	   \
           $(S)/lib/libc/sync/BLockAsm.o				   \
           $(S)/lib/libc/sync/BLockGeneric.o				   \
           $(S)/lib/libc/sync/BLockImp.o $(S)/lib/libc/sync/Barrier.o	   \
           $(S)/lib/libc/sync/BlockedThreadQueues.o			   \
           $(S)/lib/libc/sync/FairBLock.o				   \
           $(S)/lib/libc/sync/MPMsgMgr.o				   \
           $(S)/lib/libc/sync/MPMsgMgrDisabled.o			   \
           $(S)/lib/libc/sync/MPMsgMgrEnabled.o				   \
           $(S)/lib/libc/sync/RequestCount.o				   \
           $(S)/lib/libc/sync/SLock.o $(S)/lib/libc/sync/atomic.o	   \
           $(S)/lib/libc/sys/InitStep.o $(S)/lib/libc/sys/LinuxCreds.o	   \
           $(S)/lib/libc/sys/ProcessClient.o				   \
           $(S)/lib/libc/sys/ProcessSet.o				   \
           $(S)/lib/libc/sys/ResMgrWrapper.o				   \
           $(S)/lib/libc/sys/SMTMgr.o $(S)/lib/libc/sys/StubInitStep.o	   \
           $(S)/lib/libc/sys/StubProcessClient.o			   \
           $(S)/lib/libc/sys/StubProcessLinuxClient.o			   \
           $(S)/lib/libc/sys/StubShMemBuf.o				   \
           $(S)/lib/libc/sys/SystemMiscWrapper.o			   \
           $(S)/lib/libc/sys/TAssert.o $(S)/lib/libc/sys/XInitStep.o	   \
           $(S)/lib/libc/sys/XProcessClient.o				   \
           $(S)/lib/libc/sys/XProcessLinuxClient.o			   \
           $(S)/lib/libc/sys/XShMemBuf.o $(S)/lib/libc/sys/g++sup.o	   \
           $(S)/lib/libc/sys/ppccore.o $(S)/lib/libc/trace/traceLib.o	   \
           $(S)/lib/libc/usr/GDBIOKern.o				   \
           $(S)/lib/libc/usr/ProgExecArch.o				   \
           $(S)/lib/libc/usr/ProgExecCommon.o				   \
           $(S)/lib/libc/usr/align.o $(S)/lib/libc/usr/gdb-stub.o	   \
           $(S)/lib/libc/usr/memoryMap.o				   \
           $(S)/lib/libc/usr/runProcessCommon.o				   \
           $(S)/os/kernel/bilge/StubBuildDate.o				   \
           $(S)/os/kernel/bilge/StubDiskSwap.o				   \
           $(S)/os/kernel/bilge/StubFSFRSwap.o				   \
           $(S)/os/kernel/bilge/StubIPSock.o				   \
           $(S)/os/kernel/bilge/StubKBootParms.o			   \
           $(S)/os/kernel/bilge/StubKernBogusDisk.o			   \
           $(S)/os/kernel/bilge/StubKernSimDisk.o			   \
           $(S)/os/kernel/bilge/StubKernToyDisk.o			   \
           $(S)/os/kernel/bilge/StubNetDev.o				   \
           $(S)/os/kernel/bilge/StubPrivilegedService.o			   \
           $(S)/os/kernel/bilge/StubSystemMisc.o			   \
           $(S)/os/kernel/bilge/StubTestScheduler.o			   \
           $(S)/os/kernel/bilge/StubTestSwitch.o			   \
           $(S)/os/kernel/bilge/StubWire.o				   \
           $(S)/os/kernel/exception/StubCPUContainer.o			   \
           $(S)/os/kernel/init/StubAsyncTester.o			   \
           $(S)/os/kernel/init/StubInitServer.o				   \
           $(S)/os/kernel/init/StubServerState.o			   \
           $(S)/os/kernel/init/XAsyncTester.o				   \
           $(S)/os/kernel/mem/StubFR.o $(S)/os/kernel/mem/StubFRCRW.o	   \
           $(S)/os/kernel/mem/StubFRComputation.o			   \
           $(S)/os/kernel/mem/StubFRKernelPinned.o			   \
           $(S)/os/kernel/mem/StubFRLTransTable.o			   \
           $(S)/os/kernel/mem/StubFRPA.o $(S)/os/kernel/mem/StubFRVA.o	   \
           $(S)/os/kernel/mem/StubKernelPagingTransport.o		   \
           $(S)/os/kernel/mem/StubKernelPagingTransportPA.o		   \
           $(S)/os/kernel/mem/StubKernelPagingTransportVA.o		   \
           $(S)/os/kernel/mem/StubRegionDefault.o			   \
           $(S)/os/kernel/mem/StubRegionFSComm.o			   \
           $(S)/os/kernel/mem/StubRegionPerProcessor.o			   \
           $(S)/os/kernel/mem/StubRegionRedZone.o			   \
           $(S)/os/kernel/mem/StubRegionReplicated.o			   \
           $(S)/os/kernel/mem/XFR.o					   \
           $(S)/os/kernel/proc/StubProcessServer.o			   \
           $(S)/os/kernel/proc/StubProcessSetKern.o			   \
           $(S)/os/kernel/stubtest/StubBonnie.o				   \
           $(S)/os/kernel/sys/symdefsKern.o				   \
           $(S)/os/servers/baseServers/StubBaseServers.o		   \
           $(S)/os/servers/baseServers/StubDevFSBlk.o			   \
           $(S)/os/servers/baseServers/StubDevFSDir.o			   \
           $(S)/os/servers/baseServers/StubDevFSRemote.o		   \
           $(S)/os/servers/baseServers/StubDevOpener.o			   \
           $(S)/os/servers/baseServers/StubFRProvider.o			   \
           $(S)/os/servers/baseServers/StubFileSystemDev.o		   \
           $(S)/os/servers/baseServers/StubProcessLinuxServer.o		   \
           $(S)/os/servers/baseServers/StubResMgr.o			   \
           $(S)/os/servers/baseServers/StubStreamServerSocket.o		   \
           $(S)/os/servers/baseServers/StubSysFSAttrFile.o		   \
           $(S)/os/servers/baseServers/XBaseServers.o			   \
           $(S)/os/servers/baseServers/XDevOpener.o			   \
           $(S)/os/servers/baseServers/XFRProvider.o			   \
           $(S)/os/servers/k42Ramfs/StubFileSystemK42RamFS.o		   \
           $(S)/os/servers/kfs/StubFileSystemKFS.o			   \
           $(S)/os/servers/mountPoint/StubMountPointMgr.o		   \
           $(S)/os/servers/nfs/StubFileSystemNFS.o			   \
           $(S)/os/servers/pipe/StubStreamServerPipe.o			   \
           $(S)/os/servers/pty/StubLogin.o				   \
           $(S)/os/servers/pty/StubSysVMessages.o			   \
           $(S)/os/servers/pty/StubSysVSemaphores.o			   \
           $(S)/os/servers/pty/StubSysVSharedMem.o			   \
           $(S)/os/servers/sample/StubSampleService.o			   \
           $(S)/os/servers/unionfs/StubFileSystemUnion.o		   \
           $(S)/usr/StubRemoteIPCTst.o $(S)/usr/StubUsrTst.o		   \
           $(S)/usr/XUsrTst.o

OBJS += $(O)/install/lib/$(HOST)/$(D)Deb/libk.a
$(O)/install/lib/$(HOST)/$(D)Deb/libk.a: $(libkobjs)
	$(call status, AR, $@)
	$(AR) crs $@ $?


lflags = -fno-rtti -nostdinc++ -fno-exceptions -DTARGET_MACHINE="$(HOST)" \
        -D__GNU_AS__ -Upowerpc -DGCC3 -MD -Wa,-strip-local-absolute	  \
        -fPIC -mminimal-toc -Wall -Werror -O0 -g			  \
        -DKFS_ENABLED -DK42 -D_REENTRANT -D__BIG_ENDIAN__ -nostdinc
kflags = $(lflags) -DKERNEL
iflags = -I$(L)/include						\
         -I$(O)/install/include					\
         -I$(O)/install/gcc-include/arch/$(HOST)		\
         -I$(O)/install/include/stubgen/arch/$(HOST)		\
         -I$(IMG)/usr/powerpc64-linux/include
jflags = -I$(L)/arch/k42/include $(iflags)

os_kernel_linux_flags = -I$(H)/os/kernel \
                        -I$(H)/os/kernel/linux
$(S)/os/kernel/linux/%.o: $(H)/os/kernel/linux/arch/powerpc/%.C
	$(call status, CXX, $@)
	$(CXX) -c $(kflags) $(jflags) $(os_kernel_linux_flags) $< -o $@

lib_libc_alloc_flags = -I$(S)/lib/libc/alloc	\
                       -I$(H)/lib/libc		\
                       -I$(H)/lib/libc/alloc
$(S)/lib/libc/alloc/%.o: $(H)/lib/libc/alloc/%.C
	$(call status, CXX, $@)
	$(CXX) -c $(lflags) $(iflags) $(lib_libc_alloc_flags) $< -o $@

###############################################################################
$(S)/os/servers/bootServers.o: cflags = $(CFLAGS)

$(S)/os/servers/bootServers.o: iflags = -I$(O)/os/servers \
                                        -I$(H)/os/servers $(IFLAGS)

$(S)/os/servers/bootServers.o: $(S)/os/servers/bootServers.s
	$(call status, CXX, $@)
	$(CXX) $(cflags) $(iflags) -c $^ -o $@

###############################################################################

bootServers_tool = $(O)/install/tools/Linux_$(BUILD)/$(HOST)/mkserv

bootServers_dep1 = $(S)/os/servers/baseServers/servers.list
bootServers_dep2 = $(S)/os/servers/reboot/servers.list
bootServers_deps = $(bootServers_dep1) $(bootServers_dep2) \
		   $(S)/os/servers/baseServers/baseServers

bootServers_iflags = -t gasBE -F $(bootServers_dep1) -F $(bootServers_dep2)

$(S)/os/servers/bootServers.s: $(bootServers_deps) $(bootServers_tool)
	$(call status, MKSERV, $@)
	$(bootServers_tool) $(bootServers_iflags) -o $@

###############################################################################

baseServers_objs1 = baseServer.o fileSystemServices.o FileSystemDev.o	\
                    DevFSBlk.o XDevFSBlk.o DevFSDir.o XFileSystemDev.o	\
                    XDevFSDir.o DevFSRemote.o XDevFSRemote.o		\
                    SysFSAttrFile.o XSysFSAttrFile.o MountPointMgrImp.o	\
                    XMountPointMgr.o Login.o SysVSharedMem.o		\
                    SysVSemaphores.o SysVMessages.o Util.o XLogin.o	\
                    XSysVSharedMem.o XSysVSemaphores.o XSysVMessages.o	\
                    LinuxPTY.o IOForwarder.o IOForwarderConsole.o	\
                    printk.o StreamServerPipe.o XStreamServerPipe.o	\
                    FileSystemNFS.o NFSHandle.o NFSMount.o NFSClient.o	\
                    ServerFileBlockNFS.o ServerFileDirNFS.o		\
                    mount_clnt.o mount_xdr.o nfs_clnt.o nfs_xdr.o	\
                    XFileSystemNFS.o FileSystemK42RamFS.o		\
                    ServerFileBlockK42RamFS.o ServerFileDirK42RamFS.o	\
                    FileInfoK42RamFS.o XFileSystemK42RamFS.o		\
                    loadImage.o KFSDebug.o KFSDisk.o SuperBlock.o	\
                    PSOBasicRW.o RecordMap.o LSOBasic.o LSOBasicFile.o	\
                    LSOBasicDir.o LSOBasicSymlink.o ObjToken.o		\
                    PSODiskBlock.o ServerObject.o FileSystemKFS.o	\
                    XFileSystemKFS.o FileSystemKFSK42.o			\
                    ServerFileBlockKFS.o FSFileKFS.o FSFileKFSK42.o	\
                    KFSGlobals.o PSOPreallocExtent.o PSOSmall.o		\
                    PSOSmallMeta.o BlockCache.o BlockCacheK42.o		\
                    KFSDHash.o TimerEventBC.o crtServer.o		\
                    PrivilegedServiceWrapper.o ResMgr.o XResMgr.o	\
                    ProcessLinuxServer.o XProcessLinuxServer.o		\
                    StreamServerSocket.o XStreamServerSocket.o

baseServers_objs2 = $(L)/pty.k42lib.o $(L)/util.k42lib.o

baseServers_objs = $(addprefix $(S)/os/servers/baseServers/, \
                     $(baseServers_objs1)) $(baseServers_objs2)

baseServers_lflags = -static -Wl,-e,_k42start				\
                     -L$(O)/install/lib/powerpc/$(D)Deb			\
                     -L$(IMG)/usr/klib			\
                     -Wl,--whole-archive -lemu -Wl,--no-whole-archive	\
                     -llk26 -lvirtfs -lfs -lsrv -lbase -lc

baseServers_ldeps1 = libemu.a liblk26.a libvirtfs.a libfs.a libsrv.a

baseServers_ldeps = $(addprefix $(O)/install/lib/$(HOST)/$(D)Deb/, \
		      $(baseServers_ldeps1))

$(S)/os/servers/baseServers/baseServers.dbg: $(baseServers_ldeps)
$(S)/os/servers/baseServers/baseServers.dbg: lflags = $(baseServers_lflags)
$(S)/os/servers/baseServers/baseServers.dbg: $(baseServers_objs)
	$(call status, CXX, $@)
	$(CXX) $(baseServers_objs) $(lflags) -o $@

baseServers_dep = $(S)/os/servers/baseServers/baseServers.dbg

$(S)/os/servers/baseServers/baseServers: $(baseServers_dep)
	$(call status, STRIP, $@)
	$(STRIP) -s $< -o $@

###############################################################################
# Generate and compile stubs and server in servers

# sampleServer
OBJS += $(call stubgen_objects, $(S)/os/servers/sample,SampleServer)

$(call stubgen_targets, $(S)/os/servers/sample): $(H)/os/servers/sample/%.H
	$(call status, STUBGEN, $@)
	$(STUBGEN) $(HOST) $< -o $(shell dirname $@) $(CXXFLAGS) -w -I. $(IFLAGS) -D_IN_STUBGEN
	$(RM) -f $(shell basename $< .H).stubgen.d

server_lflags = -Wl,-dynamic-linker,/usr/klib/ld64.so.1 \
		-Wl,-rpath,/klib:/usr/klib \
		-L$(O)/install/lib/$(HOST)/$(D)Deb \
		-L$(O)/install/$(HOST)/$(D)Deb/kitchroot/klib \
	        -L$(IMG)/usr/klib \
                -lk42sys -lc

$(S)/os/servers/sample/%.o: cflags = $(CXXFLAGS)
$(S)/os/servers/sample/%.o: iflags = -I$(O)/os/servers \
                                     -I$(H)/os/servers $(IFLAGS)

# Note - we don't yet build SampleServiceWrapper.o so we don't have it in OBJS
# yet
#
$(OBJS) += $(addprefix $(S)/os/servers/sample/, sample.o SampleServiceServer.o sample.o StubSampleService.o XSampleService.o sampleServer sampleServer.dbg)
$(S)/os/servers/sample/%.o: $(S)/os/servers/sample/%.C
	$(call status, CXX, $@)
	$(CXX) $(cflags) $(iflags) -c $^ -o $@

$(S)/os/servers/sample/sampleServer.dbg: $(addprefix $(S)/os/servers/sample/, sample.o SampleServiceServer.o XSampleService.o)
	$(call status, LD, $@)
	$(CXX) -o $@ $^ $(server_lflags)

$(S)/os/servers/sample/sampleServer: $(S)/os/servers/sample/sampleServer.dbg
	$(call status, STRIP, $@)
	$(CP) $< $@
	$(STRIP) $@

build_servers += $(S)/os/servers/sample/sampleServer
###############################################################################

# Rules for moving include files into place
lib_includes := 

stdlibincs = ctype.h float.h limits.h string.h 
lib_includes += $(addprefix $(O)/install/include/, $(stdlibincs))
$(O)/install/include/%.h: $(H)/lib/libc/stdlib/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@

cobjsysincs = COSMgr.H COSMgrObject.H COSMissHandler.H COSTransObject.H COSconsts.h COVTable.H TransEntry.H COSDefaultObject.H COSBreakpointObject.H TransPageDescList.H TransPageDescHash.H TransPageDesc.H ActiveThrdCnt.H CODesc.H
lib_includes += $(addprefix $(O)/install/include/cobj/sys/, $(cobjsysincs))
$(O)/install/include/cobj/sys/%.H: $(H)/lib/libc/cobj/sys/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/cobj/sys/%.h: $(H)/lib/libc/cobj/sys/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@

cobjincs = CObjRep.H CObjRoot.H CObjRootSingleRep.H CObjRootMultiRep.H ObjectRefs.H  XHandleTrans.H XObjectList.H BaseObj.H Obj.H ObjectHandle.H TypeMgr.H TypeMgrServer.H TypeFactory.H Example.H CObjRepArbiter.H CObjRepArbiterTarget.H CObjRootArbiter.H DataTransfer.H DTType.H CObjGlobals.H Factory.H COListServer.H COList.H
lib_includes += $(addprefix $(O)/install/include/cobj/, $(cobjincs))
$(O)/install/include/cobj/%.H: $(H)/lib/libc/cobj/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@
	
allocincs = alloc.H AllocPool.H LMalloc.H AllocCell.H PageAllocatorUser.H PageAllocatorDefault.H MemoryMgrPrimitive.H AllocRegionManager.H MemDesc.H VAllocServices.H AllocStats.H DataChunk.H AllocStats.H PMalloc.H ObjCache.H
lib_includes += $(addprefix $(O)/install/include/alloc/, $(allocincs))
$(O)/install/include/alloc/%.H: $(H)/lib/libc/alloc/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

lib_includes += $(O)/install/include/sys/PageAllocator.H $(O)/install/include/sys/LeakProof.H
$(O)/install/include/sys/%.H: $(H)/lib/libc/alloc/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

misc_powerpc_includes = asm.h asmdef.h alloca.H hardware.H expedient.H volatileFrame.H asdef.h trap.h pwrPC.H simSupport.H bits.h

misc_arch_includes = $(addprefix $(O)/install/include/misc/arch/$(HOST)/, $(misc_$(HOST)_includes))
lib_includes += $(misc_arch_includes)
$(O)/install/include/misc/arch/$(HOST)/%.h: $(H)/lib/libc/misc/arch/$(HOST)/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/misc/arch/$(HOST)/%.H: $(H)/lib/libc/misc/arch/$(HOST)/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

misc_includes = asm.h asmdef.h alloca.H hardware.H expedient.H volatileFrame.H linkage.H ListSimple.H ListArraySimple.H ListArraySimple.C ListSimpleKey.H ListSimpleKeyLocked.H ListSimpleLocked.H  StringShort.H BitStructure.H macros.H StringTable.H StringTable.I utilities.H baseStdio.H simpleThread.H  SSAC.H SSACSimplePartitionedArray.H SSACSimplePartitionedArray.C testSupport.H HashSimple.H BitVec.H DHashTable.H AutoList.H AutoList.I BaseRandom.H HashNonBlocking.H HashNonBlocking.I AtomicBitVec64.H BlockSet.H DiskMountInfoList.H Callback.H SharedBufferProducer.H SharedBufferProducerUser.H SharedBufferConsumer.H SharedBufferConsumerUser.H
lib_includes += $(addprefix $(O)/install/include/misc/, $(misc_includes))
$(O)/install/include/misc/%.h: $(H)/lib/libc/misc/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/misc/%.H: $(H)/lib/libc/misc/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/misc/%.I: $(H)/lib/libc/misc/%.I
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/misc/%.C: $(H)/lib/libc/misc/%.C
	$(call status, INSTALL, $@)
	$(CP) $< $@

sys_powerpc_includes =  sysTypes.H macdefs.H config.H types.H ppccore.H extRegs.H

sys_arch_includes = $(addprefix $(O)/install/include/sys/arch/$(HOST)/, $(sys_$(HOST)_includes))
lib_includes += $(sys_arch_includes)
$(O)/install/include/sys/arch/$(HOST)/%.H: $(H)/lib/libc/sys/arch/$(HOST)/%>H
	$(call status, INSTALL, $@)
	$(CP) $< $@

sys_includes = systemAccess.H sysTypes.H sysIncs.H BaseProcess.H ProcessWrapper.H ProcessSet.H ProcessSetUser.H macdefs.H config.H types.H ppccore.H kinclude.H SysStatus.H TAssert.H ProcessClient.H ProcessLinux.H LinuxCreds.H ResMgrWrapper.H SystemMiscWrapper.H MountPointMgrClient.H MountPointMgrCommon.H SMTMgr.H ProcessLinuxClient.H ShMemBuf.H ShMemClnt.H InitStep.H Initialization.H hostSysTypes.H bswap.h extRegs.H
lib_includes += $(addprefix $(O)/install/include/sys/, $(sys_includes))
$(O)/install/include/sys/%.h: $(H)/lib/libc/sys/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/sys/%.H: $(H)/lib/libc/sys/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

usr_powerpc_includes = ProgExecArch.H
usr_arch_includes = $(addprefix $(O)/install/include/usr/arch/$(HOST)/, $(usr_$(HOST)_includes))
lib_includes += $(usr_arch_includes)
$(O)/install/include/usr/arch/$(HOST)/%.H: $(H)/lib/libc/usr/arch/$(HOST)/%>H
	$(call status, INSTALL, $@)
	$(CP) $< $@

usr_includes = ProgExec.H runProcessCommon.H
lib_includes += $(addprefix $(O)/install/include/usr/, $(usr_includes))
$(O)/install/include/usr/%.H: $(H)/lib/libc/usr/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

lib_includes += $(O)/install/include/sys/GDBIO.H
$(O)/install/include/sys/%.H: $(H)/lib/libc/usr/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

scheduler_powerpc_includes = DispatcherDefault.H DispatcherDefaultExp.H
scheduler_arch_includes = $(addprefix $(O)/install/include/scheduler/arch/$(HOST)/, $(scheduler_$(HOST)_includes))
lib_includes += $(scheduler_arch_includes)
$(O)/install/include/scheduler/arch/$(HOST)/%.H: $(H)/lib/libc/scheduler/arch/$(HOST)/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

scheduler_includes = Thread.H Scheduler.H DispatcherDefault.H DispatcherDefaultExp.H SchedulerTimer.H SchedulerService.H VPSet.H DispatcherMgr.H CachePaddedArray.H
lib_includes += $(addprefix $(O)/install/include/scheduler/, $(scheduler_includes))
$(O)/install/include/scheduler/%.h: $(H)/lib/libc/scheduler/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/scheduler/%.H: $(H)/lib/libc/scheduler/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

trace_powerpc_includes = traceReserve.H
trace_arch_includes = $(addprefix $(O)/install/include/trace/arch/$(HOST)/, $(trace_$(HOST)_includes))
lib_includes += $(trace_arch_includes)
$(O)/install/include/trace/arch/$(HOST)/%.h: $(H)/lib/libc/trace/arch/$(HOST)/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@

trace_includes = traceCore.H traceReserve.H traceLib.H tracePack.H traceK42.h
lib_includes += $(addprefix $(O)/install/include/trace/, $(trace_includes))
$(O)/install/include/trace/%.h: $(H)/lib/libc/trace/%.h
	$(call status, INSTALL, $@)
	$(CP) $< $@
$(O)/install/include/trace/%.H: $(H)/lib/libc/trace/%.H
	$(call status, INSTALL, $@)
	$(CP) $< $@

OBJS += $(lib_includes)

###############################################################################
# Phony targets expanded from rules defined above

servers: $(build_servers)

includes: $(lib_includes)

# Now that OBJS is totally expanded, generate our directory list from it.
DIRS = $(sort $(foreach obj, $(OBJS), $(dir $(obj))))
dirs: $(DIRS)

# This is always the last rule: it needs OBJS to be totally expanded.
$(DIRS):
	$(call status, MKDIR, $@)
	$(MKDIR) $@

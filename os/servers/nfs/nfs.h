/******************************************************************************
 * K42: (C) Copyright IBM Corp. 2001.
 * All Rights Reserved
 *
 * This file is distributed under the GNU LGPL. You should have
 * received a copy of the license along with K42; see the file LICENSE.html
 * in the top-level directory for more details.
 *
 * $Id: nfs.h,v 1.4 2005/04/11 21:04:33 dilma Exp $
 *****************************************************************************/
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef __NFS_H_
#define __NFS_H_

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif /* #ifdef __cplusplus */

#define MAXDATA 8192
#define MAXPATHLENGTH 1024
#define MAXNAMELENGTH 255
#define COOKIESIZE 4
#define FHSIZE 32

typedef char *filename;

typedef char *path;

typedef char nfsfhandle[FHSIZE];

typedef u_int nfscookie;

typedef struct {
	u_int nfsdata_len;
	char *nfsdata_val;
} nfsdata;

enum nfsstat {
	NFS_OK = 0,
	NFSERR_PERM = 1,
	NFSERR_NOENT = 2,
	NFSERR_IO = 5,
	NFSERR_NXIO = 6,
	NFSERR_ACCES = 13,
	NFSERR_EXIST = 17,
	NFSERR_NODEV = 19,
	NFSERR_NOTDIR = 20,
	NFSERR_ISDIR = 21,
	NFSERR_FBIG = 27,
	NFSERR_NOSPC = 28,
	NFSERR_ROFS = 30,
	NFSERR_NAMETOOLONG = 63,
	NFSERR_NOTEMPTY = 66,
	NFSERR_DQUOT = 69,
	NFSERR_STALE = 70,
	NFSERR_WFLUSH = 99,
};
typedef enum nfsstat nfsstat;

enum ftype {
	NFNON = 0,
	NFREG = 1,
	NFDIR = 2,
	NFBLK = 3,
	NFCHR = 4,
	NFLNK = 5,
	NFSOCK = 6,
	NFBAD = 7,
	NFFIFO = 8
};
typedef enum ftype ftype;

#define NFS2_FIFO_DEV	(-1)
	
struct timevalue {
	u_int seconds;
	u_int useconds;
};
typedef struct timevalue timevalue;

struct sattr {
	u_int mode;
	u_int uid;
	u_int gid;
	u_int size;
	timevalue atime;
	timevalue mtime;
};
typedef struct sattr sattr;

struct fattr {
	ftype type;
	u_int mode;
	u_int nlink;
	u_int uid;
	u_int gid;
	u_int size;
	u_int blocksize;
	u_int rdev;
	u_int blocks;
	u_int fsid;
	u_int fileid;
	timevalue atime;
	timevalue mtime;
	timevalue ctime;
};
typedef struct fattr fattr;

struct sattrargs {
	nfsfhandle file;
	sattr attributes;
};
typedef struct sattrargs sattrargs;

struct diropargs {
	nfsfhandle dir;
	filename name;
};
typedef struct diropargs diropargs;

struct readargs {
	nfsfhandle file;
	u_int offset;
	u_int count;
	u_int totalcount;
};
typedef struct readargs readargs;

struct writeargs {
	nfsfhandle file;
	u_int beginoffset;
	u_int offset;
	u_int totalcount;
	nfsdata data;
};
typedef struct writeargs writeargs;

struct createargs {
	diropargs where;
	sattr attributes;
};
typedef struct createargs createargs;

struct renameargs {
	diropargs from;
	diropargs to;
};
typedef struct renameargs renameargs;

struct linkargs {
	nfsfhandle from;
	diropargs to;
};
typedef struct linkargs linkargs;

struct symlinkargs {
	diropargs from;
	path to;
	sattr attributes;
};
typedef struct symlinkargs symlinkargs;

struct readdirargs {
	nfsfhandle dir;
	nfscookie cookie;
	u_int count;
};
typedef struct readdirargs readdirargs;

struct attrstat {
	nfsstat status;
	union {
		fattr attributes;
	} attrstat_u;
};
typedef struct attrstat attrstat;

struct diropok_tag {
	nfsfhandle file;
	fattr attributes;
};
typedef struct diropok_tag diropok_tag;

struct diropres {
	nfsstat status;
	union {
		diropok_tag diropok;
	} diropres_u;
};
typedef struct diropres diropres;

struct readlinkres {
	nfsstat status;
	union {
		path data;
	} readlinkres_u;
};
typedef struct readlinkres readlinkres;

struct readok_tag {
	fattr attributes;
	nfsdata data;
};
typedef struct readok_tag readok_tag;

struct readres {
	nfsstat status;
	union {
		readok_tag readok;
	} readres_u;
};
typedef struct readres readres;

struct entry {
	u_int fileid;
	filename name;
	nfscookie cookie;
	struct entry *nextentry;
};
typedef struct entry entry;

struct readdirok_tag {
	entry *entries;
	bool_t eof;
};
typedef struct readdirok_tag readdirok_tag;

struct readdirres {
	nfsstat status;
	union {
		readdirok_tag readdirok;
	} readdirres_u;
};
typedef struct readdirres readdirres;

struct info_tag {
	u_int tsize;
	u_int bsize;
	u_int blocks;
	u_int bfree;
	u_int bavail;
};
typedef struct info_tag info_tag;

struct statfsres {
	nfsstat status;
	union {
		info_tag info;
	} statfsres_u;
};
typedef struct statfsres statfsres;

#define NFS_PROGRAM 100003
#define NFS_VERSION 2

#if defined(__STDC__) || defined(__cplusplus)
#define NFSPROC_NULL 0
extern  void * nfsproc_null_2(void *, CLIENT *);
extern  void * nfsproc_null_2_svc(void *, struct svc_req *);
#define NFSPROC_GETATTR 1
extern  attrstat * nfsproc_getattr_2(char *, CLIENT *);
extern  attrstat * nfsproc_getattr_2_svc(char *, struct svc_req *);
#define NFSPROC_SETATTR 2
extern  attrstat * nfsproc_setattr_2(sattrargs *, CLIENT *);
extern  attrstat * nfsproc_setattr_2_svc(sattrargs *, struct svc_req *);
#define NFSPROC_ROOT 3
extern  void * nfsproc_root_2(void *, CLIENT *);
extern  void * nfsproc_root_2_svc(void *, struct svc_req *);
#define NFSPROC_LOOKUP 4
extern  diropres * nfsproc_lookup_2(diropargs *, CLIENT *);
extern  diropres * nfsproc_lookup_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READLINK 5
extern  readlinkres * nfsproc_readlink_2(char *, CLIENT *);
extern  readlinkres * nfsproc_readlink_2_svc(char *, struct svc_req *);
#define NFSPROC_READ 6
extern  readres * nfsproc_read_2(readargs *, CLIENT *);
extern  readres * nfsproc_read_2_svc(readargs *, struct svc_req *);
#define NFSPROC_WRITECACHE 7
extern  void * nfsproc_writecache_2(void *, CLIENT *);
extern  void * nfsproc_writecache_2_svc(void *, struct svc_req *);
#define NFSPROC_WRITE 8
extern  attrstat * nfsproc_write_2(writeargs *, CLIENT *);
extern  attrstat * nfsproc_write_2_svc(writeargs *, struct svc_req *);
#define NFSPROC_CREATE 9
extern  diropres * nfsproc_create_2(createargs *, CLIENT *);
extern  diropres * nfsproc_create_2_svc(createargs *, struct svc_req *);
#define NFSPROC_REMOVE 10
extern  nfsstat * nfsproc_remove_2(diropargs *, CLIENT *);
extern  nfsstat * nfsproc_remove_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_RENAME 11
extern  nfsstat * nfsproc_rename_2(renameargs *, CLIENT *);
extern  nfsstat * nfsproc_rename_2_svc(renameargs *, struct svc_req *);
#define NFSPROC_LINK 12
extern  nfsstat * nfsproc_link_2(linkargs *, CLIENT *);
extern  nfsstat * nfsproc_link_2_svc(linkargs *, struct svc_req *);
#define NFSPROC_SYMLINK 13
extern  nfsstat * nfsproc_symlink_2(symlinkargs *, CLIENT *);
extern  nfsstat * nfsproc_symlink_2_svc(symlinkargs *, struct svc_req *);
#define NFSPROC_MKDIR 14
extern  diropres * nfsproc_mkdir_2(createargs *, CLIENT *);
extern  diropres * nfsproc_mkdir_2_svc(createargs *, struct svc_req *);
#define NFSPROC_RMDIR 15
extern  nfsstat * nfsproc_rmdir_2(diropargs *, CLIENT *);
extern  nfsstat * nfsproc_rmdir_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READDIR 16
extern  readdirres * nfsproc_readdir_2(readdirargs *, CLIENT *);
extern  readdirres * nfsproc_readdir_2_svc(readdirargs *, struct svc_req *);
#define NFSPROC_STATFS 17
extern  statfsres * nfsproc_statfs_2(char *, CLIENT *);
extern  statfsres * nfsproc_statfs_2_svc(char *, struct svc_req *);
extern int nfs_program_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* #if defined(__STDC__) || ... */
#define NFSPROC_NULL 0
extern  void * nfsproc_null_2();
extern  void * nfsproc_null_2_svc();
#define NFSPROC_GETATTR 1
extern  attrstat * nfsproc_getattr_2();
extern  attrstat * nfsproc_getattr_2_svc();
#define NFSPROC_SETATTR 2
extern  attrstat * nfsproc_setattr_2();
extern  attrstat * nfsproc_setattr_2_svc();
#define NFSPROC_ROOT 3
extern  void * nfsproc_root_2();
extern  void * nfsproc_root_2_svc();
#define NFSPROC_LOOKUP 4
extern  diropres * nfsproc_lookup_2();
extern  diropres * nfsproc_lookup_2_svc();
#define NFSPROC_READLINK 5
extern  readlinkres * nfsproc_readlink_2();
extern  readlinkres * nfsproc_readlink_2_svc();
#define NFSPROC_READ 6
extern  readres * nfsproc_read_2();
extern  readres * nfsproc_read_2_svc();
#define NFSPROC_WRITECACHE 7
extern  void * nfsproc_writecache_2();
extern  void * nfsproc_writecache_2_svc();
#define NFSPROC_WRITE 8
extern  attrstat * nfsproc_write_2();
extern  attrstat * nfsproc_write_2_svc();
#define NFSPROC_CREATE 9
extern  diropres * nfsproc_create_2();
extern  diropres * nfsproc_create_2_svc();
#define NFSPROC_REMOVE 10
extern  nfsstat * nfsproc_remove_2();
extern  nfsstat * nfsproc_remove_2_svc();
#define NFSPROC_RENAME 11
extern  nfsstat * nfsproc_rename_2();
extern  nfsstat * nfsproc_rename_2_svc();
#define NFSPROC_LINK 12
extern  nfsstat * nfsproc_link_2();
extern  nfsstat * nfsproc_link_2_svc();
#define NFSPROC_SYMLINK 13
extern  nfsstat * nfsproc_symlink_2();
extern  nfsstat * nfsproc_symlink_2_svc();
#define NFSPROC_MKDIR 14
extern  diropres * nfsproc_mkdir_2();
extern  diropres * nfsproc_mkdir_2_svc();
#define NFSPROC_RMDIR 15
extern  nfsstat * nfsproc_rmdir_2();
extern  nfsstat * nfsproc_rmdir_2_svc();
#define NFSPROC_READDIR 16
extern  readdirres * nfsproc_readdir_2();
extern  readdirres * nfsproc_readdir_2_svc();
#define NFSPROC_STATFS 17
extern  statfsres * nfsproc_statfs_2();
extern  statfsres * nfsproc_statfs_2_svc();
extern int nfs_program_2_freeresult ();
#endif /* #if defined(__STDC__) || ... */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_filename (XDR *, filename*);
extern  bool_t xdr_path (XDR *, path*);
extern  bool_t xdr_nfsfhandle (XDR *, nfsfhandle);
extern  bool_t xdr_nfscookie (XDR *, nfscookie*);
extern  bool_t xdr_nfsdata (XDR *, nfsdata*);
extern  bool_t xdr_nfsstat (XDR *, nfsstat*);
extern  bool_t xdr_ftype (XDR *, ftype*);
extern  bool_t xdr_timevalue (XDR *, timevalue*);
extern  bool_t xdr_sattr (XDR *, sattr*);
extern  bool_t xdr_fattr (XDR *, fattr*);
extern  bool_t xdr_sattrargs (XDR *, sattrargs*);
extern  bool_t xdr_diropargs (XDR *, diropargs*);
extern  bool_t xdr_readargs (XDR *, readargs*);
extern  bool_t xdr_writeargs (XDR *, writeargs*);
extern  bool_t xdr_createargs (XDR *, createargs*);
extern  bool_t xdr_renameargs (XDR *, renameargs*);
extern  bool_t xdr_linkargs (XDR *, linkargs*);
extern  bool_t xdr_symlinkargs (XDR *, symlinkargs*);
extern  bool_t xdr_readdirargs (XDR *, readdirargs*);
extern  bool_t xdr_attrstat (XDR *, attrstat*);
extern  bool_t xdr_diropok_tag (XDR *, diropok_tag*);
extern  bool_t xdr_diropres (XDR *, diropres*);
extern  bool_t xdr_readlinkres (XDR *, readlinkres*);
extern  bool_t xdr_readok_tag (XDR *, readok_tag*);
extern  bool_t xdr_readres (XDR *, readres*);
extern  bool_t xdr_entry (XDR *, entry*);
extern  bool_t xdr_readdirok_tag (XDR *, readdirok_tag*);
extern  bool_t xdr_readdirres (XDR *, readdirres*);
extern  bool_t xdr_info_tag (XDR *, info_tag*);
extern  bool_t xdr_statfsres (XDR *, statfsres*);

#else /* #if defined(__STDC__) || ... */
extern bool_t xdr_filename ();
extern bool_t xdr_path ();
extern bool_t xdr_nfsfhandle ();
extern bool_t xdr_nfscookie ();
extern bool_t xdr_nfsdata ();
extern bool_t xdr_nfsstat ();
extern bool_t xdr_ftype ();
extern bool_t xdr_timevalue ();
extern bool_t xdr_sattr ();
extern bool_t xdr_fattr ();
extern bool_t xdr_sattrargs ();
extern bool_t xdr_diropargs ();
extern bool_t xdr_readargs ();
extern bool_t xdr_writeargs ();
extern bool_t xdr_createargs ();
extern bool_t xdr_renameargs ();
extern bool_t xdr_linkargs ();
extern bool_t xdr_symlinkargs ();
extern bool_t xdr_readdirargs ();
extern bool_t xdr_attrstat ();
extern bool_t xdr_diropok_tag ();
extern bool_t xdr_diropres ();
extern bool_t xdr_readlinkres ();
extern bool_t xdr_readok_tag ();
extern bool_t xdr_readres ();
extern bool_t xdr_entry ();
extern bool_t xdr_readdirok_tag ();
extern bool_t xdr_readdirres ();
extern bool_t xdr_info_tag ();
extern bool_t xdr_statfsres ();

#endif /* #if defined(__STDC__) || ... */

#ifdef __cplusplus
}
#endif /* #ifdef __cplusplus */

#endif /* #ifndef __NFS_H_ */
